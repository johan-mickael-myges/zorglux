/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={"./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$":(e,t,s)=>{var r={"./clickable_controller.js":"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/clickable_controller.js","./menu_toggler_controller.js":"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/menu_toggler_controller.js","./quill_controller.js":"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/quill_controller.js"};function n(e){var t=o(e);return s(t)}function o(e){if(!s.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}n.keys=function(){return Object.keys(r)},n.resolve=o,e.exports=n,n.id="./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$"},"./node_modules/@hotwired/stimulus/dist/stimulus.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Application:()=>te,AttributeObserver:()=>_,Context:()=>F,Controller:()=>de,ElementObserver:()=>j,IndexedMultimap:()=>x,Multimap:()=>k,SelectorObserver:()=>O,StringMapObserver:()=>N,TokenListObserver:()=>q,ValueListObserver:()=>T,add:()=>w,defaultSchema:()=>Q,del:()=>E,fetch:()=>A,prune:()=>S});class r{constructor(e,t,s){this.eventTarget=e,this.eventName=t,this.eventOptions=s,this.unorderedBindings=new Set}connect(){this.eventTarget.addEventListener(this.eventName,this,this.eventOptions)}disconnect(){this.eventTarget.removeEventListener(this.eventName,this,this.eventOptions)}bindingConnected(e){this.unorderedBindings.add(e)}bindingDisconnected(e){this.unorderedBindings.delete(e)}handleEvent(e){const t=function(e){if("immediatePropagationStopped"in e)return e;{const{stopImmediatePropagation:t}=e;return Object.assign(e,{immediatePropagationStopped:!1,stopImmediatePropagation(){this.immediatePropagationStopped=!0,t.call(this)}})}}(e);for(const s of this.bindings){if(t.immediatePropagationStopped)break;s.handleEvent(t)}}hasBindings(){return this.unorderedBindings.size>0}get bindings(){return Array.from(this.unorderedBindings).sort(((e,t)=>{const s=e.index,r=t.index;return s<r?-1:s>r?1:0}))}}class n{constructor(e){this.application=e,this.eventListenerMaps=new Map,this.started=!1}start(){this.started||(this.started=!0,this.eventListeners.forEach((e=>e.connect())))}stop(){this.started&&(this.started=!1,this.eventListeners.forEach((e=>e.disconnect())))}get eventListeners(){return Array.from(this.eventListenerMaps.values()).reduce(((e,t)=>e.concat(Array.from(t.values()))),[])}bindingConnected(e){this.fetchEventListenerForBinding(e).bindingConnected(e)}bindingDisconnected(e,t=!1){this.fetchEventListenerForBinding(e).bindingDisconnected(e),t&&this.clearEventListenersForBinding(e)}handleError(e,t,s={}){this.application.handleError(e,`Error ${t}`,s)}clearEventListenersForBinding(e){const t=this.fetchEventListenerForBinding(e);t.hasBindings()||(t.disconnect(),this.removeMappedEventListenerFor(e))}removeMappedEventListenerFor(e){const{eventTarget:t,eventName:s,eventOptions:r}=e,n=this.fetchEventListenerMapForEventTarget(t),o=this.cacheKey(s,r);n.delete(o),0==n.size&&this.eventListenerMaps.delete(t)}fetchEventListenerForBinding(e){const{eventTarget:t,eventName:s,eventOptions:r}=e;return this.fetchEventListener(t,s,r)}fetchEventListener(e,t,s){const r=this.fetchEventListenerMapForEventTarget(e),n=this.cacheKey(t,s);let o=r.get(n);return o||(o=this.createEventListener(e,t,s),r.set(n,o)),o}createEventListener(e,t,s){const n=new r(e,t,s);return this.started&&n.connect(),n}fetchEventListenerMapForEventTarget(e){let t=this.eventListenerMaps.get(e);return t||(t=new Map,this.eventListenerMaps.set(e,t)),t}cacheKey(e,t){const s=[e];return Object.keys(t).sort().forEach((e=>{s.push(`${t[e]?"":"!"}${e}`)})),s.join(":")}}const o={stop:({event:e,value:t})=>(t&&e.stopPropagation(),!0),prevent:({event:e,value:t})=>(t&&e.preventDefault(),!0),self:({event:e,value:t,element:s})=>!t||s===e.target},i=/^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;function l(e){return"window"==e?window:"document"==e?document:void 0}function a(e){return e.replace(/(?:[_-])([a-z0-9])/g,((e,t)=>t.toUpperCase()))}function c(e){return a(e.replace(/--/g,"-").replace(/__/g,"_"))}function u(e){return e.charAt(0).toUpperCase()+e.slice(1)}function d(e){return e.replace(/([A-Z])/g,((e,t)=>`-${t.toLowerCase()}`))}function h(e){return null!=e}function m(e,t){return Object.prototype.hasOwnProperty.call(e,t)}const f=["meta","ctrl","alt","shift"];class p{constructor(e,t,s,r){this.element=e,this.index=t,this.eventTarget=s.eventTarget||e,this.eventName=s.eventName||function(e){const t=e.tagName.toLowerCase();if(t in g)return g[t](e)}(e)||b("missing event name"),this.eventOptions=s.eventOptions||{},this.identifier=s.identifier||b("missing identifier"),this.methodName=s.methodName||b("missing method name"),this.keyFilter=s.keyFilter||"",this.schema=r}static forToken(e,t){return new this(e.element,e.index,function(e){const t=e.trim().match(i)||[];let s=t[2],r=t[3];return r&&!["keydown","keyup","keypress"].includes(s)&&(s+=`.${r}`,r=""),{eventTarget:l(t[4]),eventName:s,eventOptions:t[7]?(n=t[7],n.split(":").reduce(((e,t)=>Object.assign(e,{[t.replace(/^!/,"")]:!/^!/.test(t)})),{})):{},identifier:t[5],methodName:t[6],keyFilter:t[1]||r};var n}(e.content),t)}toString(){const e=this.keyFilter?`.${this.keyFilter}`:"",t=this.eventTargetName?`@${this.eventTargetName}`:"";return`${this.eventName}${e}${t}->${this.identifier}#${this.methodName}`}shouldIgnoreKeyboardEvent(e){if(!this.keyFilter)return!1;const t=this.keyFilter.split("+");if(this.keyFilterDissatisfied(e,t))return!0;const s=t.filter((e=>!f.includes(e)))[0];return!!s&&(m(this.keyMappings,s)||b(`contains unknown key filter: ${this.keyFilter}`),this.keyMappings[s].toLowerCase()!==e.key.toLowerCase())}shouldIgnoreMouseEvent(e){if(!this.keyFilter)return!1;const t=[this.keyFilter];return!!this.keyFilterDissatisfied(e,t)}get params(){const e={},t=new RegExp(`^data-${this.identifier}-(.+)-param$`,"i");for(const{name:s,value:r}of Array.from(this.element.attributes)){const n=s.match(t),o=n&&n[1];o&&(e[a(o)]=y(r))}return e}get eventTargetName(){return(e=this.eventTarget)==window?"window":e==document?"document":void 0;var e}get keyMappings(){return this.schema.keyMappings}keyFilterDissatisfied(e,t){const[s,r,n,o]=f.map((e=>t.includes(e)));return e.metaKey!==s||e.ctrlKey!==r||e.altKey!==n||e.shiftKey!==o}}const g={a:()=>"click",button:()=>"click",form:()=>"submit",details:()=>"toggle",input:e=>"submit"==e.getAttribute("type")?"click":"input",select:()=>"change",textarea:()=>"input"};function b(e){throw new Error(e)}function y(e){try{return JSON.parse(e)}catch(t){return e}}class v{constructor(e,t){this.context=e,this.action=t}get index(){return this.action.index}get eventTarget(){return this.action.eventTarget}get eventOptions(){return this.action.eventOptions}get identifier(){return this.context.identifier}handleEvent(e){const t=this.prepareActionEvent(e);this.willBeInvokedByEvent(e)&&this.applyEventModifiers(t)&&this.invokeWithEvent(t)}get eventName(){return this.action.eventName}get method(){const e=this.controller[this.methodName];if("function"==typeof e)return e;throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`)}applyEventModifiers(e){const{element:t}=this.action,{actionDescriptorFilters:s}=this.context.application,{controller:r}=this.context;let n=!0;for(const[o,i]of Object.entries(this.eventOptions))if(o in s){const l=s[o];n=n&&l({name:o,value:i,event:e,element:t,controller:r})}return n}prepareActionEvent(e){return Object.assign(e,{params:this.action.params})}invokeWithEvent(e){const{target:t,currentTarget:s}=e;try{this.method.call(this.controller,e),this.context.logDebugActivity(this.methodName,{event:e,target:t,currentTarget:s,action:this.methodName})}catch(b){const{identifier:s,controller:r,element:n,index:o}=this,i={identifier:s,controller:r,element:n,index:o,event:e};this.context.handleError(b,`invoking action "${this.action}"`,i)}}willBeInvokedByEvent(e){const t=e.target;return!(e instanceof KeyboardEvent&&this.action.shouldIgnoreKeyboardEvent(e))&&(!(e instanceof MouseEvent&&this.action.shouldIgnoreMouseEvent(e))&&(this.element===t||(t instanceof Element&&this.element.contains(t)?this.scope.containsElement(t):this.scope.containsElement(this.action.element))))}get controller(){return this.context.controller}get methodName(){return this.action.methodName}get element(){return this.scope.element}get scope(){return this.context.scope}}class j{constructor(e,t){this.mutationObserverInit={attributes:!0,childList:!0,subtree:!0},this.element=e,this.started=!1,this.delegate=t,this.elements=new Set,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,this.mutationObserverInit),this.refresh())}pause(e){this.started&&(this.mutationObserver.disconnect(),this.started=!1),e(),this.started||(this.mutationObserver.observe(this.element,this.mutationObserverInit),this.started=!0)}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started){const e=new Set(this.matchElementsInTree());for(const t of Array.from(this.elements))e.has(t)||this.removeElement(t);for(const t of Array.from(e))this.addElement(t)}}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){"attributes"==e.type?this.processAttributeChange(e.target,e.attributeName):"childList"==e.type&&(this.processRemovedNodes(e.removedNodes),this.processAddedNodes(e.addedNodes))}processAttributeChange(e,t){this.elements.has(e)?this.delegate.elementAttributeChanged&&this.matchElement(e)?this.delegate.elementAttributeChanged(e,t):this.removeElement(e):this.matchElement(e)&&this.addElement(e)}processRemovedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.processTree(e,this.removeElement)}}processAddedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.elementIsActive(e)&&this.processTree(e,this.addElement)}}matchElement(e){return this.delegate.matchElement(e)}matchElementsInTree(e=this.element){return this.delegate.matchElementsInTree(e)}processTree(e,t){for(const s of this.matchElementsInTree(e))t.call(this,s)}elementFromNode(e){if(e.nodeType==Node.ELEMENT_NODE)return e}elementIsActive(e){return e.isConnected==this.element.isConnected&&this.element.contains(e)}addElement(e){this.elements.has(e)||this.elementIsActive(e)&&(this.elements.add(e),this.delegate.elementMatched&&this.delegate.elementMatched(e))}removeElement(e){this.elements.has(e)&&(this.elements.delete(e),this.delegate.elementUnmatched&&this.delegate.elementUnmatched(e))}}class _{constructor(e,t,s){this.attributeName=t,this.delegate=s,this.elementObserver=new j(e,this)}get element(){return this.elementObserver.element}get selector(){return`[${this.attributeName}]`}start(){this.elementObserver.start()}pause(e){this.elementObserver.pause(e)}stop(){this.elementObserver.stop()}refresh(){this.elementObserver.refresh()}get started(){return this.elementObserver.started}matchElement(e){return e.hasAttribute(this.attributeName)}matchElementsInTree(e){const t=this.matchElement(e)?[e]:[],s=Array.from(e.querySelectorAll(this.selector));return t.concat(s)}elementMatched(e){this.delegate.elementMatchedAttribute&&this.delegate.elementMatchedAttribute(e,this.attributeName)}elementUnmatched(e){this.delegate.elementUnmatchedAttribute&&this.delegate.elementUnmatchedAttribute(e,this.attributeName)}elementAttributeChanged(e,t){this.delegate.elementAttributeValueChanged&&this.attributeName==t&&this.delegate.elementAttributeValueChanged(e,t)}}function w(e,t,s){A(e,t).add(s)}function E(e,t,s){A(e,t).delete(s),S(e,t)}function A(e,t){let s=e.get(t);return s||(s=new Set,e.set(t,s)),s}function S(e,t){const s=e.get(t);null!=s&&0==s.size&&e.delete(t)}class k{constructor(){this.valuesByKey=new Map}get keys(){return Array.from(this.valuesByKey.keys())}get values(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e.concat(Array.from(t))),[])}get size(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e+t.size),0)}add(e,t){w(this.valuesByKey,e,t)}delete(e,t){E(this.valuesByKey,e,t)}has(e,t){const s=this.valuesByKey.get(e);return null!=s&&s.has(t)}hasKey(e){return this.valuesByKey.has(e)}hasValue(e){return Array.from(this.valuesByKey.values()).some((t=>t.has(e)))}getValuesForKey(e){const t=this.valuesByKey.get(e);return t?Array.from(t):[]}getKeysForValue(e){return Array.from(this.valuesByKey).filter((([t,s])=>s.has(e))).map((([e,t])=>e))}}class x extends k{constructor(){super(),this.keysByValue=new Map}get values(){return Array.from(this.keysByValue.keys())}add(e,t){super.add(e,t),w(this.keysByValue,t,e)}delete(e,t){super.delete(e,t),E(this.keysByValue,t,e)}hasValue(e){return this.keysByValue.has(e)}getKeysForValue(e){const t=this.keysByValue.get(e);return t?Array.from(t):[]}}class O{constructor(e,t,s,r){this._selector=t,this.details=r,this.elementObserver=new j(e,this),this.delegate=s,this.matchesByElement=new k}get started(){return this.elementObserver.started}get selector(){return this._selector}set selector(e){this._selector=e,this.refresh()}start(){this.elementObserver.start()}pause(e){this.elementObserver.pause(e)}stop(){this.elementObserver.stop()}refresh(){this.elementObserver.refresh()}get element(){return this.elementObserver.element}matchElement(e){const{selector:t}=this;if(t){const s=e.matches(t);return this.delegate.selectorMatchElement?s&&this.delegate.selectorMatchElement(e,this.details):s}return!1}matchElementsInTree(e){const{selector:t}=this;if(t){const s=this.matchElement(e)?[e]:[],r=Array.from(e.querySelectorAll(t)).filter((e=>this.matchElement(e)));return s.concat(r)}return[]}elementMatched(e){const{selector:t}=this;t&&this.selectorMatched(e,t)}elementUnmatched(e){const t=this.matchesByElement.getKeysForValue(e);for(const s of t)this.selectorUnmatched(e,s)}elementAttributeChanged(e,t){const{selector:s}=this;if(s){const t=this.matchElement(e),r=this.matchesByElement.has(s,e);t&&!r?this.selectorMatched(e,s):!t&&r&&this.selectorUnmatched(e,s)}}selectorMatched(e,t){this.delegate.selectorMatched(e,t,this.details),this.matchesByElement.add(t,e)}selectorUnmatched(e,t){this.delegate.selectorUnmatched(e,t,this.details),this.matchesByElement.delete(t,e)}}class N{constructor(e,t){this.element=e,this.delegate=t,this.started=!1,this.stringMap=new Map,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,{attributes:!0,attributeOldValue:!0}),this.refresh())}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started)for(const e of this.knownAttributeNames)this.refreshAttribute(e,null)}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){const t=e.attributeName;t&&this.refreshAttribute(t,e.oldValue)}refreshAttribute(e,t){const s=this.delegate.getStringMapKeyForAttribute(e);if(null!=s){this.stringMap.has(e)||this.stringMapKeyAdded(s,e);const r=this.element.getAttribute(e);if(this.stringMap.get(e)!=r&&this.stringMapValueChanged(r,s,t),null==r){const t=this.stringMap.get(e);this.stringMap.delete(e),t&&this.stringMapKeyRemoved(s,e,t)}else this.stringMap.set(e,r)}}stringMapKeyAdded(e,t){this.delegate.stringMapKeyAdded&&this.delegate.stringMapKeyAdded(e,t)}stringMapValueChanged(e,t,s){this.delegate.stringMapValueChanged&&this.delegate.stringMapValueChanged(e,t,s)}stringMapKeyRemoved(e,t,s){this.delegate.stringMapKeyRemoved&&this.delegate.stringMapKeyRemoved(e,t,s)}get knownAttributeNames(){return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)))}get currentAttributeNames(){return Array.from(this.element.attributes).map((e=>e.name))}get recordedAttributeNames(){return Array.from(this.stringMap.keys())}}class q{constructor(e,t,s){this.attributeObserver=new _(e,t,this),this.delegate=s,this.tokensByElement=new k}get started(){return this.attributeObserver.started}start(){this.attributeObserver.start()}pause(e){this.attributeObserver.pause(e)}stop(){this.attributeObserver.stop()}refresh(){this.attributeObserver.refresh()}get element(){return this.attributeObserver.element}get attributeName(){return this.attributeObserver.attributeName}elementMatchedAttribute(e){this.tokensMatched(this.readTokensForElement(e))}elementAttributeValueChanged(e){const[t,s]=this.refreshTokensForElement(e);this.tokensUnmatched(t),this.tokensMatched(s)}elementUnmatchedAttribute(e){this.tokensUnmatched(this.tokensByElement.getValuesForKey(e))}tokensMatched(e){e.forEach((e=>this.tokenMatched(e)))}tokensUnmatched(e){e.forEach((e=>this.tokenUnmatched(e)))}tokenMatched(e){this.delegate.tokenMatched(e),this.tokensByElement.add(e.element,e)}tokenUnmatched(e){this.delegate.tokenUnmatched(e),this.tokensByElement.delete(e.element,e)}refreshTokensForElement(e){const t=this.tokensByElement.getValuesForKey(e),s=this.readTokensForElement(e),r=function(e,t){const s=Math.max(e.length,t.length);return Array.from({length:s},((s,r)=>[e[r],t[r]]))}(t,s).findIndex((([e,t])=>{return r=t,!((s=e)&&r&&s.index==r.index&&s.content==r.content);var s,r}));return-1==r?[[],[]]:[t.slice(r),s.slice(r)]}readTokensForElement(e){const t=this.attributeName;return function(e,t,s){return e.trim().split(/\s+/).filter((e=>e.length)).map(((e,r)=>({element:t,attributeName:s,content:e,index:r})))}(e.getAttribute(t)||"",e,t)}}class T{constructor(e,t,s){this.tokenListObserver=new q(e,t,this),this.delegate=s,this.parseResultsByToken=new WeakMap,this.valuesByTokenByElement=new WeakMap}get started(){return this.tokenListObserver.started}start(){this.tokenListObserver.start()}stop(){this.tokenListObserver.stop()}refresh(){this.tokenListObserver.refresh()}get element(){return this.tokenListObserver.element}get attributeName(){return this.tokenListObserver.attributeName}tokenMatched(e){const{element:t}=e,{value:s}=this.fetchParseResultForToken(e);s&&(this.fetchValuesByTokenForElement(t).set(e,s),this.delegate.elementMatchedValue(t,s))}tokenUnmatched(e){const{element:t}=e,{value:s}=this.fetchParseResultForToken(e);s&&(this.fetchValuesByTokenForElement(t).delete(e),this.delegate.elementUnmatchedValue(t,s))}fetchParseResultForToken(e){let t=this.parseResultsByToken.get(e);return t||(t=this.parseToken(e),this.parseResultsByToken.set(e,t)),t}fetchValuesByTokenForElement(e){let t=this.valuesByTokenByElement.get(e);return t||(t=new Map,this.valuesByTokenByElement.set(e,t)),t}parseToken(e){try{return{value:this.delegate.parseValueForToken(e)}}catch(b){return{error:b}}}}class L{constructor(e,t){this.context=e,this.delegate=t,this.bindingsByAction=new Map}start(){this.valueListObserver||(this.valueListObserver=new T(this.element,this.actionAttribute,this),this.valueListObserver.start())}stop(){this.valueListObserver&&(this.valueListObserver.stop(),delete this.valueListObserver,this.disconnectAllActions())}get element(){return this.context.element}get identifier(){return this.context.identifier}get actionAttribute(){return this.schema.actionAttribute}get schema(){return this.context.schema}get bindings(){return Array.from(this.bindingsByAction.values())}connectAction(e){const t=new v(this.context,e);this.bindingsByAction.set(e,t),this.delegate.bindingConnected(t)}disconnectAction(e){const t=this.bindingsByAction.get(e);t&&(this.bindingsByAction.delete(e),this.delegate.bindingDisconnected(t))}disconnectAllActions(){this.bindings.forEach((e=>this.delegate.bindingDisconnected(e,!0))),this.bindingsByAction.clear()}parseValueForToken(e){const t=p.forToken(e,this.schema);if(t.identifier==this.identifier)return t}elementMatchedValue(e,t){this.connectAction(t)}elementUnmatchedValue(e,t){this.disconnectAction(t)}}class C{constructor(e,t){this.context=e,this.receiver=t,this.stringMapObserver=new N(this.element,this),this.valueDescriptorMap=this.controller.valueDescriptorMap}start(){this.stringMapObserver.start(),this.invokeChangedCallbacksForDefaultValues()}stop(){this.stringMapObserver.stop()}get element(){return this.context.element}get controller(){return this.context.controller}getStringMapKeyForAttribute(e){if(e in this.valueDescriptorMap)return this.valueDescriptorMap[e].name}stringMapKeyAdded(e,t){const s=this.valueDescriptorMap[t];this.hasValue(e)||this.invokeChangedCallback(e,s.writer(this.receiver[e]),s.writer(s.defaultValue))}stringMapValueChanged(e,t,s){const r=this.valueDescriptorNameMap[t];null!==e&&(null===s&&(s=r.writer(r.defaultValue)),this.invokeChangedCallback(t,e,s))}stringMapKeyRemoved(e,t,s){const r=this.valueDescriptorNameMap[e];this.hasValue(e)?this.invokeChangedCallback(e,r.writer(this.receiver[e]),s):this.invokeChangedCallback(e,r.writer(r.defaultValue),s)}invokeChangedCallbacksForDefaultValues(){for(const{key:e,name:t,defaultValue:s,writer:r}of this.valueDescriptors)null==s||this.controller.data.has(e)||this.invokeChangedCallback(t,r(s),void 0)}invokeChangedCallback(e,t,s){const r=`${e}Changed`,n=this.receiver[r];if("function"==typeof n){const r=this.valueDescriptorNameMap[e];try{const e=r.reader(t);let o=s;s&&(o=r.reader(s)),n.call(this.receiver,e,o)}catch(b){throw b instanceof TypeError&&(b.message=`Stimulus Value "${this.context.identifier}.${r.name}" - ${b.message}`),b}}}get valueDescriptors(){const{valueDescriptorMap:e}=this;return Object.keys(e).map((t=>e[t]))}get valueDescriptorNameMap(){const e={};return Object.keys(this.valueDescriptorMap).forEach((t=>{const s=this.valueDescriptorMap[t];e[s.name]=s})),e}hasValue(e){const t=`has${u(this.valueDescriptorNameMap[e].name)}`;return this.receiver[t]}}class R{constructor(e,t){this.context=e,this.delegate=t,this.targetsByName=new k}start(){this.tokenListObserver||(this.tokenListObserver=new q(this.element,this.attributeName,this),this.tokenListObserver.start())}stop(){this.tokenListObserver&&(this.disconnectAllTargets(),this.tokenListObserver.stop(),delete this.tokenListObserver)}tokenMatched({element:e,content:t}){this.scope.containsElement(e)&&this.connectTarget(e,t)}tokenUnmatched({element:e,content:t}){this.disconnectTarget(e,t)}connectTarget(e,t){var s;this.targetsByName.has(t,e)||(this.targetsByName.add(t,e),null===(s=this.tokenListObserver)||void 0===s||s.pause((()=>this.delegate.targetConnected(e,t))))}disconnectTarget(e,t){var s;this.targetsByName.has(t,e)&&(this.targetsByName.delete(t,e),null===(s=this.tokenListObserver)||void 0===s||s.pause((()=>this.delegate.targetDisconnected(e,t))))}disconnectAllTargets(){for(const e of this.targetsByName.keys)for(const t of this.targetsByName.getValuesForKey(e))this.disconnectTarget(t,e)}get attributeName(){return`data-${this.context.identifier}-target`}get element(){return this.context.element}get scope(){return this.context.scope}}function M(e,t){const s=P(e);return Array.from(s.reduce(((e,s)=>(function(e,t){const s=e[t];return Array.isArray(s)?s:[]}(s,t).forEach((t=>e.add(t))),e)),new Set))}function I(e,t){return P(e).reduce(((e,s)=>(e.push(...function(e,t){const s=e[t];return s?Object.keys(s).map((e=>[e,s[e]])):[]}(s,t)),e)),[])}function P(e){const t=[];for(;e;)t.push(e),e=Object.getPrototypeOf(e);return t.reverse()}class B{constructor(e,t){this.started=!1,this.context=e,this.delegate=t,this.outletsByName=new k,this.outletElementsByName=new k,this.selectorObserverMap=new Map,this.attributeObserverMap=new Map}start(){this.started||(this.outletDefinitions.forEach((e=>{this.setupSelectorObserverForOutlet(e),this.setupAttributeObserverForOutlet(e)})),this.started=!0,this.dependentContexts.forEach((e=>e.refresh())))}refresh(){this.selectorObserverMap.forEach((e=>e.refresh())),this.attributeObserverMap.forEach((e=>e.refresh()))}stop(){this.started&&(this.started=!1,this.disconnectAllOutlets(),this.stopSelectorObservers(),this.stopAttributeObservers())}stopSelectorObservers(){this.selectorObserverMap.size>0&&(this.selectorObserverMap.forEach((e=>e.stop())),this.selectorObserverMap.clear())}stopAttributeObservers(){this.attributeObserverMap.size>0&&(this.attributeObserverMap.forEach((e=>e.stop())),this.attributeObserverMap.clear())}selectorMatched(e,t,{outletName:s}){const r=this.getOutlet(e,s);r&&this.connectOutlet(r,e,s)}selectorUnmatched(e,t,{outletName:s}){const r=this.getOutletFromMap(e,s);r&&this.disconnectOutlet(r,e,s)}selectorMatchElement(e,{outletName:t}){const s=this.selector(t),r=this.hasOutlet(e,t),n=e.matches(`[${this.schema.controllerAttribute}~=${t}]`);return!!s&&(r&&n&&e.matches(s))}elementMatchedAttribute(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}elementAttributeValueChanged(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}elementUnmatchedAttribute(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}connectOutlet(e,t,s){var r;this.outletElementsByName.has(s,t)||(this.outletsByName.add(s,e),this.outletElementsByName.add(s,t),null===(r=this.selectorObserverMap.get(s))||void 0===r||r.pause((()=>this.delegate.outletConnected(e,t,s))))}disconnectOutlet(e,t,s){var r;this.outletElementsByName.has(s,t)&&(this.outletsByName.delete(s,e),this.outletElementsByName.delete(s,t),null===(r=this.selectorObserverMap.get(s))||void 0===r||r.pause((()=>this.delegate.outletDisconnected(e,t,s))))}disconnectAllOutlets(){for(const e of this.outletElementsByName.keys)for(const t of this.outletElementsByName.getValuesForKey(e))for(const s of this.outletsByName.getValuesForKey(e))this.disconnectOutlet(s,t,e)}updateSelectorObserverForOutlet(e){const t=this.selectorObserverMap.get(e);t&&(t.selector=this.selector(e))}setupSelectorObserverForOutlet(e){const t=this.selector(e),s=new O(document.body,t,this,{outletName:e});this.selectorObserverMap.set(e,s),s.start()}setupAttributeObserverForOutlet(e){const t=this.attributeNameForOutletName(e),s=new _(this.scope.element,t,this);this.attributeObserverMap.set(e,s),s.start()}selector(e){return this.scope.outlets.getSelectorForOutletName(e)}attributeNameForOutletName(e){return this.scope.schema.outletAttributeForScope(this.identifier,e)}getOutletNameFromOutletAttributeName(e){return this.outletDefinitions.find((t=>this.attributeNameForOutletName(t)===e))}get outletDependencies(){const e=new k;return this.router.modules.forEach((t=>{M(t.definition.controllerConstructor,"outlets").forEach((s=>e.add(s,t.identifier)))})),e}get outletDefinitions(){return this.outletDependencies.getKeysForValue(this.identifier)}get dependentControllerIdentifiers(){return this.outletDependencies.getValuesForKey(this.identifier)}get dependentContexts(){const e=this.dependentControllerIdentifiers;return this.router.contexts.filter((t=>e.includes(t.identifier)))}hasOutlet(e,t){return!!this.getOutlet(e,t)||!!this.getOutletFromMap(e,t)}getOutlet(e,t){return this.application.getControllerForElementAndIdentifier(e,t)}getOutletFromMap(e,t){return this.outletsByName.getValuesForKey(t).find((t=>t.element===e))}get scope(){return this.context.scope}get schema(){return this.context.schema}get identifier(){return this.context.identifier}get application(){return this.context.application}get router(){return this.application.router}}class F{constructor(e,t){this.logDebugActivity=(e,t={})=>{const{identifier:s,controller:r,element:n}=this;t=Object.assign({identifier:s,controller:r,element:n},t),this.application.logDebugActivity(this.identifier,e,t)},this.module=e,this.scope=t,this.controller=new e.controllerConstructor(this),this.bindingObserver=new L(this,this.dispatcher),this.valueObserver=new C(this,this.controller),this.targetObserver=new R(this,this),this.outletObserver=new B(this,this);try{this.controller.initialize(),this.logDebugActivity("initialize")}catch(b){this.handleError(b,"initializing controller")}}connect(){this.bindingObserver.start(),this.valueObserver.start(),this.targetObserver.start(),this.outletObserver.start();try{this.controller.connect(),this.logDebugActivity("connect")}catch(b){this.handleError(b,"connecting controller")}}refresh(){this.outletObserver.refresh()}disconnect(){try{this.controller.disconnect(),this.logDebugActivity("disconnect")}catch(b){this.handleError(b,"disconnecting controller")}this.outletObserver.stop(),this.targetObserver.stop(),this.valueObserver.stop(),this.bindingObserver.stop()}get application(){return this.module.application}get identifier(){return this.module.identifier}get schema(){return this.application.schema}get dispatcher(){return this.application.dispatcher}get element(){return this.scope.element}get parentElement(){return this.element.parentElement}handleError(e,t,s={}){const{identifier:r,controller:n,element:o}=this;s=Object.assign({identifier:r,controller:n,element:o},s),this.application.handleError(e,`Error ${t}`,s)}targetConnected(e,t){this.invokeControllerMethod(`${t}TargetConnected`,e)}targetDisconnected(e,t){this.invokeControllerMethod(`${t}TargetDisconnected`,e)}outletConnected(e,t,s){this.invokeControllerMethod(`${c(s)}OutletConnected`,e,t)}outletDisconnected(e,t,s){this.invokeControllerMethod(`${c(s)}OutletDisconnected`,e,t)}invokeControllerMethod(e,...t){const s=this.controller;"function"==typeof s[e]&&s[e](...t)}}function D(e){return function(e,t){const s=U(e),r=function(e,t){return H(t).reduce(((s,r)=>{const n=function(e,t,s){const r=Object.getOwnPropertyDescriptor(e,s);if(!r||!("value"in r)){const e=Object.getOwnPropertyDescriptor(t,s).value;return r&&(e.get=r.get||e.get,e.set=r.set||e.set),e}}(e,t,r);return n&&Object.assign(s,{[r]:n}),s}),{})}(e.prototype,t);return Object.defineProperties(s.prototype,r),s}(e,function(e){const t=M(e,"blessings");return t.reduce(((t,s)=>{const r=s(e);for(const e in r){const s=t[e]||{};t[e]=Object.assign(s,r[e])}return t}),{})}(e))}const H="function"==typeof Object.getOwnPropertySymbols?e=>[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)]:Object.getOwnPropertyNames,U=(()=>{function e(e){function t(){return Reflect.construct(e,arguments,new.target)}return t.prototype=Object.create(e.prototype,{constructor:{value:t}}),Reflect.setPrototypeOf(t,e),t}try{return function(){const t=e((function(){this.a.call(this)}));t.prototype.a=function(){},new t}(),e}catch(b){return e=>class extends e{}}})();class V{constructor(e,t){this.application=e,this.definition=function(e){return{identifier:e.identifier,controllerConstructor:D(e.controllerConstructor)}}(t),this.contextsByScope=new WeakMap,this.connectedContexts=new Set}get identifier(){return this.definition.identifier}get controllerConstructor(){return this.definition.controllerConstructor}get contexts(){return Array.from(this.connectedContexts)}connectContextForScope(e){const t=this.fetchContextForScope(e);this.connectedContexts.add(t),t.connect()}disconnectContextForScope(e){const t=this.contextsByScope.get(e);t&&(this.connectedContexts.delete(t),t.disconnect())}fetchContextForScope(e){let t=this.contextsByScope.get(e);return t||(t=new F(this,e),this.contextsByScope.set(e,t)),t}}class ${constructor(e){this.scope=e}has(e){return this.data.has(this.getDataKey(e))}get(e){return this.getAll(e)[0]}getAll(e){const t=this.data.get(this.getDataKey(e))||"";return t.match(/[^\s]+/g)||[]}getAttributeName(e){return this.data.getAttributeNameForKey(this.getDataKey(e))}getDataKey(e){return`${e}-class`}get data(){return this.scope.data}}class z{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get(e){const t=this.getAttributeNameForKey(e);return this.element.getAttribute(t)}set(e,t){const s=this.getAttributeNameForKey(e);return this.element.setAttribute(s,t),this.get(e)}has(e){const t=this.getAttributeNameForKey(e);return this.element.hasAttribute(t)}delete(e){if(this.has(e)){const t=this.getAttributeNameForKey(e);return this.element.removeAttribute(t),!0}return!1}getAttributeNameForKey(e){return`data-${this.identifier}-${d(e)}`}}class K{constructor(e){this.warnedKeysByObject=new WeakMap,this.logger=e}warn(e,t,s){let r=this.warnedKeysByObject.get(e);r||(r=new Set,this.warnedKeysByObject.set(e,r)),r.has(t)||(r.add(t),this.logger.warn(s,e))}}function W(e,t){return`[${e}~="${t}"]`}class G{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get schema(){return this.scope.schema}has(e){return null!=this.find(e)}find(...e){return e.reduce(((e,t)=>e||this.findTarget(t)||this.findLegacyTarget(t)),void 0)}findAll(...e){return e.reduce(((e,t)=>[...e,...this.findAllTargets(t),...this.findAllLegacyTargets(t)]),[])}findTarget(e){const t=this.getSelectorForTargetName(e);return this.scope.findElement(t)}findAllTargets(e){const t=this.getSelectorForTargetName(e);return this.scope.findAllElements(t)}getSelectorForTargetName(e){return W(this.schema.targetAttributeForScope(this.identifier),e)}findLegacyTarget(e){const t=this.getLegacySelectorForTargetName(e);return this.deprecate(this.scope.findElement(t),e)}findAllLegacyTargets(e){const t=this.getLegacySelectorForTargetName(e);return this.scope.findAllElements(t).map((t=>this.deprecate(t,e)))}getLegacySelectorForTargetName(e){const t=`${this.identifier}.${e}`;return W(this.schema.targetAttribute,t)}deprecate(e,t){if(e){const{identifier:s}=this,r=this.schema.targetAttribute,n=this.schema.targetAttributeForScope(s);this.guide.warn(e,`target:${t}`,`Please replace ${r}="${s}.${t}" with ${n}="${t}". The ${r} attribute is deprecated and will be removed in a future version of Stimulus.`)}return e}get guide(){return this.scope.guide}}class Z{constructor(e,t){this.scope=e,this.controllerElement=t}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get schema(){return this.scope.schema}has(e){return null!=this.find(e)}find(...e){return e.reduce(((e,t)=>e||this.findOutlet(t)),void 0)}findAll(...e){return e.reduce(((e,t)=>[...e,...this.findAllOutlets(t)]),[])}getSelectorForOutletName(e){const t=this.schema.outletAttributeForScope(this.identifier,e);return this.controllerElement.getAttribute(t)}findOutlet(e){const t=this.getSelectorForOutletName(e);if(t)return this.findElement(t,e)}findAllOutlets(e){const t=this.getSelectorForOutletName(e);return t?this.findAllElements(t,e):[]}findElement(e,t){return this.scope.queryElements(e).filter((s=>this.matchesElement(s,e,t)))[0]}findAllElements(e,t){return this.scope.queryElements(e).filter((s=>this.matchesElement(s,e,t)))}matchesElement(e,t,s){const r=e.getAttribute(this.scope.schema.controllerAttribute)||"";return e.matches(t)&&r.split(" ").includes(s)}}class X{constructor(e,t,s,r){this.targets=new G(this),this.classes=new $(this),this.data=new z(this),this.containsElement=e=>e.closest(this.controllerSelector)===this.element,this.schema=e,this.element=t,this.identifier=s,this.guide=new K(r),this.outlets=new Z(this.documentScope,t)}findElement(e){return this.element.matches(e)?this.element:this.queryElements(e).find(this.containsElement)}findAllElements(e){return[...this.element.matches(e)?[this.element]:[],...this.queryElements(e).filter(this.containsElement)]}queryElements(e){return Array.from(this.element.querySelectorAll(e))}get controllerSelector(){return W(this.schema.controllerAttribute,this.identifier)}get isDocumentScope(){return this.element===document.documentElement}get documentScope(){return this.isDocumentScope?this:new X(this.schema,document.documentElement,this.identifier,this.guide.logger)}}class Y{constructor(e,t,s){this.element=e,this.schema=t,this.delegate=s,this.valueListObserver=new T(this.element,this.controllerAttribute,this),this.scopesByIdentifierByElement=new WeakMap,this.scopeReferenceCounts=new WeakMap}start(){this.valueListObserver.start()}stop(){this.valueListObserver.stop()}get controllerAttribute(){return this.schema.controllerAttribute}parseValueForToken(e){const{element:t,content:s}=e;return this.parseValueForElementAndIdentifier(t,s)}parseValueForElementAndIdentifier(e,t){const s=this.fetchScopesByIdentifierForElement(e);let r=s.get(t);return r||(r=this.delegate.createScopeForElementAndIdentifier(e,t),s.set(t,r)),r}elementMatchedValue(e,t){const s=(this.scopeReferenceCounts.get(t)||0)+1;this.scopeReferenceCounts.set(t,s),1==s&&this.delegate.scopeConnected(t)}elementUnmatchedValue(e,t){const s=this.scopeReferenceCounts.get(t);s&&(this.scopeReferenceCounts.set(t,s-1),1==s&&this.delegate.scopeDisconnected(t))}fetchScopesByIdentifierForElement(e){let t=this.scopesByIdentifierByElement.get(e);return t||(t=new Map,this.scopesByIdentifierByElement.set(e,t)),t}}class J{constructor(e){this.application=e,this.scopeObserver=new Y(this.element,this.schema,this),this.scopesByIdentifier=new k,this.modulesByIdentifier=new Map}get element(){return this.application.element}get schema(){return this.application.schema}get logger(){return this.application.logger}get controllerAttribute(){return this.schema.controllerAttribute}get modules(){return Array.from(this.modulesByIdentifier.values())}get contexts(){return this.modules.reduce(((e,t)=>e.concat(t.contexts)),[])}start(){this.scopeObserver.start()}stop(){this.scopeObserver.stop()}loadDefinition(e){this.unloadIdentifier(e.identifier);const t=new V(this.application,e);this.connectModule(t);const s=e.controllerConstructor.afterLoad;s&&s.call(e.controllerConstructor,e.identifier,this.application)}unloadIdentifier(e){const t=this.modulesByIdentifier.get(e);t&&this.disconnectModule(t)}getContextForElementAndIdentifier(e,t){const s=this.modulesByIdentifier.get(t);if(s)return s.contexts.find((t=>t.element==e))}proposeToConnectScopeForElementAndIdentifier(e,t){const s=this.scopeObserver.parseValueForElementAndIdentifier(e,t);s&&this.scopeObserver.elementMatchedValue(s.element,s)}handleError(e,t,s){this.application.handleError(e,t,s)}createScopeForElementAndIdentifier(e,t){return new X(this.schema,e,t,this.logger)}scopeConnected(e){this.scopesByIdentifier.add(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.connectContextForScope(e)}scopeDisconnected(e){this.scopesByIdentifier.delete(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.disconnectContextForScope(e)}connectModule(e){this.modulesByIdentifier.set(e.identifier,e);this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.connectContextForScope(t)))}disconnectModule(e){this.modulesByIdentifier.delete(e.identifier);this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.disconnectContextForScope(t)))}}const Q={controllerAttribute:"data-controller",actionAttribute:"data-action",targetAttribute:"data-target",targetAttributeForScope:e=>`data-${e}-target`,outletAttributeForScope:(e,t)=>`data-${e}-${t}-outlet`,keyMappings:Object.assign(Object.assign({enter:"Enter",tab:"Tab",esc:"Escape",space:" ",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",home:"Home",end:"End",page_up:"PageUp",page_down:"PageDown"},ee("abcdefghijklmnopqrstuvwxyz".split("").map((e=>[e,e])))),ee("0123456789".split("").map((e=>[e,e]))))};function ee(e){return e.reduce(((e,[t,s])=>Object.assign(Object.assign({},e),{[t]:s})),{})}class te{constructor(e=document.documentElement,t=Q){this.logger=console,this.debug=!1,this.logDebugActivity=(e,t,s={})=>{this.debug&&this.logFormattedMessage(e,t,s)},this.element=e,this.schema=t,this.dispatcher=new n(this),this.router=new J(this),this.actionDescriptorFilters=Object.assign({},o)}static start(e,t){const s=new this(e,t);return s.start(),s}async start(){await new Promise((e=>{"loading"==document.readyState?document.addEventListener("DOMContentLoaded",(()=>e())):e()})),this.logDebugActivity("application","starting"),this.dispatcher.start(),this.router.start(),this.logDebugActivity("application","start")}stop(){this.logDebugActivity("application","stopping"),this.dispatcher.stop(),this.router.stop(),this.logDebugActivity("application","stop")}register(e,t){this.load({identifier:e,controllerConstructor:t})}registerActionOption(e,t){this.actionDescriptorFilters[e]=t}load(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>{e.controllerConstructor.shouldLoad&&this.router.loadDefinition(e)}))}unload(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>this.router.unloadIdentifier(e)))}get controllers(){return this.router.contexts.map((e=>e.controller))}getControllerForElementAndIdentifier(e,t){const s=this.router.getContextForElementAndIdentifier(e,t);return s?s.controller:null}handleError(e,t,s){var r;this.logger.error("%s\n\n%o\n\n%o",t,e,s),null===(r=window.onerror)||void 0===r||r.call(window,t,"",0,0,e)}logFormattedMessage(e,t,s={}){s=Object.assign({application:this},s),this.logger.groupCollapsed(`${e} #${t}`),this.logger.log("details:",Object.assign({},s)),this.logger.groupEnd()}}function se(e,t,s){return e.application.getControllerForElementAndIdentifier(t,s)}function re(e,t,s){let r=se(e,t,s);return r||(e.application.router.proposeToConnectScopeForElementAndIdentifier(t,s),r=se(e,t,s),r||void 0)}function ne([e,t],s){return function(e){const{token:t,typeDefinition:s}=e,r=`${d(t)}-value`,n=function(e){const{controller:t,token:s,typeDefinition:r}=e,n={controller:t,token:s,typeObject:r},o=function(e){const{controller:t,token:s,typeObject:r}=e,n=h(r.type),o=h(r.default),i=n&&o,l=n&&!o,a=!n&&o,c=oe(r.type),u=ie(e.typeObject.default);if(l)return c;if(a)return u;if(c!==u){throw new Error(`The specified default value for the Stimulus Value "${t?`${t}.${s}`:s}" must match the defined type "${c}". The provided default value of "${r.default}" is of type "${u}".`)}if(i)return c}(n),i=ie(r),l=oe(r),a=o||i||l;if(a)return a;const c=t?`${t}.${r}`:s;throw new Error(`Unknown value type "${c}" for "${s}" value`)}(e);return{type:n,key:r,name:a(r),get defaultValue(){return function(e){const t=oe(e);if(t)return le[t];const s=m(e,"default"),r=m(e,"type"),n=e;if(s)return n.default;if(r){const{type:e}=n,t=oe(e);if(t)return le[t]}return e}(s)},get hasCustomDefaultValue(){return void 0!==ie(s)},reader:ae[n],writer:ce[n]||ce.default}}({controller:s,token:e,typeDefinition:t})}function oe(e){switch(e){case Array:return"array";case Boolean:return"boolean";case Number:return"number";case Object:return"object";case String:return"string"}}function ie(e){switch(typeof e){case"boolean":return"boolean";case"number":return"number";case"string":return"string"}return Array.isArray(e)?"array":"[object Object]"===Object.prototype.toString.call(e)?"object":void 0}const le={get array(){return[]},boolean:!1,number:0,get object(){return{}},string:""},ae={array(e){const t=JSON.parse(e);if(!Array.isArray(t))throw new TypeError(`expected value of type "array" but instead got value "${e}" of type "${ie(t)}"`);return t},boolean:e=>!("0"==e||"false"==String(e).toLowerCase()),number:e=>Number(e.replace(/_/g,"")),object(e){const t=JSON.parse(e);if(null===t||"object"!=typeof t||Array.isArray(t))throw new TypeError(`expected value of type "object" but instead got value "${e}" of type "${ie(t)}"`);return t},string:e=>e},ce={default:function(e){return`${e}`},array:ue,object:ue};function ue(e){return JSON.stringify(e)}class de{constructor(e){this.context=e}static get shouldLoad(){return!0}static afterLoad(e,t){}get application(){return this.context.application}get scope(){return this.context.scope}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get targets(){return this.scope.targets}get outlets(){return this.scope.outlets}get classes(){return this.scope.classes}get data(){return this.scope.data}initialize(){}connect(){}disconnect(){}dispatch(e,{target:t=this.element,detail:s={},prefix:r=this.identifier,bubbles:n=!0,cancelable:o=!0}={}){const i=new CustomEvent(r?`${r}:${e}`:e,{detail:s,bubbles:n,cancelable:o});return t.dispatchEvent(i),i}}de.blessings=[function(e){return M(e,"classes").reduce(((e,t)=>{return Object.assign(e,(s=t,{[`${s}Class`]:{get(){const{classes:e}=this;if(e.has(s))return e.get(s);{const t=e.getAttributeName(s);throw new Error(`Missing attribute "${t}"`)}}},[`${s}Classes`]:{get(){return this.classes.getAll(s)}},[`has${u(s)}Class`]:{get(){return this.classes.has(s)}}}));var s}),{})},function(e){return M(e,"targets").reduce(((e,t)=>{return Object.assign(e,(s=t,{[`${s}Target`]:{get(){const e=this.targets.find(s);if(e)return e;throw new Error(`Missing target element "${s}" for "${this.identifier}" controller`)}},[`${s}Targets`]:{get(){return this.targets.findAll(s)}},[`has${u(s)}Target`]:{get(){return this.targets.has(s)}}}));var s}),{})},function(e){const t=I(e,"values"),s={valueDescriptorMap:{get(){return t.reduce(((e,t)=>{const s=ne(t,this.identifier),r=this.data.getAttributeNameForKey(s.key);return Object.assign(e,{[r]:s})}),{})}}};return t.reduce(((e,t)=>Object.assign(e,function(e,t){const s=ne(e,t),{key:r,name:n,reader:o,writer:i}=s;return{[n]:{get(){const e=this.data.get(r);return null!==e?o(e):s.defaultValue},set(e){void 0===e?this.data.delete(r):this.data.set(r,i(e))}},[`has${u(n)}`]:{get(){return this.data.has(r)||s.hasCustomDefaultValue}}}}(t))),s)},function(e){return M(e,"outlets").reduce(((e,t)=>Object.assign(e,function(e){const t=c(e);return{[`${t}Outlet`]:{get(){const t=this.outlets.find(e),s=this.outlets.getSelectorForOutletName(e);if(t){const s=re(this,t,e);if(s)return s;throw new Error(`The provided outlet element is missing an outlet controller "${e}" instance for host controller "${this.identifier}"`)}throw new Error(`Missing outlet element "${e}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${s}".`)}},[`${t}Outlets`]:{get(){const t=this.outlets.findAll(e);return t.length>0?t.map((t=>{const s=re(this,t,e);if(s)return s})).filter((e=>e)):[]}},[`${t}OutletElement`]:{get(){const t=this.outlets.find(e),s=this.outlets.getSelectorForOutletName(e);if(t)return t;throw new Error(`Missing outlet element "${e}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${s}".`)}},[`${t}OutletElements`]:{get(){return this.outlets.findAll(e)}},[`has${u(t)}Outlet`]:{get(){return this.outlets.has(e)}}}}(t))),{})}],de.targets=[],de.outlets=[],de.values={}},"./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{FetchEnctype:()=>V,FetchMethod:()=>H,FetchRequest:()=>$,FetchResponse:()=>p,FrameElement:()=>i,FrameLoadingStyle:()=>o,FrameRenderer:()=>de,PageRenderer:()=>st,PageSnapshot:()=>ge,StreamActions:()=>xt,StreamElement:()=>Ot,StreamSourceElement:()=>Nt,cache:()=>dt,clearCache:()=>vt,connectStreamSource:()=>gt,disconnectStreamSource:()=>bt,fetch:()=>F,fetchEnctypeFromString:()=>U,fetchMethodFromString:()=>D,isSafe:()=>z,navigator:()=>ht,registerAdapter:()=>ft,renderStreamMessage:()=>yt,session:()=>ut,setConfirmMethod:()=>_t,setFormMode:()=>wt,setProgressBarDelay:()=>jt,start:()=>mt,visit:()=>pt}),function(e){function t(e,t,s){throw new e("Failed to execute 'requestSubmit' on 'HTMLFormElement': "+t+".",s)}"function"!=typeof e.requestSubmit&&(e.requestSubmit=function(e){e?(!function(e,s){e instanceof HTMLElement||t(TypeError,"parameter 1 is not of type 'HTMLElement'"),"submit"==e.type||t(TypeError,"The specified element is not a submit button"),e.form==s||t(DOMException,"The specified element is not owned by this form element","NotFoundError")}(e,this),e.click()):((e=document.createElement("input")).type="submit",e.hidden=!0,this.appendChild(e),e.click(),this.removeChild(e))})}(HTMLFormElement.prototype);const r=new WeakMap;function n(e){const t=function(e){const t=e instanceof Element?e:e instanceof Node?e.parentElement:null,s=t?t.closest("input, button"):null;return"submit"==s?.type?s:null}(e.target);t&&t.form&&r.set(t.form,t)}!function(){if("submitter"in Event.prototype)return;let e=window.Event.prototype;if("SubmitEvent"in window){const t=window.SubmitEvent.prototype;if(!/Apple Computer/.test(navigator.vendor)||"submitter"in t)return;e=t}addEventListener("click",n,!0),Object.defineProperty(e,"submitter",{get(){if("submit"==this.type&&this.target instanceof HTMLFormElement)return r.get(this.target)}})}();const o={eager:"eager",lazy:"lazy"};class i extends HTMLElement{static delegateConstructor=void 0;loaded=Promise.resolve();static get observedAttributes(){return["disabled","loading","src"]}constructor(){super(),this.delegate=new i.delegateConstructor(this)}connectedCallback(){this.delegate.connect()}disconnectedCallback(){this.delegate.disconnect()}reload(){return this.delegate.sourceURLReloaded()}attributeChangedCallback(e){"loading"==e?this.delegate.loadingStyleChanged():"src"==e?this.delegate.sourceURLChanged():"disabled"==e&&this.delegate.disabledChanged()}get src(){return this.getAttribute("src")}set src(e){e?this.setAttribute("src",e):this.removeAttribute("src")}get refresh(){return this.getAttribute("refresh")}set refresh(e){e?this.setAttribute("refresh",e):this.removeAttribute("refresh")}get loading(){return function(e){if("lazy"===e.toLowerCase())return o.lazy;return o.eager}(this.getAttribute("loading")||"")}set loading(e){e?this.setAttribute("loading",e):this.removeAttribute("loading")}get disabled(){return this.hasAttribute("disabled")}set disabled(e){e?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get autoscroll(){return this.hasAttribute("autoscroll")}set autoscroll(e){e?this.setAttribute("autoscroll",""):this.removeAttribute("autoscroll")}get complete(){return!this.delegate.isLoading}get isActive(){return this.ownerDocument===document&&!this.isPreview}get isPreview(){return this.ownerDocument?.documentElement?.hasAttribute("data-turbo-preview")}}function l(e){return new URL(e.toString(),document.baseURI)}function a(e){let t;return e.hash?e.hash.slice(1):(t=e.href.match(/#(.*)$/))?t[1]:void 0}function c(e,t){return l(t?.getAttribute("formaction")||e.getAttribute("action")||e.action)}function u(e){return(function(e){return function(e){return e.pathname.split("/").slice(1)}(e).slice(-1)[0]}(e).match(/\.[^.]*$/)||[])[0]||""}function d(e,t){const s=function(e){return t=e.origin+e.pathname,t.endsWith("/")?t:t+"/";var t}(t);return e.href===l(s).href||e.href.startsWith(s)}function h(e,t){return d(e,t)&&!!u(e).match(/^(?:|\.(?:htm|html|xhtml|php))$/)}function m(e){const t=a(e);return null!=t?e.href.slice(0,-(t.length+1)):e.href}function f(e){return m(e)}class p{constructor(e){this.response=e}get succeeded(){return this.response.ok}get failed(){return!this.succeeded}get clientError(){return this.statusCode>=400&&this.statusCode<=499}get serverError(){return this.statusCode>=500&&this.statusCode<=599}get redirected(){return this.response.redirected}get location(){return l(this.response.url)}get isHTML(){return this.contentType&&this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/)}get statusCode(){return this.response.status}get contentType(){return this.header("Content-Type")}get responseText(){return this.response.clone().text()}get responseHTML(){return this.isHTML?this.response.clone().text():Promise.resolve(void 0)}header(e){return this.response.headers.get(e)}}function g(e){if("false"==e.getAttribute("data-turbo-eval"))return e;{const t=document.createElement("script"),s=T("csp-nonce");return s&&(t.nonce=s),t.textContent=e.textContent,t.async=!1,function(e,t){for(const{name:s,value:r}of t.attributes)e.setAttribute(s,r)}(t,e),t}}function b(e,{target:t,cancelable:s,detail:r}={}){const n=new CustomEvent(e,{cancelable:s,bubbles:!0,composed:!0,detail:r});return t&&t.isConnected?t.dispatchEvent(n):document.documentElement.dispatchEvent(n),n}function y(){return"hidden"===document.visibilityState?j():v()}function v(){return new Promise((e=>requestAnimationFrame((()=>e()))))}function j(){return new Promise((e=>setTimeout((()=>e()),0)))}function _(e=""){return(new DOMParser).parseFromString(e,"text/html")}function w(e,...t){const s=function(e,t){return e.reduce(((e,s,r)=>e+s+(null==t[r]?"":t[r])),"")}(e,t).replace(/^\n/,"").split("\n"),r=s[0].match(/^\s+/),n=r?r[0].length:0;return s.map((e=>e.slice(n))).join("\n")}function E(){return Array.from({length:36}).map(((e,t)=>8==t||13==t||18==t||23==t?"-":14==t?"4":19==t?(Math.floor(4*Math.random())+8).toString(16):Math.floor(15*Math.random()).toString(16))).join("")}function A(e,...t){for(const s of t.map((t=>t?.getAttribute(e))))if("string"==typeof s)return s;return null}function S(...e){for(const t of e)"turbo-frame"==t.localName&&t.setAttribute("busy",""),t.setAttribute("aria-busy","true")}function k(...e){for(const t of e)"turbo-frame"==t.localName&&t.removeAttribute("busy"),t.removeAttribute("aria-busy")}function x(e,t=2e3){return new Promise((s=>{const r=()=>{e.removeEventListener("error",r),e.removeEventListener("load",r),s()};e.addEventListener("load",r,{once:!0}),e.addEventListener("error",r,{once:!0}),setTimeout(s,t)}))}function O(e){switch(e){case"replace":return history.replaceState;case"advance":case"restore":return history.pushState}}function N(...e){const t=A("data-turbo-action",...e);return function(e){return"advance"==e||"replace"==e||"restore"==e}(t)?t:null}function q(e){return document.querySelector(`meta[name="${e}"]`)}function T(e){const t=q(e);return t&&t.content}function L(e,t){if(e instanceof Element)return e.closest(t)||L(e.assignedSlot||e.getRootNode()?.host,t)}function C(e){return!!e&&null==e.closest("[inert], :disabled, [hidden], details:not([open]), dialog:not([open])")&&"function"==typeof e.focus}function R(e){return Array.from(e.querySelectorAll("[autofocus]")).find(C)}function M(e){return l(e.getAttribute("href")||"")}class I extends Set{constructor(e){super(),this.maxSize=e}add(e){if(this.size>=this.maxSize){const e=this.values().next().value;this.delete(e)}super.add(e)}}const P=new I(20),B=window.fetch;function F(e,t={}){const s=new Headers(t.headers||{}),r=E();return P.add(r),s.append("X-Turbo-Request-Id",r),B(e,{...t,headers:s})}function D(e){switch(e.toLowerCase()){case"get":return H.get;case"post":return H.post;case"put":return H.put;case"patch":return H.patch;case"delete":return H.delete}}const H={get:"get",post:"post",put:"put",patch:"patch",delete:"delete"};function U(e){switch(e.toLowerCase()){case V.multipart:return V.multipart;case V.plain:return V.plain;default:return V.urlEncoded}}const V={urlEncoded:"application/x-www-form-urlencoded",multipart:"multipart/form-data",plain:"text/plain"};class ${abortController=new AbortController;#e=e=>{};constructor(e,t,s,r=new URLSearchParams,n=null,o=V.urlEncoded){const[i,a]=K(l(s),t,r,o);this.delegate=e,this.url=i,this.target=n,this.fetchOptions={credentials:"same-origin",redirect:"follow",method:t,headers:{...this.defaultHeaders},body:a,signal:this.abortSignal,referrer:this.delegate.referrer?.href},this.enctype=o}get method(){return this.fetchOptions.method}set method(e){const t=this.isSafe?this.url.searchParams:this.fetchOptions.body||new FormData,s=D(e)||H.get;this.url.search="";const[r,n]=K(this.url,s,t,this.enctype);this.url=r,this.fetchOptions.body=n,this.fetchOptions.method=s}get headers(){return this.fetchOptions.headers}set headers(e){this.fetchOptions.headers=e}get body(){return this.isSafe?this.url.searchParams:this.fetchOptions.body}set body(e){this.fetchOptions.body=e}get location(){return this.url}get params(){return this.url.searchParams}get entries(){return this.body?Array.from(this.body.entries()):[]}cancel(){this.abortController.abort()}async perform(){const{fetchOptions:e}=this;this.delegate.prepareRequest(this);const t=await this.#t(e);try{this.delegate.requestStarted(this),t.detail.fetchRequest?this.response=t.detail.fetchRequest.response:this.response=F(this.url.href,e);const s=await this.response;return await this.receive(s)}catch(s){if("AbortError"!==s.name)throw this.#s(s)&&this.delegate.requestErrored(this,s),s}finally{this.delegate.requestFinished(this)}}async receive(e){const t=new p(e);return b("turbo:before-fetch-response",{cancelable:!0,detail:{fetchResponse:t},target:this.target}).defaultPrevented?this.delegate.requestPreventedHandlingResponse(this,t):t.succeeded?this.delegate.requestSucceededWithResponse(this,t):this.delegate.requestFailedWithResponse(this,t),t}get defaultHeaders(){return{Accept:"text/html, application/xhtml+xml"}}get isSafe(){return z(this.method)}get abortSignal(){return this.abortController.signal}acceptResponseType(e){this.headers.Accept=[e,this.headers.Accept].join(", ")}async#t(e){const t=new Promise((e=>this.#e=e)),s=b("turbo:before-fetch-request",{cancelable:!0,detail:{fetchOptions:e,url:this.url,resume:this.#e},target:this.target});return this.url=s.detail.url,s.defaultPrevented&&await t,s}#s(e){return!b("turbo:fetch-request-error",{target:this.target,cancelable:!0,detail:{request:this,error:e}}).defaultPrevented}}function z(e){return D(e)==H.get}function K(e,t,s,r){const n=Array.from(s).length>0?new URLSearchParams(W(s)):e.searchParams;return z(t)?[G(e,n),null]:r==V.urlEncoded?[e,n]:[e,s]}function W(e){const t=[];for(const[s,r]of e)r instanceof File||t.push([s,r]);return t}function G(e,t){const s=new URLSearchParams(W(t));return e.search=s.toString(),e}class Z{started=!1;constructor(e,t){this.delegate=e,this.element=t,this.intersectionObserver=new IntersectionObserver(this.intersect)}start(){this.started||(this.started=!0,this.intersectionObserver.observe(this.element))}stop(){this.started&&(this.started=!1,this.intersectionObserver.unobserve(this.element))}intersect=e=>{const t=e.slice(-1)[0];t?.isIntersecting&&this.delegate.elementAppearedInViewport(this.element)}}class X{static contentType="text/vnd.turbo-stream.html";static wrap(e){return"string"==typeof e?new this(function(e){const t=document.createElement("template");return t.innerHTML=e,t.content}(e)):e}constructor(e){this.fragment=function(e){for(const t of e.querySelectorAll("turbo-stream")){const e=document.importNode(t,!0);for(const t of e.templateElement.content.querySelectorAll("script"))t.replaceWith(g(t));t.replaceWith(e)}return e}(e)}}const Y=new class{#r=null;#n=null;get(e){if(this.#n&&this.#n.url===e&&this.#n.expire>Date.now())return this.#n.request}setLater(e,t,s){this.clear(),this.#r=setTimeout((()=>{t.perform(),this.set(e,t,s),this.#r=null}),100)}set(e,t,s){this.#n={url:e,request:t,expire:new Date((new Date).getTime()+s)}}clear(){this.#r&&clearTimeout(this.#r),this.#n=null}},J={initialized:"initialized",requesting:"requesting",waiting:"waiting",receiving:"receiving",stopping:"stopping",stopped:"stopped"};class Q{state=J.initialized;static confirmMethod(e,t,s){return Promise.resolve(confirm(e))}constructor(e,t,s,r=!1){const n=function(e,t){const s=t?.getAttribute("formmethod")||e.getAttribute("method")||"";return D(s.toLowerCase())||H.get}(t,s),o=function(e,t){const s=l(e);z(t)&&(s.search="");return s}(function(e,t){const s="string"==typeof e.action?e.action:null;return t?.hasAttribute("formaction")?t.getAttribute("formaction")||"":e.getAttribute("action")||s||""}(t,s),n),i=function(e,t){const s=new FormData(e),r=t?.getAttribute("name"),n=t?.getAttribute("value");r&&s.append(r,n||"");return s}(t,s),a=function(e,t){return U(t?.getAttribute("formenctype")||e.enctype)}(t,s);this.delegate=e,this.formElement=t,this.submitter=s,this.fetchRequest=new $(this,n,o,i,t,a),this.mustRedirect=r}get method(){return this.fetchRequest.method}set method(e){this.fetchRequest.method=e}get action(){return this.fetchRequest.url.toString()}set action(e){this.fetchRequest.url=l(e)}get body(){return this.fetchRequest.body}get enctype(){return this.fetchRequest.enctype}get isSafe(){return this.fetchRequest.isSafe}get location(){return this.fetchRequest.url}async start(){const{initialized:e,requesting:t}=J,s=A("data-turbo-confirm",this.submitter,this.formElement);if("string"==typeof s){if(!await Q.confirmMethod(s,this.formElement,this.submitter))return}if(this.state==e)return this.state=t,this.fetchRequest.perform()}stop(){const{stopping:e,stopped:t}=J;if(this.state!=e&&this.state!=t)return this.state=e,this.fetchRequest.cancel(),!0}prepareRequest(e){if(!e.isSafe){const t=function(e){if(null!=e){const t=(document.cookie?document.cookie.split("; "):[]).find((t=>t.startsWith(e)));if(t){const e=t.split("=").slice(1).join("=");return e?decodeURIComponent(e):void 0}}}(T("csrf-param"))||T("csrf-token");t&&(e.headers["X-CSRF-Token"]=t)}this.requestAcceptsTurboStreamResponse(e)&&e.acceptResponseType(X.contentType)}requestStarted(e){this.state=J.waiting,this.submitter?.setAttribute("disabled",""),this.setSubmitsWith(),S(this.formElement),b("turbo:submit-start",{target:this.formElement,detail:{formSubmission:this}}),this.delegate.formSubmissionStarted(this)}requestPreventedHandlingResponse(e,t){Y.clear(),this.result={success:t.succeeded,fetchResponse:t}}requestSucceededWithResponse(e,t){if(t.clientError||t.serverError)this.delegate.formSubmissionFailedWithResponse(this,t);else if(Y.clear(),this.requestMustRedirect(e)&&function(e){return 200==e.statusCode&&!e.redirected}(t)){const e=new Error("Form responses must redirect to another location");this.delegate.formSubmissionErrored(this,e)}else this.state=J.receiving,this.result={success:!0,fetchResponse:t},this.delegate.formSubmissionSucceededWithResponse(this,t)}requestFailedWithResponse(e,t){this.result={success:!1,fetchResponse:t},this.delegate.formSubmissionFailedWithResponse(this,t)}requestErrored(e,t){this.result={success:!1,error:t},this.delegate.formSubmissionErrored(this,t)}requestFinished(e){this.state=J.stopped,this.submitter?.removeAttribute("disabled"),this.resetSubmitterText(),k(this.formElement),b("turbo:submit-end",{target:this.formElement,detail:{formSubmission:this,...this.result}}),this.delegate.formSubmissionFinished(this)}setSubmitsWith(){if(this.submitter&&this.submitsWith)if(this.submitter.matches("button"))this.originalSubmitText=this.submitter.innerHTML,this.submitter.innerHTML=this.submitsWith;else if(this.submitter.matches("input")){const e=this.submitter;this.originalSubmitText=e.value,e.value=this.submitsWith}}resetSubmitterText(){if(this.submitter&&this.originalSubmitText)if(this.submitter.matches("button"))this.submitter.innerHTML=this.originalSubmitText;else if(this.submitter.matches("input")){this.submitter.value=this.originalSubmitText}}requestMustRedirect(e){return!e.isSafe&&this.mustRedirect}requestAcceptsTurboStreamResponse(e){return!e.isSafe||function(e,...t){return t.some((t=>t&&t.hasAttribute(e)))}("data-turbo-stream",this.submitter,this.formElement)}get submitsWith(){return this.submitter?.getAttribute("data-turbo-submits-with")}}class ee{constructor(e){this.element=e}get activeElement(){return this.element.ownerDocument.activeElement}get children(){return[...this.element.children]}hasAnchor(e){return null!=this.getElementForAnchor(e)}getElementForAnchor(e){return e?this.element.querySelector(`[id='${e}'], a[name='${e}']`):null}get isConnected(){return this.element.isConnected}get firstAutofocusableElement(){return R(this.element)}get permanentElements(){return se(this.element)}getPermanentElementById(e){return te(this.element,e)}getPermanentElementMapForSnapshot(e){const t={};for(const s of this.permanentElements){const{id:r}=s,n=e.getPermanentElementById(r);n&&(t[r]=[s,n])}return t}}function te(e,t){return e.querySelector(`#${t}[data-turbo-permanent]`)}function se(e){return e.querySelectorAll("[id][data-turbo-permanent]")}class re{started=!1;constructor(e,t){this.delegate=e,this.eventTarget=t}start(){this.started||(this.eventTarget.addEventListener("submit",this.submitCaptured,!0),this.started=!0)}stop(){this.started&&(this.eventTarget.removeEventListener("submit",this.submitCaptured,!0),this.started=!1)}submitCaptured=()=>{this.eventTarget.removeEventListener("submit",this.submitBubbled,!1),this.eventTarget.addEventListener("submit",this.submitBubbled,!1)};submitBubbled=e=>{if(!e.defaultPrevented){const t=e.target instanceof HTMLFormElement?e.target:void 0,s=e.submitter||void 0;t&&function(e,t){const s=t?.getAttribute("formmethod")||e.getAttribute("method");return"dialog"!=s}(t,s)&&function(e,t){if(t?.hasAttribute("formtarget")||e.hasAttribute("target")){const s=t?.getAttribute("formtarget")||e.target;for(const e of document.getElementsByName(s))if(e instanceof HTMLIFrameElement)return!1;return!0}return!0}(t,s)&&this.delegate.willSubmitForm(t,s)&&(e.preventDefault(),e.stopImmediatePropagation(),this.delegate.formSubmitted(t,s))}}}class ne{#o=e=>{};#i=e=>{};constructor(e,t){this.delegate=e,this.element=t}scrollToAnchor(e){const t=this.snapshot.getElementForAnchor(e);t?(this.scrollToElement(t),this.focusElement(t)):this.scrollToPosition({x:0,y:0})}scrollToAnchorFromLocation(e){this.scrollToAnchor(a(e))}scrollToElement(e){e.scrollIntoView()}focusElement(e){e instanceof HTMLElement&&(e.hasAttribute("tabindex")?e.focus():(e.setAttribute("tabindex","-1"),e.focus(),e.removeAttribute("tabindex")))}scrollToPosition({x:e,y:t}){this.scrollRoot.scrollTo(e,t)}scrollToTop(){this.scrollToPosition({x:0,y:0})}get scrollRoot(){return window}async render(e){const{isPreview:t,shouldRender:s,willRender:r,newSnapshot:n}=e,o=r;if(s)try{this.renderPromise=new Promise((e=>this.#o=e)),this.renderer=e,await this.prepareToRenderSnapshot(e);const s=new Promise((e=>this.#i=e)),r={resume:this.#i,render:this.renderer.renderElement,renderMethod:this.renderer.renderMethod};this.delegate.allowsImmediateRender(n,r)||await s,await this.renderSnapshot(e),this.delegate.viewRenderedSnapshot(n,t,this.renderer.renderMethod),this.delegate.preloadOnLoadLinksForView(this.element),this.finishRenderingSnapshot(e)}finally{delete this.renderer,this.#o(void 0),delete this.renderPromise}else o&&this.invalidate(e.reloadReason)}invalidate(e){this.delegate.viewInvalidated(e)}async prepareToRenderSnapshot(e){this.markAsPreview(e.isPreview),await e.prepareToRender()}markAsPreview(e){e?this.element.setAttribute("data-turbo-preview",""):this.element.removeAttribute("data-turbo-preview")}markVisitDirection(e){this.element.setAttribute("data-turbo-visit-direction",e)}unmarkVisitDirection(){this.element.removeAttribute("data-turbo-visit-direction")}async renderSnapshot(e){await e.render()}finishRenderingSnapshot(e){e.finishRendering()}}class oe extends ne{missing(){this.element.innerHTML='<strong class="turbo-frame-error">Content missing</strong>'}get snapshot(){return new ee(this.element)}}class ie{constructor(e,t){this.delegate=e,this.element=t}start(){this.element.addEventListener("click",this.clickBubbled),document.addEventListener("turbo:click",this.linkClicked),document.addEventListener("turbo:before-visit",this.willVisit)}stop(){this.element.removeEventListener("click",this.clickBubbled),document.removeEventListener("turbo:click",this.linkClicked),document.removeEventListener("turbo:before-visit",this.willVisit)}clickBubbled=e=>{this.respondsToEventTarget(e.target)?this.clickEvent=e:delete this.clickEvent};linkClicked=e=>{this.clickEvent&&this.respondsToEventTarget(e.target)&&e.target instanceof Element&&this.delegate.shouldInterceptLinkClick(e.target,e.detail.url,e.detail.originalEvent)&&(this.clickEvent.preventDefault(),e.preventDefault(),this.delegate.linkClickIntercepted(e.target,e.detail.url,e.detail.originalEvent)),delete this.clickEvent};willVisit=e=>{delete this.clickEvent};respondsToEventTarget(e){const t=e instanceof Element?e:e instanceof Node?e.parentElement:null;return t&&t.closest("turbo-frame, html")==this.element}}class le{started=!1;constructor(e,t){this.delegate=e,this.eventTarget=t}start(){this.started||(this.eventTarget.addEventListener("click",this.clickCaptured,!0),this.started=!0)}stop(){this.started&&(this.eventTarget.removeEventListener("click",this.clickCaptured,!0),this.started=!1)}clickCaptured=()=>{this.eventTarget.removeEventListener("click",this.clickBubbled,!1),this.eventTarget.addEventListener("click",this.clickBubbled,!1)};clickBubbled=e=>{if(e instanceof MouseEvent&&this.clickEventIsSignificant(e)){const t=function(e){return L(e,"a[href]:not([target^=_]):not([download])")}(e.composedPath&&e.composedPath()[0]||e.target);if(t&&function(e){if(e.hasAttribute("target"))for(const t of document.getElementsByName(e.target))if(t instanceof HTMLIFrameElement)return!1;return!0}(t)){const s=M(t);this.delegate.willFollowLinkToLocation(t,s,e)&&(e.preventDefault(),this.delegate.followedLinkToLocation(t,s))}}};clickEventIsSignificant(e){return!(e.target&&e.target.isContentEditable||e.defaultPrevented||e.which>1||e.altKey||e.ctrlKey||e.metaKey||e.shiftKey)}}class ae{constructor(e,t){this.delegate=e,this.linkInterceptor=new le(this,t)}start(){this.linkInterceptor.start()}stop(){this.linkInterceptor.stop()}canPrefetchRequestToLocation(e,t){return!1}prefetchAndCacheRequestToLocation(e,t){}willFollowLinkToLocation(e,t,s){return this.delegate.willSubmitFormLinkToLocation(e,t,s)&&(e.hasAttribute("data-turbo-method")||e.hasAttribute("data-turbo-stream"))}followedLinkToLocation(e,t){const s=document.createElement("form");for(const[a,c]of t.searchParams)s.append(Object.assign(document.createElement("input"),{type:"hidden",name:a,value:c}));const r=Object.assign(t,{search:""});s.setAttribute("data-turbo","true"),s.setAttribute("action",r.href),s.setAttribute("hidden","");const n=e.getAttribute("data-turbo-method");n&&s.setAttribute("method",n);const o=e.getAttribute("data-turbo-frame");o&&s.setAttribute("data-turbo-frame",o);const i=N(e);i&&s.setAttribute("data-turbo-action",i);const l=e.getAttribute("data-turbo-confirm");l&&s.setAttribute("data-turbo-confirm",l);e.hasAttribute("data-turbo-stream")&&s.setAttribute("data-turbo-stream",""),this.delegate.submittedFormLinkToLocation(e,t,s),document.body.appendChild(s),s.addEventListener("turbo:submit-end",(()=>s.remove()),{once:!0}),requestAnimationFrame((()=>s.requestSubmit()))}}class ce{static async preservingPermanentElements(e,t,s){const r=new this(e,t);r.enter(),await s(),r.leave()}constructor(e,t){this.delegate=e,this.permanentElementMap=t}enter(){for(const e in this.permanentElementMap){const[t,s]=this.permanentElementMap[e];this.delegate.enteringBardo(t,s),this.replaceNewPermanentElementWithPlaceholder(s)}}leave(){for(const e in this.permanentElementMap){const[t]=this.permanentElementMap[e];this.replaceCurrentPermanentElementWithClone(t),this.replacePlaceholderWithPermanentElement(t),this.delegate.leavingBardo(t)}}replaceNewPermanentElementWithPlaceholder(e){const t=function(e){const t=document.createElement("meta");return t.setAttribute("name","turbo-permanent-placeholder"),t.setAttribute("content",e.id),t}(e);e.replaceWith(t)}replaceCurrentPermanentElementWithClone(e){const t=e.cloneNode(!0);e.replaceWith(t)}replacePlaceholderWithPermanentElement(e){const t=this.getPlaceholderById(e.id);t?.replaceWith(e)}getPlaceholderById(e){return this.placeholders.find((t=>t.content==e))}get placeholders(){return[...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")]}}class ue{#l=null;constructor(e,t,s,r,n=!0){this.currentSnapshot=e,this.newSnapshot=t,this.isPreview=r,this.willRender=n,this.renderElement=s,this.promise=new Promise(((e,t)=>this.resolvingFunctions={resolve:e,reject:t}))}get shouldRender(){return!0}get reloadReason(){}prepareToRender(){}render(){}finishRendering(){this.resolvingFunctions&&(this.resolvingFunctions.resolve(),delete this.resolvingFunctions)}async preservingPermanentElements(e){await ce.preservingPermanentElements(this,this.permanentElementMap,e)}focusFirstAutofocusableElement(){const e=this.connectedSnapshot.firstAutofocusableElement;e&&e.focus()}enteringBardo(e){this.#l||e.contains(this.currentSnapshot.activeElement)&&(this.#l=this.currentSnapshot.activeElement)}leavingBardo(e){e.contains(this.#l)&&this.#l instanceof HTMLElement&&(this.#l.focus(),this.#l=null)}get connectedSnapshot(){return this.newSnapshot.isConnected?this.newSnapshot:this.currentSnapshot}get currentElement(){return this.currentSnapshot.element}get newElement(){return this.newSnapshot.element}get permanentElementMap(){return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot)}get renderMethod(){return"replace"}}class de extends ue{static renderElement(e,t){const s=document.createRange();s.selectNodeContents(e),s.deleteContents();const r=t,n=r.ownerDocument?.createRange();n&&(n.selectNodeContents(r),e.appendChild(n.extractContents()))}constructor(e,t,s,r,n,o=!0){super(t,s,r,n,o),this.delegate=e}get shouldRender(){return!0}async render(){await y(),this.preservingPermanentElements((()=>{this.loadFrameElement()})),this.scrollFrameIntoView(),await y(),this.focusFirstAutofocusableElement(),await y(),this.activateScriptElements()}loadFrameElement(){this.delegate.willRenderFrame(this.currentElement,this.newElement),this.renderElement(this.currentElement,this.newElement)}scrollFrameIntoView(){if(this.currentElement.autoscroll||this.newElement.autoscroll){const s=this.currentElement.firstElementChild,r=(e=this.currentElement.getAttribute("data-autoscroll-block"),t="end","end"==e||"start"==e||"center"==e||"nearest"==e?e:t),n=function(e,t){return"auto"==e||"smooth"==e?e:t}(this.currentElement.getAttribute("data-autoscroll-behavior"),"auto");if(s)return s.scrollIntoView({block:r,behavior:n}),!0}var e,t;return!1}activateScriptElements(){for(const e of this.newScriptElements){const t=g(e);e.replaceWith(t)}}get newScriptElements(){return this.currentElement.querySelectorAll("script")}}class he{static animationDuration=300;static get defaultCSS(){return w`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${he.animationDuration}ms ease-out,
          opacity ${he.animationDuration/2}ms ${he.animationDuration/2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `}hiding=!1;value=0;visible=!1;constructor(){this.stylesheetElement=this.createStylesheetElement(),this.progressElement=this.createProgressElement(),this.installStylesheetElement(),this.setValue(0)}show(){this.visible||(this.visible=!0,this.installProgressElement(),this.startTrickling())}hide(){this.visible&&!this.hiding&&(this.hiding=!0,this.fadeProgressElement((()=>{this.uninstallProgressElement(),this.stopTrickling(),this.visible=!1,this.hiding=!1})))}setValue(e){this.value=e,this.refresh()}installStylesheetElement(){document.head.insertBefore(this.stylesheetElement,document.head.firstChild)}installProgressElement(){this.progressElement.style.width="0",this.progressElement.style.opacity="1",document.documentElement.insertBefore(this.progressElement,document.body),this.refresh()}fadeProgressElement(e){this.progressElement.style.opacity="0",setTimeout(e,1.5*he.animationDuration)}uninstallProgressElement(){this.progressElement.parentNode&&document.documentElement.removeChild(this.progressElement)}startTrickling(){this.trickleInterval||(this.trickleInterval=window.setInterval(this.trickle,he.animationDuration))}stopTrickling(){window.clearInterval(this.trickleInterval),delete this.trickleInterval}trickle=()=>{this.setValue(this.value+Math.random()/100)};refresh(){requestAnimationFrame((()=>{this.progressElement.style.width=10+90*this.value+"%"}))}createStylesheetElement(){const e=document.createElement("style");return e.type="text/css",e.textContent=he.defaultCSS,this.cspNonce&&(e.nonce=this.cspNonce),e}createProgressElement(){const e=document.createElement("div");return e.className="turbo-progress-bar",e}get cspNonce(){return T("csp-nonce")}}class me extends ee{detailsByOuterHTML=this.children.filter((e=>!function(e){const t=e.localName;return"noscript"==t}(e))).map((e=>function(e){e.hasAttribute("nonce")&&e.setAttribute("nonce","");return e}(e))).reduce(((e,t)=>{const{outerHTML:s}=t,r=s in e?e[s]:{type:fe(t),tracked:pe(t),elements:[]};return{...e,[s]:{...r,elements:[...r.elements,t]}}}),{});get trackedElementSignature(){return Object.keys(this.detailsByOuterHTML).filter((e=>this.detailsByOuterHTML[e].tracked)).join("")}getScriptElementsNotInSnapshot(e){return this.getElementsMatchingTypeNotInSnapshot("script",e)}getStylesheetElementsNotInSnapshot(e){return this.getElementsMatchingTypeNotInSnapshot("stylesheet",e)}getElementsMatchingTypeNotInSnapshot(e,t){return Object.keys(this.detailsByOuterHTML).filter((e=>!(e in t.detailsByOuterHTML))).map((e=>this.detailsByOuterHTML[e])).filter((({type:t})=>t==e)).map((({elements:[e]})=>e))}get provisionalElements(){return Object.keys(this.detailsByOuterHTML).reduce(((e,t)=>{const{type:s,tracked:r,elements:n}=this.detailsByOuterHTML[t];return null!=s||r?n.length>1?[...e,...n.slice(1)]:e:[...e,...n]}),[])}getMetaValue(e){const t=this.findMetaElementByName(e);return t?t.getAttribute("content"):null}findMetaElementByName(e){return Object.keys(this.detailsByOuterHTML).reduce(((t,s)=>{const{elements:[r]}=this.detailsByOuterHTML[s];return function(e,t){const s=e.localName;return"meta"==s&&e.getAttribute("name")==t}(r,e)?r:t}),0)}}function fe(e){return function(e){const t=e.localName;return"script"==t}(e)?"script":function(e){const t=e.localName;return"style"==t||"link"==t&&"stylesheet"==e.getAttribute("rel")}(e)?"stylesheet":void 0}function pe(e){return"reload"==e.getAttribute("data-turbo-track")}class ge extends ee{static fromHTMLString(e=""){return this.fromDocument(_(e))}static fromElement(e){return this.fromDocument(e.ownerDocument)}static fromDocument({documentElement:e,body:t,head:s}){return new this(e,t,new me(s))}constructor(e,t,s){super(t),this.documentElement=e,this.headSnapshot=s}clone(){const e=this.element.cloneNode(!0),t=this.element.querySelectorAll("select"),s=e.querySelectorAll("select");for(const[r,n]of t.entries()){const e=s[r];for(const t of e.selectedOptions)t.selected=!1;for(const t of n.selectedOptions)e.options[t.index].selected=!0}for(const r of e.querySelectorAll('input[type="password"]'))r.value="";return new ge(this.documentElement,e,this.headSnapshot)}get lang(){return this.documentElement.getAttribute("lang")}get headElement(){return this.headSnapshot.element}get rootLocation(){return l(this.getSetting("root")??"/")}get cacheControlValue(){return this.getSetting("cache-control")}get isPreviewable(){return"no-preview"!=this.cacheControlValue}get isCacheable(){return"no-cache"!=this.cacheControlValue}get isVisitable(){return"reload"!=this.getSetting("visit-control")}get prefersViewTransitions(){return"same-origin"===this.headSnapshot.getMetaValue("view-transition")}get shouldMorphPage(){return"morph"===this.getSetting("refresh-method")}get shouldPreserveScrollPosition(){return"preserve"===this.getSetting("refresh-scroll")}getSetting(e){return this.headSnapshot.getMetaValue(`turbo-${e}`)}}class be{#a=!1;#c=Promise.resolve();renderChange(e,t){return e&&this.viewTransitionsAvailable&&!this.#a?(this.#a=!0,this.#c=this.#c.then((async()=>{await document.startViewTransition(t).finished}))):this.#c=this.#c.then(t),this.#c}get viewTransitionsAvailable(){return document.startViewTransition}}const ye={action:"advance",historyChanged:!1,visitCachedSnapshot:()=>{},willRender:!0,updateHistory:!0,shouldCacheSnapshot:!0,acceptsStreamResponse:!1},ve="visitStart",je="requestStart",_e="requestEnd",we="visitEnd",Ee="initialized",Ae="started",Se="canceled",ke="failed",xe="completed",Oe=0,Ne=-1,qe=-2,Te={advance:"forward",restore:"back",replace:"none"};class Le{identifier=E();timingMetrics={};followedRedirect=!1;historyChanged=!1;scrolled=!1;shouldCacheSnapshot=!0;acceptsStreamResponse=!1;snapshotCached=!1;state=Ee;viewTransitioner=new be;constructor(e,t,s,r={}){this.delegate=e,this.location=t,this.restorationIdentifier=s||E();const{action:n,historyChanged:o,referrer:i,snapshot:l,snapshotHTML:a,response:c,visitCachedSnapshot:u,willRender:d,updateHistory:h,shouldCacheSnapshot:m,acceptsStreamResponse:f,direction:p}={...ye,...r};this.action=n,this.historyChanged=o,this.referrer=i,this.snapshot=l,this.snapshotHTML=a,this.response=c,this.isSamePage=this.delegate.locationWithActionIsSamePage(this.location,this.action),this.isPageRefresh=this.view.isPageRefresh(this),this.visitCachedSnapshot=u,this.willRender=d,this.updateHistory=h,this.scrolled=!d,this.shouldCacheSnapshot=m,this.acceptsStreamResponse=f,this.direction=p||Te[n]}get adapter(){return this.delegate.adapter}get view(){return this.delegate.view}get history(){return this.delegate.history}get restorationData(){return this.history.getRestorationDataForIdentifier(this.restorationIdentifier)}get silent(){return this.isSamePage}start(){this.state==Ee&&(this.recordTimingMetric(ve),this.state=Ae,this.adapter.visitStarted(this),this.delegate.visitStarted(this))}cancel(){this.state==Ae&&(this.request&&this.request.cancel(),this.cancelRender(),this.state=Se)}complete(){this.state==Ae&&(this.recordTimingMetric(we),this.adapter.visitCompleted(this),this.state=xe,this.followRedirect(),this.followedRedirect||this.delegate.visitCompleted(this))}fail(){this.state==Ae&&(this.state=ke,this.adapter.visitFailed(this),this.delegate.visitCompleted(this))}changeHistory(){if(!this.historyChanged&&this.updateHistory){const e=O(this.location.href===this.referrer?.href?"replace":this.action);this.history.update(e,this.location,this.restorationIdentifier),this.historyChanged=!0}}issueRequest(){this.hasPreloadedResponse()?this.simulateRequest():this.shouldIssueRequest()&&!this.request&&(this.request=new $(this,H.get,this.location),this.request.perform())}simulateRequest(){this.response&&(this.startRequest(),this.recordResponse(),this.finishRequest())}startRequest(){this.recordTimingMetric(je),this.adapter.visitRequestStarted(this)}recordResponse(e=this.response){if(this.response=e,e){const{statusCode:t}=e;Ce(t)?this.adapter.visitRequestCompleted(this):this.adapter.visitRequestFailedWithStatusCode(this,t)}}finishRequest(){this.recordTimingMetric(_e),this.adapter.visitRequestFinished(this)}loadResponse(){if(this.response){const{statusCode:e,responseHTML:t}=this.response;this.render((async()=>{if(this.shouldCacheSnapshot&&this.cacheSnapshot(),this.view.renderPromise&&await this.view.renderPromise,Ce(e)&&null!=t){const e=ge.fromHTMLString(t);await this.renderPageSnapshot(e,!1),this.adapter.visitRendered(this),this.complete()}else await this.view.renderError(ge.fromHTMLString(t),this),this.adapter.visitRendered(this),this.fail()}))}}getCachedSnapshot(){const e=this.view.getCachedSnapshotForLocation(this.location)||this.getPreloadedSnapshot();if(e&&(!a(this.location)||e.hasAnchor(a(this.location)))&&("restore"==this.action||e.isPreviewable))return e}getPreloadedSnapshot(){if(this.snapshotHTML)return ge.fromHTMLString(this.snapshotHTML)}hasCachedSnapshot(){return null!=this.getCachedSnapshot()}loadCachedSnapshot(){const e=this.getCachedSnapshot();if(e){const t=this.shouldIssueRequest();this.render((async()=>{this.cacheSnapshot(),this.isSamePage||this.isPageRefresh?this.adapter.visitRendered(this):(this.view.renderPromise&&await this.view.renderPromise,await this.renderPageSnapshot(e,t),this.adapter.visitRendered(this),t||this.complete())}))}}followRedirect(){this.redirectedToLocation&&!this.followedRedirect&&this.response?.redirected&&(this.adapter.visitProposedToLocation(this.redirectedToLocation,{action:"replace",response:this.response,shouldCacheSnapshot:!1,willRender:!1}),this.followedRedirect=!0)}goToSamePageAnchor(){this.isSamePage&&this.render((async()=>{this.cacheSnapshot(),this.performScroll(),this.changeHistory(),this.adapter.visitRendered(this)}))}prepareRequest(e){this.acceptsStreamResponse&&e.acceptResponseType(X.contentType)}requestStarted(){this.startRequest()}requestPreventedHandlingResponse(e,t){}async requestSucceededWithResponse(e,t){const s=await t.responseHTML,{redirected:r,statusCode:n}=t;null==s?this.recordResponse({statusCode:qe,redirected:r}):(this.redirectedToLocation=t.redirected?t.location:void 0,this.recordResponse({statusCode:n,responseHTML:s,redirected:r}))}async requestFailedWithResponse(e,t){const s=await t.responseHTML,{redirected:r,statusCode:n}=t;null==s?this.recordResponse({statusCode:qe,redirected:r}):this.recordResponse({statusCode:n,responseHTML:s,redirected:r})}requestErrored(e,t){this.recordResponse({statusCode:Oe,redirected:!1})}requestFinished(){this.finishRequest()}performScroll(){this.scrolled||this.view.forceReloaded||this.view.shouldPreserveScrollPosition(this)||("restore"==this.action?this.scrollToRestoredPosition()||this.scrollToAnchor()||this.view.scrollToTop():this.scrollToAnchor()||this.view.scrollToTop(),this.isSamePage&&this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation,this.location),this.scrolled=!0)}scrollToRestoredPosition(){const{scrollPosition:e}=this.restorationData;if(e)return this.view.scrollToPosition(e),!0}scrollToAnchor(){const e=a(this.location);if(null!=e)return this.view.scrollToAnchor(e),!0}recordTimingMetric(e){this.timingMetrics[e]=(new Date).getTime()}getTimingMetrics(){return{...this.timingMetrics}}getHistoryMethodForAction(e){switch(e){case"replace":return history.replaceState;case"advance":case"restore":return history.pushState}}hasPreloadedResponse(){return"object"==typeof this.response}shouldIssueRequest(){return!this.isSamePage&&("restore"==this.action?!this.hasCachedSnapshot():this.willRender)}cacheSnapshot(){this.snapshotCached||(this.view.cacheSnapshot(this.snapshot).then((e=>e&&this.visitCachedSnapshot(e))),this.snapshotCached=!0)}async render(e){this.cancelRender(),this.frame=await y(),await e(),delete this.frame}async renderPageSnapshot(e,t){await this.viewTransitioner.renderChange(this.view.shouldTransitionTo(e),(async()=>{await this.view.renderPage(e,t,this.willRender,this),this.performScroll()}))}cancelRender(){this.frame&&(cancelAnimationFrame(this.frame),delete this.frame)}}function Ce(e){return e>=200&&e<300}class Re{progressBar=new he;constructor(e){this.session=e}visitProposedToLocation(e,t){h(e,this.navigator.rootLocation)?this.navigator.startVisit(e,t?.restorationIdentifier||E(),t):window.location.href=e.toString()}visitStarted(e){this.location=e.location,e.loadCachedSnapshot(),e.issueRequest(),e.goToSamePageAnchor()}visitRequestStarted(e){this.progressBar.setValue(0),e.hasCachedSnapshot()||"restore"!=e.action?this.showVisitProgressBarAfterDelay():this.showProgressBar()}visitRequestCompleted(e){e.loadResponse()}visitRequestFailedWithStatusCode(e,t){switch(t){case Oe:case Ne:case qe:return this.reload({reason:"request_failed",context:{statusCode:t}});default:return e.loadResponse()}}visitRequestFinished(e){}visitCompleted(e){this.progressBar.setValue(1),this.hideVisitProgressBar()}pageInvalidated(e){this.reload(e)}visitFailed(e){this.progressBar.setValue(1),this.hideVisitProgressBar()}visitRendered(e){}formSubmissionStarted(e){this.progressBar.setValue(0),this.showFormProgressBarAfterDelay()}formSubmissionFinished(e){this.progressBar.setValue(1),this.hideFormProgressBar()}showVisitProgressBarAfterDelay(){this.visitProgressBarTimeout=window.setTimeout(this.showProgressBar,this.session.progressBarDelay)}hideVisitProgressBar(){this.progressBar.hide(),null!=this.visitProgressBarTimeout&&(window.clearTimeout(this.visitProgressBarTimeout),delete this.visitProgressBarTimeout)}showFormProgressBarAfterDelay(){null==this.formProgressBarTimeout&&(this.formProgressBarTimeout=window.setTimeout(this.showProgressBar,this.session.progressBarDelay))}hideFormProgressBar(){this.progressBar.hide(),null!=this.formProgressBarTimeout&&(window.clearTimeout(this.formProgressBarTimeout),delete this.formProgressBarTimeout)}showProgressBar=()=>{this.progressBar.show()};reload(e){b("turbo:reload",{detail:e}),window.location.href=this.location?.toString()||window.location.href}get navigator(){return this.session.navigator}}class Me{selector="[data-turbo-temporary]";deprecatedSelector="[data-turbo-cache=false]";started=!1;start(){this.started||(this.started=!0,addEventListener("turbo:before-cache",this.removeTemporaryElements,!1))}stop(){this.started&&(this.started=!1,removeEventListener("turbo:before-cache",this.removeTemporaryElements,!1))}removeTemporaryElements=e=>{for(const t of this.temporaryElements)t.remove()};get temporaryElements(){return[...document.querySelectorAll(this.selector),...this.temporaryElementsWithDeprecation]}get temporaryElementsWithDeprecation(){const e=document.querySelectorAll(this.deprecatedSelector);return e.length,[...e]}}class Ie{constructor(e,t){this.session=e,this.element=t,this.linkInterceptor=new ie(this,t),this.formSubmitObserver=new re(this,t)}start(){this.linkInterceptor.start(),this.formSubmitObserver.start()}stop(){this.linkInterceptor.stop(),this.formSubmitObserver.stop()}shouldInterceptLinkClick(e,t,s){return this.#u(e)}linkClickIntercepted(e,t,s){const r=this.#d(e);r&&r.delegate.linkClickIntercepted(e,t,s)}willSubmitForm(e,t){return null==e.closest("turbo-frame")&&this.#h(e,t)&&this.#u(e,t)}formSubmitted(e,t){const s=this.#d(e,t);s&&s.delegate.formSubmitted(e,t)}#h(e,t){const s=c(e,t),r=this.element.ownerDocument.querySelector('meta[name="turbo-root"]'),n=l(r?.content??"/");return this.#u(e,t)&&h(s,n)}#u(e,t){if(e instanceof HTMLFormElement?this.session.submissionIsNavigatable(e,t):this.session.elementIsNavigatable(e)){const s=this.#d(e,t);return!!s&&s!=e.closest("turbo-frame")}return!1}#d(e,t){const s=t?.getAttribute("data-turbo-frame")||e.getAttribute("data-turbo-frame");if(s&&"_top"!=s){const e=this.element.querySelector(`#${s}:not([disabled])`);if(e instanceof i)return e}}}class Pe{location;restorationIdentifier=E();restorationData={};started=!1;pageLoaded=!1;currentIndex=0;constructor(e){this.delegate=e}start(){this.started||(addEventListener("popstate",this.onPopState,!1),addEventListener("load",this.onPageLoad,!1),this.currentIndex=history.state?.turbo?.restorationIndex||0,this.started=!0,this.replace(new URL(window.location.href)))}stop(){this.started&&(removeEventListener("popstate",this.onPopState,!1),removeEventListener("load",this.onPageLoad,!1),this.started=!1)}push(e,t){this.update(history.pushState,e,t)}replace(e,t){this.update(history.replaceState,e,t)}update(e,t,s=E()){e===history.pushState&&++this.currentIndex;const r={turbo:{restorationIdentifier:s,restorationIndex:this.currentIndex}};e.call(history,r,"",t.href),this.location=t,this.restorationIdentifier=s}getRestorationDataForIdentifier(e){return this.restorationData[e]||{}}updateRestorationData(e){const{restorationIdentifier:t}=this,s=this.restorationData[t];this.restorationData[t]={...s,...e}}assumeControlOfScrollRestoration(){this.previousScrollRestoration||(this.previousScrollRestoration=history.scrollRestoration??"auto",history.scrollRestoration="manual")}relinquishControlOfScrollRestoration(){this.previousScrollRestoration&&(history.scrollRestoration=this.previousScrollRestoration,delete this.previousScrollRestoration)}onPopState=e=>{if(this.shouldHandlePopState()){const{turbo:t}=e.state||{};if(t){this.location=new URL(window.location.href);const{restorationIdentifier:e,restorationIndex:s}=t;this.restorationIdentifier=e;const r=s>this.currentIndex?"forward":"back";this.delegate.historyPoppedToLocationWithRestorationIdentifierAndDirection(this.location,e,r),this.currentIndex=s}}};onPageLoad=async e=>{await Promise.resolve(),this.pageLoaded=!0};shouldHandlePopState(){return this.pageIsLoaded()}pageIsLoaded(){return this.pageLoaded||"complete"==document.readyState}}class Be{started=!1;#m=null;constructor(e,t){this.delegate=e,this.eventTarget=t}start(){this.started||("loading"===this.eventTarget.readyState?this.eventTarget.addEventListener("DOMContentLoaded",this.#f,{once:!0}):this.#f())}stop(){this.started&&(this.eventTarget.removeEventListener("mouseenter",this.#p,{capture:!0,passive:!0}),this.eventTarget.removeEventListener("mouseleave",this.#g,{capture:!0,passive:!0}),this.eventTarget.removeEventListener("turbo:before-fetch-request",this.#b,!0),this.started=!1)}#f=()=>{this.eventTarget.addEventListener("mouseenter",this.#p,{capture:!0,passive:!0}),this.eventTarget.addEventListener("mouseleave",this.#g,{capture:!0,passive:!0}),this.eventTarget.addEventListener("turbo:before-fetch-request",this.#b,!0),this.started=!0};#p=e=>{if("false"===T("turbo-prefetch"))return;const t=e.target;if(t.matches&&t.matches("a[href]:not([target^=_]):not([download])")&&this.#y(t)){const e=t,s=M(e);if(this.delegate.canPrefetchRequestToLocation(e,s)){this.#m=e;const r=new $(this,H.get,s,new URLSearchParams,t);Y.setLater(s.toString(),r,this.#v)}}};#g=e=>{e.target===this.#m&&this.#j()};#j=()=>{Y.clear(),this.#m=null};#b=e=>{if("FORM"!==e.target.tagName&&"get"===e.detail.fetchOptions.method){const t=Y.get(e.detail.url.toString());t&&(e.detail.fetchRequest=t),Y.clear()}};prepareRequest(e){const t=e.target;e.headers["X-Sec-Purpose"]="prefetch";const s=t.closest("turbo-frame"),r=t.getAttribute("data-turbo-frame")||s?.getAttribute("target")||s?.id;r&&"_top"!==r&&(e.headers["Turbo-Frame"]=r)}requestSucceededWithResponse(){}requestStarted(e){}requestErrored(e){}requestFinished(e){}requestPreventedHandlingResponse(e,t){}requestFailedWithResponse(e,t){}get#v(){return Number(T("turbo-prefetch-cache-time"))||1e4}#y(e){return!!e.getAttribute("href")&&(!Fe(e)&&(!De(e)&&(!He(e)&&(!Ue(e)&&!$e(e)))))}}const Fe=e=>e.origin!==document.location.origin||!["http:","https:"].includes(e.protocol)||e.hasAttribute("target"),De=e=>e.pathname+e.search===document.location.pathname+document.location.search||e.href.startsWith("#"),He=e=>{if("false"===e.getAttribute("data-turbo-prefetch"))return!0;if("false"===e.getAttribute("data-turbo"))return!0;const t=L(e,"[data-turbo-prefetch]");return!(!t||"false"!==t.getAttribute("data-turbo-prefetch"))},Ue=e=>{const t=e.getAttribute("data-turbo-method");return!(!t||"get"===t.toLowerCase())||(!!Ve(e)||(!!e.hasAttribute("data-turbo-confirm")||!!e.hasAttribute("data-turbo-stream")))},Ve=e=>e.hasAttribute("data-remote")||e.hasAttribute("data-behavior")||e.hasAttribute("data-confirm")||e.hasAttribute("data-method"),$e=e=>b("turbo:before-prefetch",{target:e,cancelable:!0}).defaultPrevented;class ze{constructor(e){this.delegate=e}proposeVisit(e,t={}){this.delegate.allowsVisitingLocationWithAction(e,t.action)&&this.delegate.visitProposedToLocation(e,t)}startVisit(e,t,s={}){this.stop(),this.currentVisit=new Le(this,l(e),t,{referrer:this.location,...s}),this.currentVisit.start()}submitForm(e,t){this.stop(),this.formSubmission=new Q(this,e,t,!0),this.formSubmission.start()}stop(){this.formSubmission&&(this.formSubmission.stop(),delete this.formSubmission),this.currentVisit&&(this.currentVisit.cancel(),delete this.currentVisit)}get adapter(){return this.delegate.adapter}get view(){return this.delegate.view}get rootLocation(){return this.view.snapshot.rootLocation}get history(){return this.delegate.history}formSubmissionStarted(e){"function"==typeof this.adapter.formSubmissionStarted&&this.adapter.formSubmissionStarted(e)}async formSubmissionSucceededWithResponse(e,t){if(e==this.formSubmission){const s=await t.responseHTML;if(s){const r=e.isSafe;r||this.view.clearSnapshotCache();const{statusCode:n,redirected:o}=t,i={action:this.#_(e,t),shouldCacheSnapshot:r,response:{statusCode:n,responseHTML:s,redirected:o}};this.proposeVisit(t.location,i)}}}async formSubmissionFailedWithResponse(e,t){const s=await t.responseHTML;if(s){const e=ge.fromHTMLString(s);t.serverError?await this.view.renderError(e,this.currentVisit):await this.view.renderPage(e,!1,!0,this.currentVisit),e.shouldPreserveScrollPosition||this.view.scrollToTop(),this.view.clearSnapshotCache()}}formSubmissionErrored(e,t){}formSubmissionFinished(e){"function"==typeof this.adapter.formSubmissionFinished&&this.adapter.formSubmissionFinished(e)}visitStarted(e){this.delegate.visitStarted(e)}visitCompleted(e){this.delegate.visitCompleted(e)}locationWithActionIsSamePage(e,t){const s=a(e),r=a(this.view.lastRenderedLocation),n="restore"===t&&void 0===s;return"replace"!==t&&m(e)===m(this.view.lastRenderedLocation)&&(n||null!=s&&s!==r)}visitScrolledToSamePageLocation(e,t){this.delegate.visitScrolledToSamePageLocation(e,t)}get location(){return this.history.location}get restorationIdentifier(){return this.history.restorationIdentifier}#_(e,t){const{submitter:s,formElement:r}=e;return N(s,r)||this.#w(t)}#w(e){return e.redirected&&e.location.href===this.location?.href?"replace":"advance"}}const Ke=0,We=1,Ge=2,Ze=3;class Xe{stage=Ke;started=!1;constructor(e){this.delegate=e}start(){this.started||(this.stage==Ke&&(this.stage=We),document.addEventListener("readystatechange",this.interpretReadyState,!1),addEventListener("pagehide",this.pageWillUnload,!1),this.started=!0)}stop(){this.started&&(document.removeEventListener("readystatechange",this.interpretReadyState,!1),removeEventListener("pagehide",this.pageWillUnload,!1),this.started=!1)}interpretReadyState=()=>{const{readyState:e}=this;"interactive"==e?this.pageIsInteractive():"complete"==e&&this.pageIsComplete()};pageIsInteractive(){this.stage==We&&(this.stage=Ge,this.delegate.pageBecameInteractive())}pageIsComplete(){this.pageIsInteractive(),this.stage==Ge&&(this.stage=Ze,this.delegate.pageLoaded())}pageWillUnload=()=>{this.delegate.pageWillUnload()};get readyState(){return document.readyState}}class Ye{started=!1;constructor(e){this.delegate=e}start(){this.started||(addEventListener("scroll",this.onScroll,!1),this.onScroll(),this.started=!0)}stop(){this.started&&(removeEventListener("scroll",this.onScroll,!1),this.started=!1)}onScroll=()=>{this.updatePosition({x:window.pageXOffset,y:window.pageYOffset})};updatePosition(e){this.delegate.scrollPositionChanged(e)}}class Je{render({fragment:e}){ce.preservingPermanentElements(this,function(e){const t=se(document.documentElement),s={};for(const r of t){const{id:t}=r;for(const n of e.querySelectorAll("turbo-stream")){const e=te(n.templateElement.content,t);e&&(s[t]=[r,e])}}return s}(e),(()=>{!async function(e,t){const s=`turbo-stream-autofocus-${E()}`,r=e.querySelectorAll("turbo-stream"),n=function(e){for(const t of e){const e=R(t.templateElement.content);if(e)return e}return null}(r);let o=null;n&&(o=n.id?n.id:s,n.id=o);t(),await y();if((null==document.activeElement||document.activeElement==document.body)&&o){const e=document.getElementById(o);C(e)&&e.focus(),e&&e.id==s&&e.removeAttribute("id")}}(e,(()=>{!async function(e){const[t,s]=await async function(e,t){const s=t();return e(),await v(),[s,t()]}(e,(()=>document.activeElement)),r=t&&t.id;if(r){const e=document.getElementById(r);C(e)&&e!=s&&e.focus()}}((()=>{document.documentElement.appendChild(e)}))}))}))}enteringBardo(e,t){t.replaceWith(e.cloneNode(!0))}leavingBardo(){}}class Qe{sources=new Set;#E=!1;constructor(e){this.delegate=e}start(){this.#E||(this.#E=!0,addEventListener("turbo:before-fetch-response",this.inspectFetchResponse,!1))}stop(){this.#E&&(this.#E=!1,removeEventListener("turbo:before-fetch-response",this.inspectFetchResponse,!1))}connectStreamSource(e){this.streamSourceIsConnected(e)||(this.sources.add(e),e.addEventListener("message",this.receiveMessageEvent,!1))}disconnectStreamSource(e){this.streamSourceIsConnected(e)&&(this.sources.delete(e),e.removeEventListener("message",this.receiveMessageEvent,!1))}streamSourceIsConnected(e){return this.sources.has(e)}inspectFetchResponse=e=>{const t=function(e){const t=e.detail?.fetchResponse;if(t instanceof p)return t}(e);t&&function(e){const t=e.contentType??"";return t.startsWith(X.contentType)}(t)&&(e.preventDefault(),this.receiveMessageResponse(t))};receiveMessageEvent=e=>{this.#E&&"string"==typeof e.data&&this.receiveMessageHTML(e.data)};async receiveMessageResponse(e){const t=await e.responseHTML;t&&this.receiveMessageHTML(t)}receiveMessageHTML(e){this.delegate.receivedMessageFromStream(X.wrap(e))}}class et extends ue{static renderElement(e,t){const{documentElement:s,body:r}=document;s.replaceChild(t,r)}async render(){this.replaceHeadAndBody(),this.activateScriptElements()}replaceHeadAndBody(){const{documentElement:e,head:t}=document;e.replaceChild(this.newHead,t),this.renderElement(this.currentElement,this.newElement)}activateScriptElements(){for(const e of this.scriptElements){const t=e.parentNode;if(t){const s=g(e);t.replaceChild(s,e)}}}get newHead(){return this.newSnapshot.headSnapshot.element}get scriptElements(){return document.documentElement.querySelectorAll("script")}}var tt=function(){let e=new Set,t={morphStyle:"outerHTML",callbacks:{beforeNodeAdded:c,afterNodeAdded:c,beforeNodeMorphed:c,afterNodeMorphed:c,beforeNodeRemoved:c,afterNodeRemoved:c,beforeAttributeUpdated:c},head:{style:"merge",shouldPreserve:function(e){return"true"===e.getAttribute("im-preserve")},shouldReAppend:function(e){return"true"===e.getAttribute("im-re-append")},shouldRemove:c,afterHeadMorphed:c}};function s(e,t,r){if(r.head.block){let n=e.querySelector("head"),o=t.querySelector("head");if(n&&o){let i=a(o,n,r);return void Promise.all(i).then((function(){s(e,t,Object.assign(r,{head:{block:!1,ignore:!0}}))}))}}if("innerHTML"===r.morphStyle)return o(t,e,r),e.children;if("outerHTML"===r.morphStyle||null==r.morphStyle){let s=function(e,t,s){let r;r=e.firstChild;let n=r,o=0;for(;r;){let e=p(r,t,s);e>o&&(n=r,o=e),r=r.nextSibling}return n}(t,e,r),o=s?.previousSibling,i=s?.nextSibling,l=n(e,s,r);return s?function(e,t,s){let r=[],n=[];for(;null!=e;)r.push(e),e=e.previousSibling;for(;r.length>0;){let e=r.pop();n.push(e),t.parentElement.insertBefore(e,t)}n.push(t);for(;null!=s;)r.push(s),n.push(s),s=s.nextSibling;for(;r.length>0;)t.parentElement.insertBefore(r.pop(),t.nextSibling);return n}(o,l,i):[]}throw"Do not understand how to morph style "+r.morphStyle}function r(e,t){return t.ignoreActiveValue&&e===document.activeElement&&e!==document.body}function n(e,t,s){if(!s.ignoreActive||e!==document.activeElement)return null==t?!1===s.callbacks.beforeNodeRemoved(e)?e:(e.remove(),s.callbacks.afterNodeRemoved(e),null):d(e,t)?(!1===s.callbacks.beforeNodeMorphed(e,t)||(e instanceof HTMLHeadElement&&s.head.ignore||(e instanceof HTMLHeadElement&&"morph"!==s.head.style?a(t,e,s):(!function(e,t,s){let n=e.nodeType;if(1===n){const r=e.attributes,n=t.attributes;for(const e of r)i(e.name,t,"update",s)||t.getAttribute(e.name)!==e.value&&t.setAttribute(e.name,e.value);for(let o=n.length-1;0<=o;o--){const r=n[o];i(r.name,t,"remove",s)||(e.hasAttribute(r.name)||t.removeAttribute(r.name))}}8!==n&&3!==n||t.nodeValue!==e.nodeValue&&(t.nodeValue=e.nodeValue);r(t,s)||function(e,t,s){if(e instanceof HTMLInputElement&&t instanceof HTMLInputElement&&"file"!==e.type){let r=e.value,n=t.value;l(e,t,"checked",s),l(e,t,"disabled",s),e.hasAttribute("value")?r!==n&&(i("value",t,"update",s)||(t.setAttribute("value",r),t.value=r)):i("value",t,"remove",s)||(t.value="",t.removeAttribute("value"))}else if(e instanceof HTMLOptionElement)l(e,t,"selected",s);else if(e instanceof HTMLTextAreaElement&&t instanceof HTMLTextAreaElement){let r=e.value,n=t.value;if(i("value",t,"update",s))return;r!==n&&(t.value=r),t.firstChild&&t.firstChild.nodeValue!==r&&(t.firstChild.nodeValue=r)}}(e,t,s)}(t,e,s),r(e,s)||o(t,e,s))),s.callbacks.afterNodeMorphed(e,t)),e):!1===s.callbacks.beforeNodeRemoved(e)||!1===s.callbacks.beforeNodeAdded(t)?e:(e.parentElement.replaceChild(t,e),s.callbacks.afterNodeAdded(t),s.callbacks.afterNodeRemoved(e),t)}function o(e,t,s){let r,o=e.firstChild,i=t.firstChild;for(;o;){if(r=o,o=r.nextSibling,null==i){if(!1===s.callbacks.beforeNodeAdded(r))return;t.appendChild(r),s.callbacks.afterNodeAdded(r),v(s,r);continue}if(u(r,i,s)){n(i,r,s),i=i.nextSibling,v(s,r);continue}let l=m(e,t,r,i,s);if(l){i=h(i,l,s),n(l,r,s),v(s,r);continue}let a=f(e,t,r,i,s);if(a)i=h(i,a,s),n(a,r,s),v(s,r);else{if(!1===s.callbacks.beforeNodeAdded(r))return;t.insertBefore(r,i),s.callbacks.afterNodeAdded(r),v(s,r)}}for(;null!==i;){let e=i;i=i.nextSibling,g(e,s)}}function i(e,t,s,r){return!("value"!==e||!r.ignoreActiveValue||t!==document.activeElement)||!1===r.callbacks.beforeAttributeUpdated(e,t,s)}function l(e,t,s,r){if(e[s]!==t[s]){let n=i(s,t,"update",r);n||(t[s]=e[s]),e[s]?n||t.setAttribute(s,e[s]):i(s,t,"remove",r)||t.removeAttribute(s)}}function a(e,t,s){let r=[],n=[],o=[],i=[],l=s.head.style,a=new Map;for(const u of e.children)a.set(u.outerHTML,u);for(const u of t.children){let e=a.has(u.outerHTML),t=s.head.shouldReAppend(u),r=s.head.shouldPreserve(u);e||r?t?n.push(u):(a.delete(u.outerHTML),o.push(u)):"append"===l?t&&(n.push(u),i.push(u)):!1!==s.head.shouldRemove(u)&&n.push(u)}i.push(...a.values());let c=[];for(const u of i){let e=document.createRange().createContextualFragment(u.outerHTML).firstChild;if(!1!==s.callbacks.beforeNodeAdded(e)){if(e.href||e.src){let t=null,s=new Promise((function(e){t=e}));e.addEventListener("load",(function(){t()})),c.push(s)}t.appendChild(e),s.callbacks.afterNodeAdded(e),r.push(e)}}for(const u of n)!1!==s.callbacks.beforeNodeRemoved(u)&&(t.removeChild(u),s.callbacks.afterNodeRemoved(u));return s.head.afterHeadMorphed(t,{added:r,kept:o,removed:n}),c}function c(){}function u(e,t,s){return null!=e&&null!=t&&(e.nodeType===t.nodeType&&e.tagName===t.tagName&&(""!==e.id&&e.id===t.id||j(s,e,t)>0))}function d(e,t){return null!=e&&null!=t&&(e.nodeType===t.nodeType&&e.tagName===t.tagName)}function h(e,t,s){for(;e!==t;){let t=e;e=e.nextSibling,g(t,s)}return v(s,t),t.nextSibling}function m(e,t,s,r,n){let o=j(n,s,t);if(o>0){let t=r,i=0;for(;null!=t;){if(u(s,t,n))return t;if(i+=j(n,t,e),i>o)return null;t=t.nextSibling}}return null}function f(e,t,s,r,n){let o=r,i=s.nextSibling,l=0;for(;null!=o;){if(j(n,o,e)>0)return null;if(d(s,o))return o;if(d(i,o)&&(l++,i=i.nextSibling,l>=2))return null;o=o.nextSibling}return o}function p(e,t,s){return d(e,t)?.5+j(s,e,t):0}function g(e,t){v(t,e),!1!==t.callbacks.beforeNodeRemoved(e)&&(e.remove(),t.callbacks.afterNodeRemoved(e))}function b(e,t){return!e.deadIds.has(t)}function y(t,s,r){return(t.idMap.get(r)||e).has(s)}function v(t,s){let r=t.idMap.get(s)||e;for(const e of r)t.deadIds.add(e)}function j(t,s,r){let n=t.idMap.get(s)||e,o=0;for(const e of n)b(t,e)&&y(t,e,r)&&++o;return o}function _(e,t){let s=e.parentElement,r=e.querySelectorAll("[id]");for(const n of r){let e=n;for(;e!==s&&null!=e;){let s=t.get(e);null==s&&(s=new Set,t.set(e,s)),s.add(n.id),e=e.parentElement}}}function w(e,t){let s=new Map;return _(e,s),_(t,s),s}return{morph:function(e,r,n={}){e instanceof Document&&(e=e.documentElement),"string"==typeof r&&(r=function(e){let t=new DOMParser,s=e.replace(/<svg(\s[^>]*>|>)([\s\S]*?)<\/svg>/gim,"");if(s.match(/<\/html>/)||s.match(/<\/head>/)||s.match(/<\/body>/)){let r=t.parseFromString(e,"text/html");if(s.match(/<\/html>/))return r.generatedByIdiomorph=!0,r;{let e=r.firstChild;return e?(e.generatedByIdiomorph=!0,e):null}}{let s=t.parseFromString("<body><template>"+e+"</template></body>","text/html").body.querySelector("template").content;return s.generatedByIdiomorph=!0,s}}(r));let o=function(e){if(null==e){return document.createElement("div")}if(e.generatedByIdiomorph)return e;if(e instanceof Node){const t=document.createElement("div");return t.append(e),t}{const t=document.createElement("div");for(const s of[...e])t.append(s);return t}}(r),i=function(e,s,r){return r=function(e){let s={};return Object.assign(s,t),Object.assign(s,e),s.callbacks={},Object.assign(s.callbacks,t.callbacks),Object.assign(s.callbacks,e.callbacks),s.head={},Object.assign(s.head,t.head),Object.assign(s.head,e.head),s}(r),{target:e,newContent:s,config:r,morphStyle:r.morphStyle,ignoreActive:r.ignoreActive,ignoreActiveValue:r.ignoreActiveValue,idMap:w(e,s),deadIds:new Set,callbacks:r.callbacks,head:r.head}}(e,o,n);return s(e,o,i)},defaults:t}}();class st extends ue{static renderElement(e,t){document.body&&t instanceof HTMLBodyElement?document.body.replaceWith(t):document.documentElement.appendChild(t)}get shouldRender(){return this.newSnapshot.isVisitable&&this.trackedElementsAreIdentical}get reloadReason(){return this.newSnapshot.isVisitable?this.trackedElementsAreIdentical?void 0:{reason:"tracked_element_mismatch"}:{reason:"turbo_visit_control_is_reload"}}async prepareToRender(){this.#A(),await this.mergeHead()}async render(){this.willRender&&await this.replaceBody()}finishRendering(){super.finishRendering(),this.isPreview||this.focusFirstAutofocusableElement()}get currentHeadSnapshot(){return this.currentSnapshot.headSnapshot}get newHeadSnapshot(){return this.newSnapshot.headSnapshot}get newElement(){return this.newSnapshot.element}#A(){const{documentElement:e}=this.currentSnapshot,{lang:t}=this.newSnapshot;t?e.setAttribute("lang",t):e.removeAttribute("lang")}async mergeHead(){const e=this.mergeProvisionalElements(),t=this.copyNewHeadStylesheetElements();this.copyNewHeadScriptElements(),await e,await t,this.willRender&&this.removeUnusedDynamicStylesheetElements()}async replaceBody(){await this.preservingPermanentElements((async()=>{this.activateNewBody(),await this.assignNewBody()}))}get trackedElementsAreIdentical(){return this.currentHeadSnapshot.trackedElementSignature==this.newHeadSnapshot.trackedElementSignature}async copyNewHeadStylesheetElements(){const e=[];for(const t of this.newHeadStylesheetElements)e.push(x(t)),document.head.appendChild(t);await Promise.all(e)}copyNewHeadScriptElements(){for(const e of this.newHeadScriptElements)document.head.appendChild(g(e))}removeUnusedDynamicStylesheetElements(){for(const e of this.unusedDynamicStylesheetElements)document.head.removeChild(e)}async mergeProvisionalElements(){const e=[...this.newHeadProvisionalElements];for(const t of this.currentHeadProvisionalElements)this.isCurrentElementInElementList(t,e)||document.head.removeChild(t);for(const t of e)document.head.appendChild(t)}isCurrentElementInElementList(e,t){for(const[s,r]of t.entries()){if("TITLE"==e.tagName){if("TITLE"!=r.tagName)continue;if(e.innerHTML==r.innerHTML)return t.splice(s,1),!0}if(r.isEqualNode(e))return t.splice(s,1),!0}return!1}removeCurrentHeadProvisionalElements(){for(const e of this.currentHeadProvisionalElements)document.head.removeChild(e)}copyNewHeadProvisionalElements(){for(const e of this.newHeadProvisionalElements)document.head.appendChild(e)}activateNewBody(){document.adoptNode(this.newElement),this.activateNewBodyScriptElements()}activateNewBodyScriptElements(){for(const e of this.newBodyScriptElements){const t=g(e);e.replaceWith(t)}}async assignNewBody(){await this.renderElement(this.currentElement,this.newElement)}get unusedDynamicStylesheetElements(){return this.oldHeadStylesheetElements.filter((e=>"dynamic"===e.getAttribute("data-turbo-track")))}get oldHeadStylesheetElements(){return this.currentHeadSnapshot.getStylesheetElementsNotInSnapshot(this.newHeadSnapshot)}get newHeadStylesheetElements(){return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot)}get newHeadScriptElements(){return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot)}get currentHeadProvisionalElements(){return this.currentHeadSnapshot.provisionalElements}get newHeadProvisionalElements(){return this.newHeadSnapshot.provisionalElements}get newBodyScriptElements(){return this.newElement.querySelectorAll("script")}}class rt extends st{async render(){this.willRender&&await this.#S()}get renderMethod(){return"morph"}async#S(){this.#k(this.currentElement,this.newElement),this.#x(),b("turbo:morph",{detail:{currentElement:this.currentElement,newElement:this.newElement}})}#k(e,t,s="outerHTML"){this.isMorphingTurboFrame=this.#O(e),tt.morph(e,t,{morphStyle:s,callbacks:{beforeNodeAdded:this.#N,beforeNodeMorphed:this.#q,beforeAttributeUpdated:this.#T,beforeNodeRemoved:this.#L,afterNodeMorphed:this.#C}})}#N=e=>!(e.id&&e.hasAttribute("data-turbo-permanent")&&document.getElementById(e.id));#q=(e,t)=>{if(e instanceof HTMLElement){if(e.hasAttribute("data-turbo-permanent")||!this.isMorphingTurboFrame&&this.#O(e))return!1;return!b("turbo:before-morph-element",{cancelable:!0,target:e,detail:{newElement:t}}).defaultPrevented}};#T=(e,t,s)=>!b("turbo:before-morph-attribute",{cancelable:!0,target:t,detail:{attributeName:e,mutationType:s}}).defaultPrevented;#C=(e,t)=>{t instanceof HTMLElement&&b("turbo:morph-element",{target:e,detail:{newElement:t}})};#L=e=>this.#q(e);#x(){this.#R().forEach((e=>{this.#O(e)&&(this.#M(e),e.reload())}))}#M(e){e.addEventListener("turbo:before-frame-render",(e=>{e.detail.render=this.#I}),{once:!0})}#I=(e,t)=>{b("turbo:before-frame-morph",{target:e,detail:{currentElement:e,newElement:t}}),this.#k(e,t.children,"innerHTML")};#O(e){return e.src&&"morph"===e.refresh}#R(){return Array.from(document.querySelectorAll("turbo-frame[src]")).filter((e=>!e.closest("[data-turbo-permanent]")))}}class nt{keys=[];snapshots={};constructor(e){this.size=e}has(e){return f(e)in this.snapshots}get(e){if(this.has(e)){const t=this.read(e);return this.touch(e),t}}put(e,t){return this.write(e,t),this.touch(e),t}clear(){this.snapshots={}}read(e){return this.snapshots[f(e)]}write(e,t){this.snapshots[f(e)]=t}touch(e){const t=f(e),s=this.keys.indexOf(t);s>-1&&this.keys.splice(s,1),this.keys.unshift(t),this.trim()}trim(){for(const e of this.keys.splice(this.size))delete this.snapshots[e]}}class ot extends ne{snapshotCache=new nt(10);lastRenderedLocation=new URL(location.href);forceReloaded=!1;shouldTransitionTo(e){return this.snapshot.prefersViewTransitions&&e.prefersViewTransitions}renderPage(e,t=!1,s=!0,r){const n=new(this.isPageRefresh(r)&&this.snapshot.shouldMorphPage?rt:st)(this.snapshot,e,st.renderElement,t,s);return n.shouldRender?r?.changeHistory():this.forceReloaded=!0,this.render(n)}renderError(e,t){t?.changeHistory();const s=new et(this.snapshot,e,et.renderElement,!1);return this.render(s)}clearSnapshotCache(){this.snapshotCache.clear()}async cacheSnapshot(e=this.snapshot){if(e.isCacheable){this.delegate.viewWillCacheSnapshot();const{lastRenderedLocation:t}=this;await j();const s=e.clone();return this.snapshotCache.put(t,s),s}}getCachedSnapshotForLocation(e){return this.snapshotCache.get(e)}isPageRefresh(e){return!e||this.lastRenderedLocation.pathname===e.location.pathname&&"replace"===e.action}shouldPreserveScrollPosition(e){return this.isPageRefresh(e)&&this.snapshot.shouldPreserveScrollPosition}get snapshot(){return ge.fromElement(this.element)}}class it{selector="a[data-turbo-preload]";constructor(e,t){this.delegate=e,this.snapshotCache=t}start(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",this.#P):this.preloadOnLoadLinksForView(document.body)}stop(){document.removeEventListener("DOMContentLoaded",this.#P)}preloadOnLoadLinksForView(e){for(const t of e.querySelectorAll(this.selector))this.delegate.shouldPreloadLink(t)&&this.preloadURL(t)}async preloadURL(e){const t=new URL(e.href);if(this.snapshotCache.has(t))return;const s=new $(this,H.get,t,new URLSearchParams,e);await s.perform()}prepareRequest(e){e.headers["X-Sec-Purpose"]="prefetch"}async requestSucceededWithResponse(e,t){try{const s=await t.responseHTML,r=ge.fromHTMLString(s);this.snapshotCache.put(e.url,r)}catch(s){}}requestStarted(e){}requestErrored(e){}requestFinished(e){}requestPreventedHandlingResponse(e,t){}requestFailedWithResponse(e,t){}#P=()=>{this.preloadOnLoadLinksForView(document.body)}}class lt{constructor(e){this.session=e}clear(){this.session.clearCache()}resetCacheControl(){this.#B("")}exemptPageFromCache(){this.#B("no-cache")}exemptPageFromPreview(){this.#B("no-preview")}#B(e){!function(e,t){let s=q(e);s||(s=document.createElement("meta"),s.setAttribute("name",e),document.head.appendChild(s)),s.setAttribute("content",t)}("turbo-cache-control",e)}}function at(e){Object.defineProperties(e,ct)}const ct={absoluteURL:{get(){return this.toString()}}},ut=new class{navigator=new ze(this);history=new Pe(this);view=new ot(this,document.documentElement);adapter=new Re(this);pageObserver=new Xe(this);cacheObserver=new Me;linkPrefetchObserver=new Be(this,document);linkClickObserver=new le(this,window);formSubmitObserver=new re(this,document);scrollObserver=new Ye(this);streamObserver=new Qe(this);formLinkClickObserver=new ae(this,document.documentElement);frameRedirector=new Ie(this,document.documentElement);streamMessageRenderer=new Je;cache=new lt(this);drive=!0;enabled=!0;progressBarDelay=500;started=!1;formMode="on";#F=150;constructor(e){this.recentRequests=e,this.preloader=new it(this,this.view.snapshotCache),this.debouncedRefresh=this.refresh,this.pageRefreshDebouncePeriod=this.pageRefreshDebouncePeriod}start(){this.started||(this.pageObserver.start(),this.cacheObserver.start(),this.linkPrefetchObserver.start(),this.formLinkClickObserver.start(),this.linkClickObserver.start(),this.formSubmitObserver.start(),this.scrollObserver.start(),this.streamObserver.start(),this.frameRedirector.start(),this.history.start(),this.preloader.start(),this.started=!0,this.enabled=!0)}disable(){this.enabled=!1}stop(){this.started&&(this.pageObserver.stop(),this.cacheObserver.stop(),this.linkPrefetchObserver.stop(),this.formLinkClickObserver.stop(),this.linkClickObserver.stop(),this.formSubmitObserver.stop(),this.scrollObserver.stop(),this.streamObserver.stop(),this.frameRedirector.stop(),this.history.stop(),this.preloader.stop(),this.started=!1)}registerAdapter(e){this.adapter=e}visit(e,t={}){const s=t.frame?document.getElementById(t.frame):null;if(s instanceof i){const r=t.action||N(s);s.delegate.proposeVisitIfNavigatedWithAction(s,r),s.src=e.toString()}else this.navigator.proposeVisit(l(e),t)}refresh(e,t){t&&this.recentRequests.has(t)||this.visit(e,{action:"replace",shouldCacheSnapshot:!1})}connectStreamSource(e){this.streamObserver.connectStreamSource(e)}disconnectStreamSource(e){this.streamObserver.disconnectStreamSource(e)}renderStreamMessage(e){this.streamMessageRenderer.render(X.wrap(e))}clearCache(){this.view.clearSnapshotCache()}setProgressBarDelay(e){this.progressBarDelay=e}setFormMode(e){this.formMode=e}get location(){return this.history.location}get restorationIdentifier(){return this.history.restorationIdentifier}get pageRefreshDebouncePeriod(){return this.#F}set pageRefreshDebouncePeriod(e){this.refresh=function(e,t){let s=null;return(...r)=>{clearTimeout(s),s=setTimeout((()=>e.apply(this,r)),t)}}(this.debouncedRefresh.bind(this),e),this.#F=e}shouldPreloadLink(e){const t=e.hasAttribute("data-turbo-method"),s=e.hasAttribute("data-turbo-stream"),r=e.getAttribute("data-turbo-frame"),n="_top"==r?null:document.getElementById(r)||L(e,"turbo-frame:not([disabled])");if(t||s||n instanceof i)return!1;{const t=new URL(e.href);return this.elementIsNavigatable(e)&&h(t,this.snapshot.rootLocation)}}historyPoppedToLocationWithRestorationIdentifierAndDirection(e,t,s){this.enabled?this.navigator.startVisit(e,t,{action:"restore",historyChanged:!0,direction:s}):this.adapter.pageInvalidated({reason:"turbo_disabled"})}scrollPositionChanged(e){this.history.updateRestorationData({scrollPosition:e})}willSubmitFormLinkToLocation(e,t){return this.elementIsNavigatable(e)&&h(t,this.snapshot.rootLocation)}submittedFormLinkToLocation(){}canPrefetchRequestToLocation(e,t){return this.elementIsNavigatable(e)&&h(t,this.snapshot.rootLocation)}willFollowLinkToLocation(e,t,s){return this.elementIsNavigatable(e)&&h(t,this.snapshot.rootLocation)&&this.applicationAllowsFollowingLinkToLocation(e,t,s)}followedLinkToLocation(e,t){const s=this.getActionForLink(e),r=e.hasAttribute("data-turbo-stream");this.visit(t.href,{action:s,acceptsStreamResponse:r})}allowsVisitingLocationWithAction(e,t){return this.locationWithActionIsSamePage(e,t)||this.applicationAllowsVisitingLocation(e)}visitProposedToLocation(e,t){at(e),this.adapter.visitProposedToLocation(e,t)}visitStarted(e){e.acceptsStreamResponse||(S(document.documentElement),this.view.markVisitDirection(e.direction)),at(e.location),e.silent||this.notifyApplicationAfterVisitingLocation(e.location,e.action)}visitCompleted(e){this.view.unmarkVisitDirection(),k(document.documentElement),this.notifyApplicationAfterPageLoad(e.getTimingMetrics())}locationWithActionIsSamePage(e,t){return this.navigator.locationWithActionIsSamePage(e,t)}visitScrolledToSamePageLocation(e,t){this.notifyApplicationAfterVisitingSamePageLocation(e,t)}willSubmitForm(e,t){const s=c(e,t);return this.submissionIsNavigatable(e,t)&&h(l(s),this.snapshot.rootLocation)}formSubmitted(e,t){this.navigator.submitForm(e,t)}pageBecameInteractive(){this.view.lastRenderedLocation=this.location,this.notifyApplicationAfterPageLoad()}pageLoaded(){this.history.assumeControlOfScrollRestoration()}pageWillUnload(){this.history.relinquishControlOfScrollRestoration()}receivedMessageFromStream(e){this.renderStreamMessage(e)}viewWillCacheSnapshot(){this.navigator.currentVisit?.silent||this.notifyApplicationBeforeCachingSnapshot()}allowsImmediateRender({element:e},t){const s=this.notifyApplicationBeforeRender(e,t),{defaultPrevented:r,detail:{render:n}}=s;return this.view.renderer&&n&&(this.view.renderer.renderElement=n),!r}viewRenderedSnapshot(e,t,s){this.view.lastRenderedLocation=this.history.location,this.notifyApplicationAfterRender(s)}preloadOnLoadLinksForView(e){this.preloader.preloadOnLoadLinksForView(e)}viewInvalidated(e){this.adapter.pageInvalidated(e)}frameLoaded(e){this.notifyApplicationAfterFrameLoad(e)}frameRendered(e,t){this.notifyApplicationAfterFrameRender(e,t)}applicationAllowsFollowingLinkToLocation(e,t,s){return!this.notifyApplicationAfterClickingLinkToLocation(e,t,s).defaultPrevented}applicationAllowsVisitingLocation(e){return!this.notifyApplicationBeforeVisitingLocation(e).defaultPrevented}notifyApplicationAfterClickingLinkToLocation(e,t,s){return b("turbo:click",{target:e,detail:{url:t.href,originalEvent:s},cancelable:!0})}notifyApplicationBeforeVisitingLocation(e){return b("turbo:before-visit",{detail:{url:e.href},cancelable:!0})}notifyApplicationAfterVisitingLocation(e,t){return b("turbo:visit",{detail:{url:e.href,action:t}})}notifyApplicationBeforeCachingSnapshot(){return b("turbo:before-cache")}notifyApplicationBeforeRender(e,t){return b("turbo:before-render",{detail:{newBody:e,...t},cancelable:!0})}notifyApplicationAfterRender(e){return b("turbo:render",{detail:{renderMethod:e}})}notifyApplicationAfterPageLoad(e={}){return b("turbo:load",{detail:{url:this.location.href,timing:e}})}notifyApplicationAfterVisitingSamePageLocation(e,t){dispatchEvent(new HashChangeEvent("hashchange",{oldURL:e.toString(),newURL:t.toString()}))}notifyApplicationAfterFrameLoad(e){return b("turbo:frame-load",{target:e})}notifyApplicationAfterFrameRender(e,t){return b("turbo:frame-render",{detail:{fetchResponse:e},target:t,cancelable:!0})}submissionIsNavigatable(e,t){if("off"==this.formMode)return!1;{const s=!t||this.elementIsNavigatable(t);return"optin"==this.formMode?s&&null!=e.closest('[data-turbo="true"]'):s&&this.elementIsNavigatable(e)}}elementIsNavigatable(e){const t=L(e,"[data-turbo]"),s=L(e,"turbo-frame");return this.drive||s?!t||"false"!=t.getAttribute("data-turbo"):!!t&&"true"==t.getAttribute("data-turbo")}getActionForLink(e){return N(e)||"advance"}get snapshot(){return this.view.snapshot}}(P),{cache:dt,navigator:ht}=ut;function mt(){ut.start()}function ft(e){ut.registerAdapter(e)}function pt(e,t){ut.visit(e,t)}function gt(e){ut.connectStreamSource(e)}function bt(e){ut.disconnectStreamSource(e)}function yt(e){ut.renderStreamMessage(e)}function vt(){ut.clearCache()}function jt(e){ut.setProgressBarDelay(e)}function _t(e){Q.confirmMethod=e}function wt(e){ut.setFormMode(e)}var Et=Object.freeze({__proto__:null,navigator:ht,session:ut,cache:dt,PageRenderer:st,PageSnapshot:ge,FrameRenderer:de,fetch:F,start:mt,registerAdapter:ft,visit:pt,connectStreamSource:gt,disconnectStreamSource:bt,renderStreamMessage:yt,clearCache:vt,setProgressBarDelay:jt,setConfirmMethod:_t,setFormMode:wt});class At extends Error{}function St(e){if(null!=e){const t=document.getElementById(e);if(t instanceof i)return t}}function kt(e,t){if(e){const r=e.getAttribute("src");if(null!=r&&null!=t&&(s=t,l(r).href==l(s).href))throw new Error(`Matching <turbo-frame id="${e.id}"> element has a source URL which references itself`);if(e.ownerDocument!==document&&(e=document.importNode(e,!0)),e instanceof i)return e.connectedCallback(),e.disconnectedCallback(),e}var s}const xt={after(){this.targetElements.forEach((e=>e.parentElement?.insertBefore(this.templateContent,e.nextSibling)))},append(){this.removeDuplicateTargetChildren(),this.targetElements.forEach((e=>e.append(this.templateContent)))},before(){this.targetElements.forEach((e=>e.parentElement?.insertBefore(this.templateContent,e)))},prepend(){this.removeDuplicateTargetChildren(),this.targetElements.forEach((e=>e.prepend(this.templateContent)))},remove(){this.targetElements.forEach((e=>e.remove()))},replace(){this.targetElements.forEach((e=>e.replaceWith(this.templateContent)))},update(){this.targetElements.forEach((e=>{e.innerHTML="",e.append(this.templateContent)}))},refresh(){ut.refresh(this.baseURI,this.requestId)}};class Ot extends HTMLElement{static async renderElement(e){await e.performAction()}async connectedCallback(){try{await this.render()}catch(e){}finally{this.disconnect()}}async render(){return this.renderPromise??=(async()=>{const e=this.beforeRenderEvent;this.dispatchEvent(e)&&(await y(),await e.detail.render(this))})()}disconnect(){try{this.remove()}catch{}}removeDuplicateTargetChildren(){this.duplicateChildren.forEach((e=>e.remove()))}get duplicateChildren(){const e=this.targetElements.flatMap((e=>[...e.children])).filter((e=>!!e.id)),t=[...this.templateContent?.children||[]].filter((e=>!!e.id)).map((e=>e.id));return e.filter((e=>t.includes(e.id)))}get performAction(){if(this.action){const e=xt[this.action];if(e)return e;this.#D("unknown action")}this.#D("action attribute is missing")}get targetElements(){return this.target?this.targetElementsById:this.targets?this.targetElementsByQuery:void this.#D("target or targets attribute is missing")}get templateContent(){return this.templateElement.content.cloneNode(!0)}get templateElement(){if(null===this.firstElementChild){const e=this.ownerDocument.createElement("template");return this.appendChild(e),e}if(this.firstElementChild instanceof HTMLTemplateElement)return this.firstElementChild;this.#D("first child element must be a <template> element")}get action(){return this.getAttribute("action")}get target(){return this.getAttribute("target")}get targets(){return this.getAttribute("targets")}get requestId(){return this.getAttribute("request-id")}#D(e){throw new Error(`${this.description}: ${e}`)}get description(){return(this.outerHTML.match(/<[^>]+>/)??[])[0]??"<turbo-stream>"}get beforeRenderEvent(){return new CustomEvent("turbo:before-stream-render",{bubbles:!0,cancelable:!0,detail:{newStream:this,render:Ot.renderElement}})}get targetElementsById(){const e=this.ownerDocument?.getElementById(this.target);return null!==e?[e]:[]}get targetElementsByQuery(){const e=this.ownerDocument?.querySelectorAll(this.targets);return 0!==e.length?Array.prototype.slice.call(e):[]}}class Nt extends HTMLElement{streamSource=null;connectedCallback(){this.streamSource=this.src.match(/^ws{1,2}:/)?new WebSocket(this.src):new EventSource(this.src),gt(this.streamSource)}disconnectedCallback(){this.streamSource&&(this.streamSource.close(),bt(this.streamSource))}get src(){return this.getAttribute("src")||""}}i.delegateConstructor=class{fetchResponseLoaded=e=>Promise.resolve();#H=null;#U=()=>{};#V=!1;#$=!1;#z=new Set;action=null;constructor(e){this.element=e,this.view=new oe(this,this.element),this.appearanceObserver=new Z(this,this.element),this.formLinkClickObserver=new ae(this,this.element),this.linkInterceptor=new ie(this,this.element),this.restorationIdentifier=E(),this.formSubmitObserver=new re(this,this.element)}connect(){this.#V||(this.#V=!0,this.loadingStyle==o.lazy?this.appearanceObserver.start():this.#K(),this.formLinkClickObserver.start(),this.linkInterceptor.start(),this.formSubmitObserver.start())}disconnect(){this.#V&&(this.#V=!1,this.appearanceObserver.stop(),this.formLinkClickObserver.stop(),this.linkInterceptor.stop(),this.formSubmitObserver.stop())}disabledChanged(){this.loadingStyle==o.eager&&this.#K()}sourceURLChanged(){this.#W("src")||(this.element.isConnected&&(this.complete=!1),(this.loadingStyle==o.eager||this.#$)&&this.#K())}sourceURLReloaded(){const{src:e}=this.element;return this.element.removeAttribute("complete"),this.element.src=null,this.element.src=e,this.element.loaded}loadingStyleChanged(){this.loadingStyle==o.lazy?this.appearanceObserver.start():(this.appearanceObserver.stop(),this.#K())}async#K(){this.enabled&&this.isActive&&!this.complete&&this.sourceURL&&(this.element.loaded=this.#G(l(this.sourceURL)),this.appearanceObserver.stop(),await this.element.loaded,this.#$=!0)}async loadResponse(e){(e.redirected||e.succeeded&&e.isHTML)&&(this.sourceURL=e.response.url);try{const t=await e.responseHTML;if(t){const s=_(t);ge.fromDocument(s).isVisitable?await this.#Z(e,s):await this.#X(e)}}finally{this.fetchResponseLoaded=()=>Promise.resolve()}}elementAppearedInViewport(e){this.proposeVisitIfNavigatedWithAction(e,N(e)),this.#K()}willSubmitFormLinkToLocation(e){return this.#Y(e)}submittedFormLinkToLocation(e,t,s){const r=this.#d(e);r&&s.setAttribute("data-turbo-frame",r.id)}shouldInterceptLinkClick(e,t,s){return this.#Y(e)}linkClickIntercepted(e,t){this.#J(e,t)}willSubmitForm(e,t){return e.closest("turbo-frame")==this.element&&this.#Y(e,t)}formSubmitted(e,t){this.formSubmission&&this.formSubmission.stop(),this.formSubmission=new Q(this,e,t);const{fetchRequest:s}=this.formSubmission;this.prepareRequest(s),this.formSubmission.start()}prepareRequest(e){e.headers["Turbo-Frame"]=this.id,this.currentNavigationElement?.hasAttribute("data-turbo-stream")&&e.acceptResponseType(X.contentType)}requestStarted(e){S(this.element)}requestPreventedHandlingResponse(e,t){this.#U()}async requestSucceededWithResponse(e,t){await this.loadResponse(t),this.#U()}async requestFailedWithResponse(e,t){await this.loadResponse(t),this.#U()}requestErrored(e,t){this.#U()}requestFinished(e){k(this.element)}formSubmissionStarted({formElement:e}){S(e,this.#d(e))}formSubmissionSucceededWithResponse(e,t){const s=this.#d(e.formElement,e.submitter);s.delegate.proposeVisitIfNavigatedWithAction(s,N(e.submitter,e.formElement,s)),s.delegate.loadResponse(t),e.isSafe||ut.clearCache()}formSubmissionFailedWithResponse(e,t){this.element.delegate.loadResponse(t),ut.clearCache()}formSubmissionErrored(e,t){}formSubmissionFinished({formElement:e}){k(e,this.#d(e))}allowsImmediateRender({element:e},t){const s=b("turbo:before-frame-render",{target:this.element,detail:{newFrame:e,...t},cancelable:!0}),{defaultPrevented:r,detail:{render:n}}=s;return this.view.renderer&&n&&(this.view.renderer.renderElement=n),!r}viewRenderedSnapshot(e,t,s){}preloadOnLoadLinksForView(e){ut.preloadOnLoadLinksForView(e)}viewInvalidated(){}willRenderFrame(e,t){this.previousFrameElement=e.cloneNode(!0)}visitCachedSnapshot=({element:e})=>{const t=e.querySelector("#"+this.element.id);t&&this.previousFrameElement&&t.replaceChildren(...this.previousFrameElement.children),delete this.previousFrameElement};async#Z(e,t){const s=await this.extractForeignFrameElement(t.body);if(s){const t=new ee(s),r=new de(this,this.view.snapshot,t,de.renderElement,!1,!1);this.view.renderPromise&&await this.view.renderPromise,this.changeHistory(),await this.view.render(r),this.complete=!0,ut.frameRendered(e,this.element),ut.frameLoaded(this.element),await this.fetchResponseLoaded(e)}else this.#Q(e)&&this.#ee(e)}async#G(e){const t=new $(this,H.get,e,new URLSearchParams,this.element);return this.#H?.cancel(),this.#H=t,new Promise((e=>{this.#U=()=>{this.#U=()=>{},this.#H=null,e()},t.perform()}))}#J(e,t,s){const r=this.#d(e,s);r.delegate.proposeVisitIfNavigatedWithAction(r,N(s,e,r)),this.#te(e,(()=>{r.src=t}))}proposeVisitIfNavigatedWithAction(e,t=null){if(this.action=t,this.action){const t=ge.fromElement(e).clone(),{visitCachedSnapshot:s}=e.delegate;e.delegate.fetchResponseLoaded=async r=>{if(e.src){const{statusCode:n,redirected:o}=r,i={response:{statusCode:n,redirected:o,responseHTML:await r.responseHTML},visitCachedSnapshot:s,willRender:!1,updateHistory:!1,restorationIdentifier:this.restorationIdentifier,snapshot:t};this.action&&(i.action=this.action),ut.visit(e.src,i)}}}}changeHistory(){if(this.action){const e=O(this.action);ut.history.update(e,l(this.element.src||""),this.restorationIdentifier)}}async#X(e){await this.#se(e.response)}#Q(e){this.element.setAttribute("complete","");const t=e.response;return!b("turbo:frame-missing",{target:this.element,detail:{response:t,visit:async(e,t)=>{e instanceof Response?this.#se(e):ut.visit(e,t)}},cancelable:!0}).defaultPrevented}#ee(e){this.view.missing(),this.#re(e)}#re(e){const t=`The response (${e.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;throw new At(t)}async#se(e){const t=new p(e),s=await t.responseHTML,{location:r,redirected:n,statusCode:o}=t;return ut.visit(r,{response:{redirected:n,statusCode:o,responseHTML:s}})}#d(e,t){return St(A("data-turbo-frame",t,e)||this.element.getAttribute("target"))??this.element}async extractForeignFrameElement(e){let t;const s=CSS.escape(this.id);try{if(t=kt(e.querySelector(`turbo-frame#${s}`),this.sourceURL),t)return t;if(t=kt(e.querySelector(`turbo-frame[src][recurse~=${s}]`),this.sourceURL),t)return await t.loaded,await this.extractForeignFrameElement(t)}catch(r){return new i}return null}#ne(e,t){return h(l(c(e,t)),this.rootLocation)}#Y(e,t){const s=A("data-turbo-frame",t,e)||this.element.getAttribute("target");if(e instanceof HTMLFormElement&&!this.#ne(e,t))return!1;if(!this.enabled||"_top"==s)return!1;if(s){const e=St(s);if(e)return!e.disabled}return!!ut.elementIsNavigatable(e)&&!(t&&!ut.elementIsNavigatable(t))}get id(){return this.element.id}get enabled(){return!this.element.disabled}get sourceURL(){if(this.element.src)return this.element.src}set sourceURL(e){this.#oe("src",(()=>{this.element.src=e??null}))}get loadingStyle(){return this.element.loading}get isLoading(){return void 0!==this.formSubmission||void 0!==this.#U()}get complete(){return this.element.hasAttribute("complete")}set complete(e){e?this.element.setAttribute("complete",""):this.element.removeAttribute("complete")}get isActive(){return this.element.isActive&&this.#V}get rootLocation(){const e=this.element.ownerDocument.querySelector('meta[name="turbo-root"]');return l(e?.content??"/")}#W(e){return this.#z.has(e)}#oe(e,t){this.#z.add(e),t(),this.#z.delete(e)}#te(e,t){this.currentNavigationElement=e,t(),delete this.currentNavigationElement}},void 0===customElements.get("turbo-frame")&&customElements.define("turbo-frame",i),void 0===customElements.get("turbo-stream")&&customElements.define("turbo-stream",Ot),void 0===customElements.get("turbo-stream-source")&&customElements.define("turbo-stream-source",Nt),(()=>{let e=document.currentScript;if(e&&!e.hasAttribute("data-turbo-suppress-warning"))for(e=e.parentElement;e;){if(e==document.body)return;e=e.parentElement}})(),window.Turbo={...Et,StreamActions:xt},mt()},"./node_modules/@symfony/stimulus-bridge/dist/index.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{startStimulusApp:()=>i});var r=s("./node_modules/@hotwired/stimulus/dist/stimulus.js"),n=s("./node_modules/@symfony/stimulus-bridge/dist/webpack/loader.js!./assets/controllers.json");function o(e){return e.keys().map((t=>function(e,t){const s=function(e){const t=(e.match(/^(?:\.\/)?(.+)(?:[_-]controller\..+?)$/)||[])[1];if(t)return t.replace(/_/g,"-").replace(/\//g,"--")}(t);if(s)return function(e,t){const s=e.default;if("function"==typeof s)return{identifier:t,controllerConstructor:s}}(e(t),s)}(e,t))).filter((e=>e))}function i(e){const t=r.Application.start();t.debug=!0,e&&t.load(o(e));for(const s in n.default)n.default.hasOwnProperty(s)&&t.register(s,n.default[s]);return t}},"./node_modules/@symfony/stimulus-bridge/dist/webpack/loader.js!./assets/controllers.json":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/@symfony/ux-live-component/dist/live_controller.js"),n=(s("./node_modules/@symfony/ux-live-component/dist/live.min.css"),s("./node_modules/@symfony/ux-turbo/dist/turbo_controller.js"));const o={live:r.default,"symfony--ux-turbo--turbo-core":n.default}},"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/clickable_controller.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});s("./node_modules/core-js/modules/es.symbol.js"),s("./node_modules/core-js/modules/es.symbol.description.js"),s("./node_modules/core-js/modules/es.symbol.iterator.js"),s("./node_modules/core-js/modules/es.symbol.to-primitive.js"),s("./node_modules/core-js/modules/es.error.cause.js"),s("./node_modules/core-js/modules/es.error.to-string.js"),s("./node_modules/core-js/modules/es.array.iterator.js"),s("./node_modules/core-js/modules/es.date.to-primitive.js"),s("./node_modules/core-js/modules/es.function.bind.js"),s("./node_modules/core-js/modules/es.number.constructor.js"),s("./node_modules/core-js/modules/es.object.create.js"),s("./node_modules/core-js/modules/es.object.define-property.js"),s("./node_modules/core-js/modules/es.object.get-prototype-of.js"),s("./node_modules/core-js/modules/es.object.set-prototype-of.js"),s("./node_modules/core-js/modules/es.object.to-string.js"),s("./node_modules/core-js/modules/es.reflect.construct.js"),s("./node_modules/core-js/modules/es.string.iterator.js"),s("./node_modules/core-js/modules/web.dom-collections.iterator.js");var r=s("./node_modules/@hotwired/stimulus/dist/stimulus.js"),n=s("./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){for(var s=0;s<t.length;s++){var r=t[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,h(r.key),r)}}function l(e,t,s){return t=c(t),function(e,t){if(t&&("object"==o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,a()?Reflect.construct(t,s||[],c(e).constructor):t.apply(e,s))}function a(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(a=function(){return!!e})()}function c(e){return c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},c(e)}function u(e,t){return u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},u(e,t)}function d(e,t,s){return(t=h(t))in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function h(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,t||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,t,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}(t,e),s=t,(r=[{key:"connect",value:function(){}},{key:"visit",value:function(){this.urlValue&&n.visit(this.urlValue)}}])&&i(s.prototype,r),o&&i(s,o),Object.defineProperty(s,"prototype",{writable:!1}),s;var s,r,o}(r.Controller);d(m,"targets",["elements"]),d(m,"values",{url:String,target:String})},"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/menu_toggler_controller.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});s("./node_modules/core-js/modules/es.symbol.js"),s("./node_modules/core-js/modules/es.symbol.description.js"),s("./node_modules/core-js/modules/es.symbol.iterator.js"),s("./node_modules/core-js/modules/es.symbol.to-primitive.js"),s("./node_modules/core-js/modules/es.error.cause.js"),s("./node_modules/core-js/modules/es.error.to-string.js"),s("./node_modules/core-js/modules/es.array.iterator.js"),s("./node_modules/core-js/modules/es.date.to-primitive.js"),s("./node_modules/core-js/modules/es.function.bind.js"),s("./node_modules/core-js/modules/es.number.constructor.js"),s("./node_modules/core-js/modules/es.object.create.js"),s("./node_modules/core-js/modules/es.object.define-property.js"),s("./node_modules/core-js/modules/es.object.get-prototype-of.js"),s("./node_modules/core-js/modules/es.object.set-prototype-of.js"),s("./node_modules/core-js/modules/es.object.to-string.js"),s("./node_modules/core-js/modules/es.reflect.construct.js"),s("./node_modules/core-js/modules/es.string.iterator.js"),s("./node_modules/core-js/modules/web.dom-collections.iterator.js");function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){for(var s=0;s<t.length;s++){var r=t[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,c(r.key),r)}}function o(e,t,s){return t=l(t),function(e,t){if(t&&("object"==r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,i()?Reflect.construct(t,s||[],l(e).constructor):t.apply(e,s))}function i(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(i=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function a(e,t){return a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},a(e,t)}function c(e){var t=function(e,t){if("object"!=r(e)||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var n=s.call(e,t||"default");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==r(t)?t:t+""}var u,d,h,m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,t,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(t,e),s=t,(r=[{key:"connect",value:function(){}},{key:"toggle",value:function(){this.menuTarget.classList.toggle("-translate-x-full"),this.menuTarget.classList.toggle("shadow-2xl")}}])&&n(s.prototype,r),i&&n(s,i),Object.defineProperty(s,"prototype",{writable:!1}),s;var s,r,i}(s("./node_modules/@hotwired/stimulus/dist/stimulus.js").Controller);u=m,h=["menu","button"],(d=c(d="targets"))in u?Object.defineProperty(u,d,{value:h,enumerable:!0,configurable:!0,writable:!0}):u[d]=h},"./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/quill_controller.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>p});s("./node_modules/core-js/modules/es.symbol.js"),s("./node_modules/core-js/modules/es.symbol.description.js"),s("./node_modules/core-js/modules/es.symbol.iterator.js"),s("./node_modules/core-js/modules/es.symbol.to-primitive.js"),s("./node_modules/core-js/modules/es.error.cause.js"),s("./node_modules/core-js/modules/es.error.to-string.js"),s("./node_modules/core-js/modules/es.array.concat.js"),s("./node_modules/core-js/modules/es.array.filter.js"),s("./node_modules/core-js/modules/es.array.for-each.js"),s("./node_modules/core-js/modules/es.array.iterator.js"),s("./node_modules/core-js/modules/es.array.push.js"),s("./node_modules/core-js/modules/es.date.to-primitive.js"),s("./node_modules/core-js/modules/es.function.bind.js"),s("./node_modules/core-js/modules/es.number.constructor.js"),s("./node_modules/core-js/modules/es.object.create.js"),s("./node_modules/core-js/modules/es.object.define-properties.js"),s("./node_modules/core-js/modules/es.object.define-property.js"),s("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),s("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),s("./node_modules/core-js/modules/es.object.get-prototype-of.js"),s("./node_modules/core-js/modules/es.object.keys.js"),s("./node_modules/core-js/modules/es.object.set-prototype-of.js"),s("./node_modules/core-js/modules/es.object.to-string.js"),s("./node_modules/core-js/modules/es.reflect.construct.js"),s("./node_modules/core-js/modules/es.string.iterator.js"),s("./node_modules/core-js/modules/web.dom-collections.for-each.js"),s("./node_modules/core-js/modules/web.dom-collections.iterator.js");var r=s("./node_modules/@hotwired/stimulus/dist/stimulus.js"),n=s("./node_modules/quill/quill.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function l(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?i(Object(s),!0).forEach((function(t){m(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function a(e,t){for(var s=0;s<t.length;s++){var r=t[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,f(r.key),r)}}function c(e,t,s){return t=d(t),function(e,t){if(t&&("object"==o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,s||[],d(e).constructor):t.apply(e,s))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}function h(e,t){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},h(e,t)}function m(e,t,s){return(t=f(t))in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function f(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,t||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}var p=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];return m(e=c(this,t,[].concat(r)),"DEFAULT_OPTIONS",{theme:"snow",modules:{toolbar:[[{header:"2"},{header:"3"}],["bold","italic","underline","strike"],["blockquote","code-block"],[{list:"ordered"},{list:"bullet"},{indent:"-1"},{indent:"+1"}],["link","image","blockquote"],[{color:[]},{background:[]}],[{align:[]}],["clean"]],clipboard:{matcher:null},history:{delay:2e3,maxStack:500,userOnly:!0},"image-tooltip":!0,"link-tooltip":!0},readOnly:!1,formats:["header","font","size","bold","italic","underline","strike","blockquote","list","bullet","indent","link","image","color","background","align"]}),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(t,e),s=t,(r=[{key:"connect",value:function(){this.configure()}},{key:"configure",value:function(){var e=this,t=l(l({},this.DEFAULT_OPTIONS),this.optionsValue);this.editor=new n.default(this.editorTarget,t),this.editor.on("text-change",(function(){e.inputTarget.value=e.editor.root.innerHTML}))}}])&&a(s.prototype,r),o&&a(s,o),Object.defineProperty(s,"prototype",{writable:!1}),s;var s,r,o}(r.Controller);m(p,"targets",["editor","input"]),m(p,"values",{options:Object})},"./node_modules/@symfony/ux-live-component/dist/live_controller.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Component:()=>T,default:()=>Y,getComponent:()=>u});var r=s("./node_modules/@hotwired/stimulus/dist/stimulus.js");function n(e){const t=[];if(!e)return t;let s="",r="",n=[],o=[],i="action";const l=function(){if(s)return s;if(0===t.length)throw new Error("Could not find any directives");return t[t.length-1].action},a=function(){t.push({action:s,args:n,modifiers:o,getString:()=>e}),s="",r="",n=[],o=[],i="action"},c=function(){n.push(r.trim()),r=""},u=function(){if(n.length>1)throw new Error(`The modifier "${s}()" does not support multiple arguments.`);o.push({name:s,value:n.length>0?n[0]:null}),s="",n=[],i="action"};for(let d=0;d<e.length;d++){const t=e[d];switch(i){case"action":if("("===t){i="arguments";break}if(" "===t){s&&a();break}if("|"===t){u();break}s+=t;break;case"arguments":if(")"===t){c(),i="after_arguments";break}if(","===t){c();break}r+=t;break;case"after_arguments":if("|"===t){u();break}if(" "!==t)throw new Error(`Missing space after ${l()}()`);a()}}switch(i){case"action":case"after_arguments":s&&a();break;default:throw new Error(`Did you forget to add a closing ")" after "${s}"?`)}return t}function o(e){const t=[];return e.forEach((e=>{var s;t.push(...(s=e,s.replace(/[\s]+/g," ").trim()).split(" "))})),t}function i(e){return e.replace(/\[]$/,"").split("[").map((function(e){return e.replace("]","")})).join(".")}function l(e){return e.innerHTML?e.outerHTML.slice(0,e.outerHTML.indexOf(e.innerHTML)):e.outerHTML}let a=new WeakMap,c=new Map;const u=function(e){return new Promise(((t,s)=>{let r=0;const n=setInterval((()=>{const o=a.get(e);o&&(clearInterval(n),t(o)),r++,r>10&&(clearInterval(n),s(new Error(`Component not found for element ${l(e)}`)))}),5)}))},d=function(e){const t=[];return c.forEach(((s,r)=>{if(e===r)return;if(!e.element.contains(r.element))return;let n=!1;c.forEach(((e,t)=>{n||t!==r&&t.element.contains(r.element)&&(n=!0)})),t.push(r)})),t};function h(e,t){if(e instanceof HTMLInputElement){if("checkbox"===e.type){const s=p(e,!1);if(null!==s){const r=t.get(s.action);if(Array.isArray(r))return y(e,r);if(Object(r)===r)return y(e,Object.values(r))}return e.hasAttribute("value")?e.checked?e.getAttribute("value"):null:e.checked}return v(e)}return e instanceof HTMLSelectElement?e.multiple?Array.from(e.selectedOptions).map((e=>e.value)):e.value:e.dataset.value?e.dataset.value:"value"in e?e.value:e.hasAttribute("value")?e.getAttribute("value"):null}function m(e,t){if(e instanceof HTMLInputElement){if("file"===e.type)return;if("radio"===e.type)return void(e.checked=e.value==t);if("checkbox"===e.type){if(Array.isArray(t)){let s=!1;t.forEach((t=>{t==e.value&&(s=!0)})),e.checked=s}else e.hasAttribute("value")?e.checked=e.value==t:e.checked=t;return}}if(e instanceof HTMLSelectElement){const s=[].concat(t).map((e=>e+""));Array.from(e.options).forEach((e=>{e.selected=s.includes(e.value)}))}else t=void 0===t?"":t,e.value=t}function f(e){if(!e.dataset.model)return[];const t=n(e.dataset.model);return t.forEach((t=>{if(t.args.length>0)throw new Error(`The data-model="${e.dataset.model}" format is invalid: it does not support passing arguments to the model.`);t.action=i(t.action)})),t}function p(e,t=!0){const s=f(e);if(s.length>0)return s[0];if(e.getAttribute("name")){const t=e.closest("form");if(t&&"model"in t.dataset){const s=n(t.dataset.model||"*")[0];if(s.args.length>0)throw new Error(`The data-model="${t.dataset.model}" format is invalid: it does not support passing arguments to the model.`);return s.action=i(e.getAttribute("name")),s}}if(!t)return null;throw new Error(`Cannot determine the model name for "${l(e)}": the element must either have a "data-model" (or "name" attribute living inside a <form data-model="*">).`)}function g(e,t){if(t.element===e)return!0;if(!t.element.contains(e))return!1;let s=!1;return d(t).forEach((t=>{s||(t.element===e||t.element.contains(e))&&(s=!0)})),!s}function b(e){const t=e.cloneNode(!0);if(!(t instanceof HTMLElement))throw new Error("Could not clone element");return t}const y=function(e,t){const s=[...t],r=v(e),n=t.indexOf(r);return e.checked?(-1===n&&s.push(r),s):(n>-1&&s.splice(n,1),s)},v=function(e){return e.dataset.value?e.dataset.value:e.value};const j=function(e,t){const s=JSON.parse(JSON.stringify(e));let r=s;const n=t.split(".");for(let o=0;o<n.length-1;o++)r=r[n[o]];return{currentLevelData:r,finalData:s,finalKey:n[n.length-1],parts:n}};class _{constructor(e){this.props={},this.dirtyProps={},this.pendingProps={},this.updatedPropsFromParent={},this.props=e}get(e){const t=i(e);return void 0!==this.dirtyProps[t]?this.dirtyProps[t]:void 0!==this.pendingProps[t]?this.pendingProps[t]:void 0!==this.props[t]?this.props[t]:function(e,t){const{currentLevelData:s,finalKey:r}=j(e,t);if(void 0!==s)return s[r]}(this.props,t)}has(e){return void 0!==this.get(e)}set(e,t){const s=i(e);return this.get(s)!==t&&(this.dirtyProps[s]=t,!0)}getOriginalProps(){return Object.assign({},this.props)}getDirtyProps(){return Object.assign({},this.dirtyProps)}getUpdatedPropsFromParent(){return Object.assign({},this.updatedPropsFromParent)}flushDirtyPropsToPending(){this.pendingProps=Object.assign({},this.dirtyProps),this.dirtyProps={}}reinitializeAllProps(e){this.props=e,this.updatedPropsFromParent={},this.pendingProps={}}pushPendingPropsBackToDirty(){this.dirtyProps=Object.assign(Object.assign({},this.pendingProps),this.dirtyProps),this.pendingProps={}}storeNewPropsFromParent(e){let t=!1;for(const[s,r]of Object.entries(e)){this.get(s)!==r&&(t=!0)}return t&&(this.updatedPropsFromParent=e),t}}var w=function(){let e=new Set,t={morphStyle:"outerHTML",callbacks:{beforeNodeAdded:c,afterNodeAdded:c,beforeNodeMorphed:c,afterNodeMorphed:c,beforeNodeRemoved:c,afterNodeRemoved:c,beforeAttributeUpdated:c},head:{style:"merge",shouldPreserve:function(e){return"true"===e.getAttribute("im-preserve")},shouldReAppend:function(e){return"true"===e.getAttribute("im-re-append")},shouldRemove:c,afterHeadMorphed:c}};function s(e,t,r){if(r.head.block){let n=e.querySelector("head"),o=t.querySelector("head");if(n&&o){let i=a(o,n,r);return void Promise.all(i).then((function(){s(e,t,Object.assign(r,{head:{block:!1,ignore:!0}}))}))}}if("innerHTML"===r.morphStyle)return o(t,e,r),e.children;if("outerHTML"===r.morphStyle||null==r.morphStyle){let s=function(e,t,s){let r;r=e.firstChild;let n=r,o=0;for(;r;){let e=p(r,t,s);e>o&&(n=r,o=e),r=r.nextSibling}return n}(t,e,r),o=s?.previousSibling,i=s?.nextSibling,l=n(e,s,r);return s?function(e,t,s){let r=[],n=[];for(;null!=e;)r.push(e),e=e.previousSibling;for(;r.length>0;){let e=r.pop();n.push(e),t.parentElement.insertBefore(e,t)}n.push(t);for(;null!=s;)r.push(s),n.push(s),s=s.nextSibling;for(;r.length>0;)t.parentElement.insertBefore(r.pop(),t.nextSibling);return n}(o,l,i):[]}throw"Do not understand how to morph style "+r.morphStyle}function r(e,t){return t.ignoreActiveValue&&e===document.activeElement}function n(e,t,s){if(!s.ignoreActive||e!==document.activeElement)return null==t?!1===s.callbacks.beforeNodeRemoved(e)?e:(e.remove(),s.callbacks.afterNodeRemoved(e),null):d(e,t)?(!1===s.callbacks.beforeNodeMorphed(e,t)||(e instanceof HTMLHeadElement&&s.head.ignore||(e instanceof HTMLHeadElement&&"morph"!==s.head.style?a(t,e,s):(!function(e,t,s){let n=e.nodeType;if(1===n){const r=e.attributes,n=t.attributes;for(const e of r)i(e.name,t,"update",s)||t.getAttribute(e.name)!==e.value&&t.setAttribute(e.name,e.value);for(let o=n.length-1;0<=o;o--){const r=n[o];i(r.name,t,"remove",s)||(e.hasAttribute(r.name)||t.removeAttribute(r.name))}}8!==n&&3!==n||t.nodeValue!==e.nodeValue&&(t.nodeValue=e.nodeValue);r(t,s)||function(e,t,s){if(e instanceof HTMLInputElement&&t instanceof HTMLInputElement&&"file"!==e.type){let r=e.value,n=t.value;l(e,t,"checked",s),l(e,t,"disabled",s),e.hasAttribute("value")?r!==n&&(i("value",t,"update",s)||(t.setAttribute("value",r),t.value=r)):i("value",t,"remove",s)||(t.value="",t.removeAttribute("value"))}else if(e instanceof HTMLOptionElement)l(e,t,"selected",s);else if(e instanceof HTMLTextAreaElement&&t instanceof HTMLTextAreaElement){let r=e.value,n=t.value;if(i("value",t,"update",s))return;r!==n&&(t.value=r),t.firstChild&&t.firstChild.nodeValue!==r&&(t.firstChild.nodeValue=r)}}(e,t,s)}(t,e,s),r(e,s)||o(t,e,s))),s.callbacks.afterNodeMorphed(e,t)),e):!1===s.callbacks.beforeNodeRemoved(e)||!1===s.callbacks.beforeNodeAdded(t)?e:(e.parentElement.replaceChild(t,e),s.callbacks.afterNodeAdded(t),s.callbacks.afterNodeRemoved(e),t)}function o(e,t,s){let r,o=e.firstChild,i=t.firstChild;for(;o;){if(r=o,o=r.nextSibling,null==i){if(!1===s.callbacks.beforeNodeAdded(r))return;t.appendChild(r),s.callbacks.afterNodeAdded(r),v(s,r);continue}if(u(r,i,s)){n(i,r,s),i=i.nextSibling,v(s,r);continue}let l=m(e,t,r,i,s);if(l){i=h(i,l,s),n(l,r,s),v(s,r);continue}let a=f(e,t,r,i,s);if(a)i=h(i,a,s),n(a,r,s),v(s,r);else{if(!1===s.callbacks.beforeNodeAdded(r))return;t.insertBefore(r,i),s.callbacks.afterNodeAdded(r),v(s,r)}}for(;null!==i;){let e=i;i=i.nextSibling,g(e,s)}}function i(e,t,s,r){return!("value"!==e||!r.ignoreActiveValue||t!==document.activeElement)||!1===r.callbacks.beforeAttributeUpdated(e,t,s)}function l(e,t,s,r){if(e[s]!==t[s]){let n=i(s,t,"update",r);n||(t[s]=e[s]),e[s]?n||t.setAttribute(s,e[s]):i(s,t,"remove",r)||t.removeAttribute(s)}}function a(e,t,s){let r=[],n=[],o=[],i=[],l=s.head.style,a=new Map;for(const u of e.children)a.set(u.outerHTML,u);for(const u of t.children){let e=a.has(u.outerHTML),t=s.head.shouldReAppend(u),r=s.head.shouldPreserve(u);e||r?t?n.push(u):(a.delete(u.outerHTML),o.push(u)):"append"===l?t&&(n.push(u),i.push(u)):!1!==s.head.shouldRemove(u)&&n.push(u)}i.push(...a.values());let c=[];for(const u of i){let e=document.createRange().createContextualFragment(u.outerHTML).firstChild;if(!1!==s.callbacks.beforeNodeAdded(e)){if(e.href||e.src){let t=null,s=new Promise((function(e){t=e}));e.addEventListener("load",(function(){t()})),c.push(s)}t.appendChild(e),s.callbacks.afterNodeAdded(e),r.push(e)}}for(const u of n)!1!==s.callbacks.beforeNodeRemoved(u)&&(t.removeChild(u),s.callbacks.afterNodeRemoved(u));return s.head.afterHeadMorphed(t,{added:r,kept:o,removed:n}),c}function c(){}function u(e,t,s){return null!=e&&null!=t&&(e.nodeType===t.nodeType&&e.tagName===t.tagName&&(""!==e.id&&e.id===t.id||j(s,e,t)>0))}function d(e,t){return null!=e&&null!=t&&(e.nodeType===t.nodeType&&e.tagName===t.tagName)}function h(e,t,s){for(;e!==t;){let t=e;e=e.nextSibling,g(t,s)}return v(s,t),t.nextSibling}function m(e,t,s,r,n){let o=j(n,s,t);if(o>0){let t=r,i=0;for(;null!=t;){if(u(s,t,n))return t;if(i+=j(n,t,e),i>o)return null;t=t.nextSibling}}return null}function f(e,t,s,r,n){let o=r,i=s.nextSibling,l=0;for(;null!=o;){if(j(n,o,e)>0)return null;if(d(s,o))return o;if(d(i,o)&&(l++,i=i.nextSibling,l>=2))return null;o=o.nextSibling}return o}function p(e,t,s){return d(e,t)?.5+j(s,e,t):0}function g(e,t){v(t,e),!1!==t.callbacks.beforeNodeRemoved(e)&&(e.remove(),t.callbacks.afterNodeRemoved(e))}function b(e,t){return!e.deadIds.has(t)}function y(t,s,r){return(t.idMap.get(r)||e).has(s)}function v(t,s){let r=t.idMap.get(s)||e;for(const e of r)t.deadIds.add(e)}function j(t,s,r){let n=t.idMap.get(s)||e,o=0;for(const e of n)b(t,e)&&y(t,e,r)&&++o;return o}function _(e,t){let s=e.parentElement,r=e.querySelectorAll("[id]");for(const n of r){let e=n;for(;e!==s&&null!=e;){let s=t.get(e);null==s&&(s=new Set,t.set(e,s)),s.add(n.id),e=e.parentElement}}}function w(e,t){let s=new Map;return _(e,s),_(t,s),s}return{morph:function(e,r,n={}){e instanceof Document&&(e=e.documentElement),"string"==typeof r&&(r=function(e){let t=new DOMParser,s=e.replace(/<svg(\s[^>]*>|>)([\s\S]*?)<\/svg>/gim,"");if(s.match(/<\/html>/)||s.match(/<\/head>/)||s.match(/<\/body>/)){let r=t.parseFromString(e,"text/html");if(s.match(/<\/html>/))return r.generatedByIdiomorph=!0,r;{let e=r.firstChild;return e?(e.generatedByIdiomorph=!0,e):null}}{let s=t.parseFromString("<body><template>"+e+"</template></body>","text/html").body.querySelector("template").content;return s.generatedByIdiomorph=!0,s}}(r));let o=function(e){if(null==e){return document.createElement("div")}if(e.generatedByIdiomorph)return e;if(e instanceof Node){const t=document.createElement("div");return t.append(e),t}{const t=document.createElement("div");for(const s of[...e])t.append(s);return t}}(r),i=function(e,s,r){return r=function(e){let s={};return Object.assign(s,t),Object.assign(s,e),s.callbacks={},Object.assign(s.callbacks,t.callbacks),Object.assign(s.callbacks,e.callbacks),s.head={},Object.assign(s.head,t.head),Object.assign(s.head,e.head),s}(r),{target:e,newContent:s,config:r,morphStyle:r.morphStyle,ignoreActive:r.ignoreActive,ignoreActiveValue:r.ignoreActiveValue,idMap:w(e,s),deadIds:new Set,callbacks:r.callbacks,head:r.head}}(e,o,n);return s(e,o,i)},defaults:t}}();function E(e){e instanceof HTMLInputElement&&"file"===e.type||("value"in e?e.setAttribute("value",e.value):e.hasAttribute("value")&&e.setAttribute("value","")),Array.from(e.children).forEach((e=>{E(e)}))}class A{constructor(e,t){this.elementEventListeners=[{event:"input",callback:e=>this.handleInputEvent(e)}],this.component=e,this.modelElementResolver=t,this.unsyncedInputs=new S}activate(){this.elementEventListeners.forEach((({event:e,callback:t})=>{this.component.element.addEventListener(e,t)}))}deactivate(){this.elementEventListeners.forEach((({event:e,callback:t})=>{this.component.element.removeEventListener(e,t)}))}markModelAsSynced(e){this.unsyncedInputs.markModelAsSynced(e)}handleInputEvent(e){const t=e.target;t&&this.updateModelFromElement(t)}updateModelFromElement(e){if(!g(e,this.component))return;if(!(e instanceof HTMLElement))throw new Error("Could not update model for non HTMLElement");const t=this.modelElementResolver.getModelName(e);this.unsyncedInputs.add(e,t)}getUnsyncedInputs(){return this.unsyncedInputs.allUnsyncedInputs()}getUnsyncedModels(){return Array.from(this.unsyncedInputs.getUnsyncedModelNames())}resetUnsyncedFields(){this.unsyncedInputs.resetUnsyncedFields()}}class S{constructor(){this.unsyncedNonModelFields=[],this.unsyncedModelNames=[],this.unsyncedModelFields=new Map}add(e,t=null){if(t)return this.unsyncedModelFields.set(t,e),void(this.unsyncedModelNames.includes(t)||this.unsyncedModelNames.push(t));this.unsyncedNonModelFields.push(e)}resetUnsyncedFields(){this.unsyncedModelFields.forEach(((e,t)=>{this.unsyncedModelNames.includes(t)||this.unsyncedModelFields.delete(t)}))}allUnsyncedInputs(){return[...this.unsyncedNonModelFields,...this.unsyncedModelFields.values()]}markModelAsSynced(e){const t=this.unsyncedModelNames.indexOf(e);-1!==t&&this.unsyncedModelNames.splice(t,1)}getUnsyncedModelNames(){return this.unsyncedModelNames}}class k{constructor(){this.hooks=new Map}register(e,t){const s=this.hooks.get(e)||[];s.push(t),this.hooks.set(e,s)}unregister(e,t){const s=this.hooks.get(e)||[],r=s.indexOf(t);-1!==r&&(s.splice(r,1),this.hooks.set(e,s))}triggerHook(e,...t){(this.hooks.get(e)||[]).forEach((e=>e(...t)))}}class x{constructor(e){this.response=e}async getBody(){return this.body||(this.body=await this.response.text()),this.body}}class O{constructor(){this.changedItems=new Map,this.removedItems=new Map}setItem(e,t,s){if(this.removedItems.has(e)){const s=this.removedItems.get(e);if(this.removedItems.delete(e),s.original===t)return}if(this.changedItems.has(e)){const s=this.changedItems.get(e);return s.original===t?void this.changedItems.delete(e):void this.changedItems.set(e,{original:s.original,new:t})}this.changedItems.set(e,{original:s,new:t})}removeItem(e,t){let s=t;if(this.changedItems.has(e)){if(s=this.changedItems.get(e).original,this.changedItems.delete(e),null===s)return}this.removedItems.has(e)||this.removedItems.set(e,{original:s})}getChangedItems(){return Array.from(this.changedItems,(([e,{new:t}])=>({name:e,value:t})))}getRemovedItems(){return Array.from(this.removedItems.keys())}isEmpty(){return 0===this.changedItems.size&&0===this.removedItems.size}}class N{constructor(){this.addedClasses=new Set,this.removedClasses=new Set,this.styleChanges=new O,this.attributeChanges=new O}addClass(e){this.removedClasses.delete(e)||this.addedClasses.add(e)}removeClass(e){this.addedClasses.delete(e)||this.removedClasses.add(e)}addStyle(e,t,s){this.styleChanges.setItem(e,t,s)}removeStyle(e,t){this.styleChanges.removeItem(e,t)}addAttribute(e,t,s){this.attributeChanges.setItem(e,t,s)}removeAttribute(e,t){this.attributeChanges.removeItem(e,t)}getAddedClasses(){return[...this.addedClasses]}getRemovedClasses(){return[...this.removedClasses]}getChangedStyles(){return this.styleChanges.getChangedItems()}getRemovedStyles(){return this.styleChanges.getRemovedItems()}getChangedAttributes(){return this.attributeChanges.getChangedItems()}getRemovedAttributes(){return this.attributeChanges.getRemovedItems()}applyToElement(e){e.classList.add(...this.addedClasses),e.classList.remove(...this.removedClasses),this.styleChanges.getChangedItems().forEach((t=>{e.style.setProperty(t.name,t.value)})),this.styleChanges.getRemovedItems().forEach((t=>{e.style.removeProperty(t)})),this.attributeChanges.getChangedItems().forEach((t=>{e.setAttribute(t.name,t.value)})),this.attributeChanges.getRemovedItems().forEach((t=>{e.removeAttribute(t)}))}isEmpty(){return 0===this.addedClasses.size&&0===this.removedClasses.size&&this.styleChanges.isEmpty()&&this.attributeChanges.isEmpty()}}class q{constructor(e,t){this.changedElements=new WeakMap,this.changedElementsCount=0,this.addedElements=[],this.removedElements=[],this.isStarted=!1,this.element=e,this.shouldTrackChangeCallback=t,this.mutationObserver=new MutationObserver(this.onMutations.bind(this))}start(){this.isStarted||(this.mutationObserver.observe(this.element,{childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0}),this.isStarted=!0)}stop(){this.isStarted&&(this.mutationObserver.disconnect(),this.isStarted=!1)}getChangedElement(e){return this.changedElements.has(e)?this.changedElements.get(e):null}getAddedElements(){return this.addedElements}wasElementAdded(e){return this.addedElements.includes(e)}handlePendingChanges(){this.onMutations(this.mutationObserver.takeRecords())}onMutations(e){const t=new WeakMap;for(const s of e){const e=s.target;if(!this.shouldTrackChangeCallback(e))continue;if(this.isElementAddedByTranslation(e))continue;let r=!1;for(const t of this.addedElements)if(t.contains(e)){r=!0;break}if(!r)switch(s.type){case"childList":this.handleChildListMutation(s);break;case"attributes":t.has(e)||t.set(e,[]),t.get(e).includes(s.attributeName)||(this.handleAttributeMutation(s),t.set(e,[...t.get(e),s.attributeName]))}}}handleChildListMutation(e){e.addedNodes.forEach((e=>{e instanceof Element&&(this.removedElements.includes(e)?this.removedElements.splice(this.removedElements.indexOf(e),1):this.isElementAddedByTranslation(e)||this.addedElements.push(e))})),e.removedNodes.forEach((e=>{e instanceof Element&&(this.addedElements.includes(e)?this.addedElements.splice(this.addedElements.indexOf(e),1):this.removedElements.push(e))}))}handleAttributeMutation(e){const t=e.target;this.changedElements.has(t)||(this.changedElements.set(t,new N),this.changedElementsCount++);const s=this.changedElements.get(t);switch(e.attributeName){case"class":this.handleClassAttributeMutation(e,s);break;case"style":this.handleStyleAttributeMutation(e,s);break;default:this.handleGenericAttributeMutation(e,s)}s.isEmpty()&&(this.changedElements.delete(t),this.changedElementsCount--)}handleClassAttributeMutation(e,t){const s=e.target,r=e.oldValue,n=r?r.split(" "):[];n.forEach(((e,t)=>{const s=e.trim();""!==s?n[t]=s:n.splice(t,1)}));const o=[].slice.call(s.classList),i=o.filter((e=>!n.includes(e))),l=n.filter((e=>!o.includes(e)));i.forEach((e=>{t.addClass(e)})),l.forEach((e=>{t.removeClass(e)}))}handleStyleAttributeMutation(e,t){const s=e.target,r=e.oldValue||"",n=this.extractStyles(r),o=s.getAttribute("style")||"",i=this.extractStyles(o),l=Object.keys(i).filter((e=>void 0===n[e]||n[e]!==i[e])),a=Object.keys(n).filter((e=>!i[e]));l.forEach((e=>{t.addStyle(e,i[e],void 0===n[e]?null:n[e])})),a.forEach((e=>{t.removeStyle(e,n[e])}))}handleGenericAttributeMutation(e,t){const s=e.attributeName,r=e.target;let n=e.oldValue,o=r.getAttribute(s);if(n===s&&(n=""),o===s&&(o=""),r.hasAttribute(s))o!==n&&t.addAttribute(s,r.getAttribute(s),e.oldValue);else{if(null===n)return;t.removeAttribute(s,e.oldValue)}}extractStyles(e){const t={};return e.split(";").forEach((e=>{const s=e.split(":");if(1===s.length)return;const r=s[0].trim();t[r]=s.slice(1).join(":").trim()})),t}isElementAddedByTranslation(e){return"FONT"===e.tagName&&"vertical-align: inherit;"===e.getAttribute("style")}}class T{constructor(e,t,s,r,n,o,i){this.fingerprint="",this.defaultDebounce=150,this.backendRequest=null,this.pendingActions=[],this.pendingFiles={},this.isRequestPending=!1,this.requestDebounceTimeout=null,this.element=e,this.name=t,this.backend=o,this.elementDriver=i,this.id=n,this.listeners=new Map,r.forEach((e=>{var t;this.listeners.has(e.event)||this.listeners.set(e.event,[]),null===(t=this.listeners.get(e.event))||void 0===t||t.push(e.action)})),this.valueStore=new _(s),this.unsyncedInputsTracker=new A(this,i),this.hooks=new k,this.resetPromise(),this.externalMutationTracker=new q(this.element,(e=>g(e,this))),this.externalMutationTracker.start()}addPlugin(e){e.attachToComponent(this)}connect(){var e;e=this,a.set(e.element,e),c.set(e,e.name),this.hooks.triggerHook("connect",this),this.unsyncedInputsTracker.activate(),this.externalMutationTracker.start()}disconnect(){var e;e=this,a.delete(e.element),c.delete(e),this.hooks.triggerHook("disconnect",this),this.clearRequestDebounceTimeout(),this.unsyncedInputsTracker.deactivate(),this.externalMutationTracker.stop()}on(e,t){this.hooks.register(e,t)}off(e,t){this.hooks.unregister(e,t)}set(e,t,s=!1,r=!1){const n=this.nextRequestPromise,o=i(e);if(!this.valueStore.has(o))throw new Error(`Invalid model name "${e}".`);const l=this.valueStore.set(o,t);return this.hooks.triggerHook("model:set",e,t,this),this.unsyncedInputsTracker.markModelAsSynced(o),s&&l&&this.debouncedStartRequest(r),n}getData(e){const t=i(e);if(!this.valueStore.has(t))throw new Error(`Invalid model "${e}".`);return this.valueStore.get(t)}action(e,t={},s=!1){const r=this.nextRequestPromise;return this.pendingActions.push({name:e,args:t}),this.debouncedStartRequest(s),r}files(e,t){this.pendingFiles[e]=t}render(){const e=this.nextRequestPromise;return this.tryStartingRequest(),e}getUnsyncedModels(){return this.unsyncedInputsTracker.getUnsyncedModels()}emit(e,t,s=null){return this.performEmit(e,t,!1,s)}emitUp(e,t,s=null){return this.performEmit(e,t,!0,s)}emitSelf(e,t){return this.doEmit(e,t)}performEmit(e,t,s,r){(function(e,t,s){const r=[];return c.forEach(((n,o)=>{(!t||e!==o&&o.element.contains(e.element))&&(s&&n!==s||r.push(o))})),r})(this,s,r).forEach((s=>{s.doEmit(e,t)}))}doEmit(e,t){if(!this.listeners.has(e))return;(this.listeners.get(e)||[]).forEach((e=>{this.action(e,t,1)}))}isTurboEnabled(){return"undefined"!=typeof Turbo&&!this.element.closest('[data-turbo="false"]')}tryStartingRequest(){this.backendRequest?this.isRequestPending=!0:this.performRequest()}performRequest(){const e=this.nextRequestPromiseResolve;this.resetPromise(),this.unsyncedInputsTracker.resetUnsyncedFields();const t={};for(const[r,n]of Object.entries(this.pendingFiles))n.files&&(t[r]=n.files);const s={props:this.valueStore.getOriginalProps(),actions:this.pendingActions,updated:this.valueStore.getDirtyProps(),children:{},updatedPropsFromParent:this.valueStore.getUpdatedPropsFromParent(),files:t};this.hooks.triggerHook("request:started",s),this.backendRequest=this.backend.makeRequest(s.props,s.actions,s.updated,s.children,s.updatedPropsFromParent,s.files),this.hooks.triggerHook("loading.state:started",this.element,this.backendRequest),this.pendingActions=[],this.valueStore.flushDirtyPropsToPending(),this.isRequestPending=!1,this.backendRequest.promise.then((async t=>{const s=new x(t),r=await s.getBody();for(const e of Object.values(this.pendingFiles))e.value="";const n=s.response.headers;if("application/vnd.live-component+html"!==n.get("Content-Type")&&!n.get("X-Live-Redirect")){const n={displayError:!0};return this.valueStore.pushPendingPropsBackToDirty(),this.hooks.triggerHook("response:error",s,n),n.displayError&&this.renderError(r),this.backendRequest=null,e(s),t}return this.processRerender(r,s),this.backendRequest=null,e(s),this.isRequestPending&&(this.isRequestPending=!1,this.performRequest()),t}))}processRerender(e,t){const s={shouldRender:!0};if(this.hooks.triggerHook("render:started",e,t,s),!s.shouldRender)return;if(t.response.headers.get("Location"))return void(this.isTurboEnabled()?Turbo.visit(t.response.headers.get("Location")):window.location.href=t.response.headers.get("Location")||"");this.hooks.triggerHook("loading.state:finished",this.element);const r={};let n;Object.keys(this.valueStore.getDirtyProps()).forEach((e=>{r[e]=this.valueStore.get(e)}));try{if(n=function(e){const t=document.createElement("template");if(e=e.trim(),t.innerHTML=e,t.content.childElementCount>1)throw new Error(`Component HTML contains ${t.content.childElementCount} elements, but only 1 root element is allowed.`);const s=t.content.firstElementChild;if(!s)throw new Error("Child not found");if(!(s instanceof HTMLElement))throw new Error(`Created element is not an HTMLElement: ${e.trim()}`);return s}(e),!n.matches("[data-controller~=live]"))throw new Error("A live component template must contain a single root controller element.")}catch(a){throw a}this.externalMutationTracker.handlePendingChanges(),this.externalMutationTracker.stop(),function(e,t,s,r,n){const o=[],i=new Map,l=(e,t)=>{const s=i.get(e);if(!(s instanceof HTMLElement))throw new Error(`Original element with id ${e} not found`);if(o.push(e),!t)return null;const r=b(s);return s.replaceWith(r),r};t.querySelectorAll("[data-live-preserve]").forEach((t=>{const s=t.id;if(!s)throw new Error("The data-live-preserve attribute requires an id attribute to be set on the element");const r=e.querySelector(`#${s}`);if(!(r instanceof HTMLElement))throw new Error(`The element with id "${s}" was not found in the original HTML`);t.removeAttribute("data-live-preserve"),i.set(s,r),function(e,t){for(let s=0;s<e.attributes.length;s++){const r=e.attributes[s];t.setAttribute(r.name,r.value)}}(t,r)})),w.morph(e,t,{callbacks:{beforeNodeMorphed:(t,o)=>{if(!(t instanceof Element&&o instanceof Element))return!0;if(t===e)return!0;if(t.id&&i.has(t.id)){if(t.id===o.id)return!1;const e=l(t.id,!0);if(!e)throw new Error("missing clone");return w.morph(e,o),!1}if(t instanceof HTMLElement&&o instanceof HTMLElement){if(void 0!==t.__x){if(!window.Alpine)throw new Error("Unable to access Alpine.js though the global window.Alpine variable. Please make sure Alpine.js is loaded before Symfony UX LiveComponent.");if("function"!=typeof window.Alpine.morph)throw new Error("Unable to access Alpine.js morph function. Please make sure the Alpine.js Morph plugin is installed and loaded, see https://alpinejs.dev/plugins/morph for more information.");window.Alpine.morph(t.__x,o)}if(n.wasElementAdded(t))return t.insertAdjacentElement("afterend",o),!1;s.includes(t)&&m(o,r(t)),t===document.activeElement&&t!==document.body&&null!==p(t,!1)&&m(o,r(t));const e=n.getChangedElement(t);if(e&&e.applyToElement(o),"OPTION"!==t.nodeName.toUpperCase()&&t.isEqualNode(o)){const e=b(t);E(e);const s=b(o);if(E(s),e.isEqualNode(s))return!1}}return t.hasAttribute("data-skip-morph")||t.id&&t.id!==o.id?(t.innerHTML=o.innerHTML,!0):!(t.parentElement&&t.parentElement.hasAttribute("data-skip-morph")||t.hasAttribute("data-live-ignore"))},beforeNodeRemoved:e=>!(e instanceof HTMLElement&&(e.id&&i.has(e.id)?(l(e.id,!1),0):n.wasElementAdded(e)||e.hasAttribute("data-live-ignore")))}}),o.forEach((t=>{const s=e.querySelector(`#${t}`),r=i.get(t);if(!(s instanceof HTMLElement&&r instanceof HTMLElement))throw new Error("Missing elements.");s.replaceWith(r)}))}(this.element,n,this.unsyncedInputsTracker.getUnsyncedInputs(),(e=>h(e,this.valueStore)),this.externalMutationTracker),this.externalMutationTracker.start();const o=this.elementDriver.getComponentProps();this.valueStore.reinitializeAllProps(o);const i=this.elementDriver.getEventsToEmit(),l=this.elementDriver.getBrowserEventsToDispatch();Object.keys(r).forEach((e=>{this.valueStore.set(e,r[e])})),i.forEach((({event:e,data:t,target:s,componentName:r})=>{"up"!==s?"self"!==s?this.emit(e,t,r):this.emitSelf(e,t):this.emitUp(e,t,r)})),l.forEach((({event:e,payload:t})=>{this.element.dispatchEvent(new CustomEvent(e,{detail:t,bubbles:!0}))})),this.hooks.triggerHook("render:finished",this)}calculateDebounce(e){return!0===e?this.defaultDebounce:!1===e?0:e}clearRequestDebounceTimeout(){this.requestDebounceTimeout&&(clearTimeout(this.requestDebounceTimeout),this.requestDebounceTimeout=null)}debouncedStartRequest(e){this.clearRequestDebounceTimeout(),this.requestDebounceTimeout=window.setTimeout((()=>{this.render()}),this.calculateDebounce(e))}renderError(e){let t=document.getElementById("live-component-error");t?t.innerHTML="":(t=document.createElement("div"),t.id="live-component-error",t.style.padding="50px",t.style.backgroundColor="rgba(0, 0, 0, .5)",t.style.zIndex="100000",t.style.position="fixed",t.style.top="0px",t.style.bottom="0px",t.style.left="0px",t.style.right="0px",t.style.display="flex",t.style.flexDirection="column");const s=document.createElement("iframe");s.style.borderRadius="5px",s.style.flexGrow="1",t.appendChild(s),document.body.prepend(t),document.body.style.overflow="hidden",s.contentWindow&&(s.contentWindow.document.open(),s.contentWindow.document.write(e),s.contentWindow.document.close());const r=e=>{e&&(e.outerHTML=""),document.body.style.overflow="visible"};t.addEventListener("click",(()=>r(t))),t.setAttribute("tabindex","0"),t.addEventListener("keydown",(e=>{"Escape"===e.key&&r(t)})),t.focus()}resetPromise(){this.nextRequestPromise=new Promise((e=>{this.nextRequestPromiseResolve=e}))}_updateFromParentProps(e){this.valueStore.storeNewPropsFromParent(e)&&this.render()}}class L{constructor(e,t,s){this.isResolved=!1,this.promise=e,this.promise.then((e=>(this.isResolved=!0,e))),this.actions=t,this.updatedModels=s}containsOneOfActions(e){return this.actions.filter((t=>e.includes(t))).length>0}areAnyModelsUpdated(e){return this.updatedModels.filter((t=>e.includes(t))).length>0}}class C{constructor(e,t="post",s=null){this.url=e,this.method=t,this.csrfToken=s}buildRequest(e,t,s,r,n,o){const i=this.url.split("?");let[l]=i;const[,a]=i,c=new URLSearchParams(a||""),u={headers:{Accept:"application/vnd.live-component+html","X-Requested-With":"XMLHttpRequest"}},d=Object.entries(o).reduce(((e,t)=>e+t.length),0),h=Object.keys(r).length>0;if(0===t.length&&0===d&&"get"===this.method&&this.willDataFitInUrl(JSON.stringify(e),JSON.stringify(s),c,JSON.stringify(r),JSON.stringify(n)))c.set("props",JSON.stringify(e)),c.set("updated",JSON.stringify(s)),Object.keys(n).length>0&&c.set("propsFromParent",JSON.stringify(n)),h&&c.set("children",JSON.stringify(r)),u.method="GET";else{u.method="POST";const i={props:e,updated:s};Object.keys(n).length>0&&(i.propsFromParent=n),h&&(i.children=r),this.csrfToken&&(t.length||d)&&(u.headers["X-CSRF-TOKEN"]=this.csrfToken),t.length>0&&(1===t.length?(i.args=t[0].args,l+=`/${encodeURIComponent(t[0].name)}`):(l+="/_batch",i.actions=t));const a=new FormData;a.append("data",JSON.stringify(i));for(const[e,t]of Object.entries(o)){const s=t.length;for(let r=0;r<s;++r)a.append(e,t[r])}u.body=a}const m=c.toString();return{url:`${l}${m.length>0?`?${m}`:""}`,fetchOptions:u}}willDataFitInUrl(e,t,s,r,n){return(new URLSearchParams(e+t+r+n).toString()+s.toString()).length<1500}}class R{constructor(e,t="post",s=null){this.requestBuilder=new C(e,t,s)}makeRequest(e,t,s,r,n,o){const{url:i,fetchOptions:l}=this.requestBuilder.buildRequest(e,t,s,r,n,o);return new L(fetch(i,l),t.map((e=>e.name)),Object.keys(s))}}class M{constructor(e){this.controller=e}getModelName(e){const t=p(e,!1);return t?t.action:null}getComponentProps(){return this.controller.propsValue}getEventsToEmit(){return this.controller.eventsToEmitValue}getBrowserEventsToDispatch(){return this.controller.eventsToDispatchValue}}class I{attachToComponent(e){e.on("loading.state:started",((t,s)=>{this.startLoading(e,t,s)})),e.on("loading.state:finished",(t=>{this.finishLoading(e,t)})),this.finishLoading(e,e.element)}startLoading(e,t,s){this.handleLoadingToggle(e,!0,t,s)}finishLoading(e,t){this.handleLoadingToggle(e,!1,t,null)}handleLoadingToggle(e,t,s,r){t?this.addAttributes(s,["busy"]):this.removeAttributes(s,["busy"]),this.getLoadingDirectives(e,s).forEach((({element:e,directives:s})=>{t?this.addAttributes(e,["data-live-is-loading"]):this.removeAttributes(e,["data-live-is-loading"]),s.forEach((s=>{this.handleLoadingDirective(e,t,s,r)}))}))}handleLoadingDirective(e,t,s,r){const n=P(s.action,t),o=[],i=[];let l=0;const a=new Map;if(a.set("delay",(e=>{t&&(l=e.value?parseInt(e.value):200)})),a.set("action",(e=>{if(!e.value)throw new Error(`The "action" in data-loading must have an action name - e.g. action(foo). It's missing for "${s.getString()}"`);o.push(e.value)})),a.set("model",(e=>{if(!e.value)throw new Error(`The "model" in data-loading must have an action name - e.g. model(foo). It's missing for "${s.getString()}"`);i.push(e.value)})),s.modifiers.forEach((e=>{var t;if(!a.has(e.name))throw new Error(`Unknown modifier "${e.name}" used in data-loading="${s.getString()}". Available modifiers are: ${Array.from(a.keys()).join(", ")}.`);(null!==(t=a.get(e.name))&&void 0!==t?t:()=>{})(e)})),t&&o.length>0&&r&&!r.containsOneOfActions(o))return;if(t&&i.length>0&&r&&!r.areAnyModelsUpdated(i))return;let c;switch(n){case"show":c=()=>this.showElement(e);break;case"hide":c=()=>this.hideElement(e);break;case"addClass":c=()=>this.addClass(e,s.args);break;case"removeClass":c=()=>this.removeClass(e,s.args);break;case"addAttribute":c=()=>this.addAttributes(e,s.args);break;case"removeAttribute":c=()=>this.removeAttributes(e,s.args);break;default:throw new Error(`Unknown data-loading action "${n}"`)}l?window.setTimeout((()=>{r&&!r.isResolved&&c()}),l):c()}getLoadingDirectives(e,t){const s=[];let r=[...Array.from(t.querySelectorAll("[data-loading]"))];return r=r.filter((t=>g(t,e))),t.hasAttribute("data-loading")&&(r=[t,...r]),r.forEach((e=>{if(!(e instanceof HTMLElement||e instanceof SVGElement))throw new Error("Invalid Element Type");const t=n(e.dataset.loading||"show");s.push({element:e,directives:t})})),s}showElement(e){e.style.display="revert"}hideElement(e){e.style.display="none"}addClass(e,t){e.classList.add(...o(t))}removeClass(e,t){e.classList.remove(...o(t)),0===e.classList.length&&e.removeAttribute("class")}addAttributes(e,t){t.forEach((t=>{e.setAttribute(t,"")}))}removeAttributes(e,t){t.forEach((t=>{e.removeAttribute(t)}))}}const P=function(e,t){switch(e){case"show":return t?"show":"hide";case"hide":return t?"hide":"show";case"addClass":return t?"addClass":"removeClass";case"removeClass":return t?"removeClass":"addClass";case"addAttribute":return t?"addAttribute":"removeAttribute";case"removeAttribute":return t?"removeAttribute":"addAttribute"}throw new Error(`Unknown data-loading action "${e}"`)};class B{attachToComponent(e){e.on("model:set",(t=>{this.handleModelSet(t,e.valueStore)}))}handleModelSet(e,t){if(t.has("validatedFields")){const s=[...t.get("validatedFields")];s.includes(e)||s.push(e),t.set("validatedFields",s)}}}class F{constructor(){this.isConnected=!1}attachToComponent(e){e.on("render:started",((e,t,s)=>{this.isConnected||(s.shouldRender=!1)})),e.on("connect",(()=>{this.isConnected=!0})),e.on("disconnect",(()=>{this.isConnected=!1}))}}class D{constructor(e){this.isPollingActive=!0,this.pollingIntervals=[],this.component=e}addPoll(e,t){this.polls.push({actionName:e,duration:t}),this.isPollingActive&&this.initiatePoll(e,t)}startAllPolling(){this.isPollingActive||(this.isPollingActive=!0,this.polls.forEach((({actionName:e,duration:t})=>{this.initiatePoll(e,t)})))}stopAllPolling(){this.isPollingActive=!1,this.pollingIntervals.forEach((e=>{clearInterval(e)}))}clearPolling(){this.stopAllPolling(),this.polls=[],this.startAllPolling()}initiatePoll(e,t){let s;s="$render"===e?()=>{this.component.render()}:()=>{this.component.action(e,{},0)};const r=setInterval((()=>{s()}),t);this.pollingIntervals.push(r)}}class H{attachToComponent(e){this.element=e.element,this.pollingDirector=new D(e),this.initializePolling(),e.on("connect",(()=>{this.pollingDirector.startAllPolling()})),e.on("disconnect",(()=>{this.pollingDirector.stopAllPolling()})),e.on("render:finished",(()=>{this.initializePolling()}))}addPoll(e,t){this.pollingDirector.addPoll(e,t)}clearPolling(){this.pollingDirector.clearPolling()}initializePolling(){if(this.clearPolling(),void 0===this.element.dataset.poll)return;n(this.element.dataset.poll||"$render").forEach((e=>{let t=2e3;e.modifiers.forEach((e=>{if("delay"===e.name)e.value&&(t=parseInt(e.value))})),this.addPoll(e.action,t)}))}}class U{attachToComponent(e){this.synchronizeValueOfModelFields(e),e.on("render:finished",(()=>{this.synchronizeValueOfModelFields(e)}))}synchronizeValueOfModelFields(e){e.element.querySelectorAll("[data-model]").forEach((t=>{if(!(t instanceof HTMLElement))throw new Error("Invalid element using data-model.");if(t instanceof HTMLFormElement)return;if(!g(t,e))return;const s=p(t);if(!s)return;const r=s.action;e.getUnsyncedModels().includes(r)||(e.valueStore.has(r)&&m(t,e.valueStore.get(r)),t instanceof HTMLSelectElement&&!t.multiple&&e.valueStore.set(r,h(t,e.valueStore)))}))}}function V(e){let t=!0,s=null,r=!1;e.modifiers.forEach((n=>{switch(n.name){case"on":if(!n.value)throw new Error(`The "on" modifier in ${e.getString()} requires a value - e.g. on(change).`);if(!["input","change"].includes(n.value))throw new Error(`The "on" modifier in ${e.getString()} only accepts the arguments "input" or "change".`);s=n.value;break;case"norender":t=!1;break;case"debounce":r=!n.value||parseInt(n.value);break;default:throw new Error(`Unknown modifier "${n.name}" in data-model="${e.getString()}".`)}}));const[n,o]=e.action.split(":");return{modelName:n,innerModelName:o||null,shouldRender:t,debounce:r,targetEventName:s}}function $(e){if(null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length)return!0;if("object"!=typeof e)return!1;for(const t of Object.keys(e))if(!$(e[t]))return!1;return!0}function z(e){const t=(e,s={},r="")=>(Object.entries(e).forEach((([e,n])=>{const o=""===r?e:`${r}[${e}]`;""===r&&$(n)?s[o]="":null!==n&&("object"==typeof n?s=Object.assign(Object.assign({},s),t(n,s,o)):s[o]=encodeURIComponent(n).replace(/%20/g,"+").replace(/%2C/g,","))})),s),s=t(e);return Object.entries(s).map((([e,t])=>`${e}=${t}`)).join("&")}class K extends URL{has(e){const t=this.getData();return Object.keys(t).includes(e)}set(e,t){const s=this.getData();s[e]=t,this.setData(s)}get(e){return this.getData()[e]}remove(e){const t=this.getData();delete t[e],this.setData(t)}getData(){return this.search?function(e){if(""===(e=e.replace("?","")))return{};const t=(e,s,r)=>{const[n,o,...i]=e.split(".");if(!o)return r[e]=s;void 0===r[n]&&(r[n]=Number.isNaN(Number.parseInt(o))?{}:[]),t([o,...i].join("."),s,r[n])},s=e.split("&").map((e=>e.split("="))),r={};return s.forEach((([e,s])=>{if(s=decodeURIComponent(s.replace(/\+/g,"%20")),e.includes("[")){if(""===s)return;const n=e.replace(/\[/g,".").replace(/]/g,"");t(n,s,r)}else r[e]=s})),r}(this.search):{}}setData(e){this.search=z(e)}}class W{static replace(e){history.replaceState(history.state,"",e)}}class G{constructor(e){this.mapping=e}attachToComponent(e){e.on("render:finished",(e=>{const t=new K(window.location.href),s=t.toString();Object.entries(this.mapping).forEach((([s,r])=>{const n=e.valueStore.get(s);t.set(r.name,n)})),s!==t.toString()&&W.replace(t)}))}}class Z{constructor(e){this.parentModelBindings=[],this.component=e;const t=f(this.component.element);this.parentModelBindings=t.map(V)}attachToComponent(e){e.on("request:started",(e=>{e.children=this.getChildrenFingerprints()})),e.on("model:set",((e,t)=>{this.notifyParentModelChange(e,t)}))}getChildrenFingerprints(){const e={};return this.getChildren().forEach((t=>{if(!t.id)throw new Error("missing id");e[t.id]={fingerprint:t.fingerprint,tag:t.element.tagName.toLowerCase()}})),e}notifyParentModelChange(e,t){const s=function(e){let t=e.element.parentElement;for(;t;){const e=a.get(t);if(e)return e;t=t.parentElement}return null}(this.component);s&&this.parentModelBindings.forEach((r=>{(r.innerModelName||"value")===e&&s.set(r.modelName,t,r.shouldRender,r.debounce)}))}getChildren(){return d(this.component)}}class X{constructor(){this.intersectionObserver=null}attachToComponent(e){var t;"lazy"===(null===(t=e.element.attributes.getNamedItem("loading"))||void 0===t?void 0:t.value)&&(e.on("connect",(()=>{this.getObserver().observe(e.element)})),e.on("disconnect",(()=>{var t;null===(t=this.intersectionObserver)||void 0===t||t.unobserve(e.element)})))}getObserver(){return this.intersectionObserver||(this.intersectionObserver=new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(e.target.dispatchEvent(new CustomEvent("live:appear")),t.unobserve(e.target))}))}))),this.intersectionObserver}}class Y extends r.Controller{constructor(){super(...arguments),this.pendingActionTriggerModelElement=null,this.elementEventListeners=[{event:"input",callback:e=>this.handleInputEvent(e)},{event:"change",callback:e=>this.handleChangeEvent(e)}],this.pendingFiles={}}initialize(){this.mutationObserver=new MutationObserver(this.onMutations.bind(this)),this.createComponent()}connect(){this.connectComponent(),this.mutationObserver.observe(this.element,{attributes:!0})}disconnect(){this.disconnectComponent(),this.mutationObserver.disconnect()}update(e){if("input"===e.type||"change"===e.type)throw new Error(`Since LiveComponents 2.3, you no longer need data-action="live#update" on form elements. Found on element: ${l(e.currentTarget)}`);this.updateModelFromElementEvent(e.currentTarget,null)}action(e){const t=e.params;if(!t.action)throw new Error(`No action name provided on element: ${l(e.currentTarget)}. Did you forget to add the "data-live-action-param" attribute?`);const s=t.action,r=Object.assign({},t);delete r.action;const o=n(s);let i=!1;o.forEach((t=>{let s={};const n=new Map;n.set("stop",(()=>{e.stopPropagation()})),n.set("self",(()=>{e.target,e.currentTarget})),n.set("debounce",(e=>{i=!e.value||parseInt(e.value)})),n.set("files",(e=>{e.value?this.pendingFiles[e.value]&&(s[e.value]=this.pendingFiles[e.value]):s=this.pendingFiles})),t.modifiers.forEach((e=>{var t;if(n.has(e.name)){(null!==(t=n.get(e.name))&&void 0!==t?t:()=>{})(e)}else;}));for(const[e,r]of Object.entries(s))r.files&&this.component.files(e,r),delete this.pendingFiles[e];this.component.action(t.action,r,i),p(e.currentTarget,!1)&&(this.pendingActionTriggerModelElement=e.currentTarget)}))}$render(){return this.component.render()}emit(e){this.getEmitDirectives(e).forEach((({name:e,data:t,nameMatch:s})=>{this.component.emit(e,t,s)}))}emitUp(e){this.getEmitDirectives(e).forEach((({name:e,data:t,nameMatch:s})=>{this.component.emitUp(e,t,s)}))}emitSelf(e){this.getEmitDirectives(e).forEach((({name:e,data:t})=>{this.component.emitSelf(e,t)}))}$updateModel(e,t,s=!0,r=!0){return this.component.set(e,t,s,r)}propsUpdatedFromParentValueChanged(){this.component._updateFromParentProps(this.propsUpdatedFromParentValue)}fingerprintValueChanged(){this.component.fingerprint=this.fingerprintValue}getEmitDirectives(e){const t=e.params;if(!t.event)throw new Error(`No event name provided on element: ${l(e.currentTarget)}. Did you forget to add the "data-live-event-param" attribute?`);const s=t.event,r=Object.assign({},t);delete r.event;const o=n(s),i=[];return o.forEach((e=>{let t=null;e.modifiers.forEach((e=>{if("name"!==e.name)throw new Error(`Unknown modifier ${e.name} in event "${s}".`);t=e.value})),i.push({name:e.action,data:r,nameMatch:t})})),i}createComponent(){const e=this.element.id||null;var t;this.component=new T(this.element,this.nameValue,this.propsValue,this.listenersValue,e,Y.backendFactory(this),new M(this)),this.proxiedComponent=(t=this.component,new Proxy(t,{get(e,t){if(t in e||"string"!=typeof t){if("function"==typeof e[t]){const s=e[t];return(...t)=>s.apply(e,t)}return Reflect.get(e,t)}return e.valueStore.has(t)?e.getData(t):s=>e.action.apply(e,[t,s])},set:(e,t,s)=>t in e?(e[t]=s,!0):(e.set(t,s),!0)})),this.element.__component=this.proxiedComponent,this.hasDebounceValue&&(this.component.defaultDebounce=this.debounceValue);[new I,new X,new B,new F,new H,new U,new G(this.queryMappingValue),new Z(this.component)].forEach((e=>{this.component.addPlugin(e)}))}connectComponent(){this.component.connect(),this.mutationObserver.observe(this.element,{attributes:!0}),this.elementEventListeners.forEach((({event:e,callback:t})=>{this.component.element.addEventListener(e,t)})),this.dispatchEvent("connect")}disconnectComponent(){this.component.disconnect(),this.elementEventListeners.forEach((({event:e,callback:t})=>{this.component.element.removeEventListener(e,t)})),this.dispatchEvent("disconnect")}handleInputEvent(e){const t=e.target;t&&this.updateModelFromElementEvent(t,"input")}handleChangeEvent(e){const t=e.target;t&&this.updateModelFromElementEvent(t,"change")}updateModelFromElementEvent(e,t){var s;if(!g(e,this.component))return;if(!(e instanceof HTMLElement))throw new Error("Could not update model for non HTMLElement");if(e instanceof HTMLInputElement&&"file"===e.type){const t=e.name;(null===(s=e.files)||void 0===s?void 0:s.length)?this.pendingFiles[t]=e:this.pendingFiles[t]&&delete this.pendingFiles[t]}const r=p(e,!1);if(!r)return;const n=V(r);if(n.targetEventName||(n.targetEventName="input"),this.pendingActionTriggerModelElement===e&&(n.shouldRender=!1),"change"===t&&"input"===n.targetEventName&&(n.targetEventName="change"),t&&n.targetEventName!==t)return;!1===n.debounce&&("input"===n.targetEventName?n.debounce=!0:n.debounce=0);const o=h(e,this.component.valueStore);this.component.set(n.modelName,o,n.shouldRender,n.debounce)}dispatchEvent(e,t={},s=!0,r=!1){t.controller=this,t.component=this.proxiedComponent,this.dispatch(e,{detail:t,prefix:"live",cancelable:r,bubbles:s})}onMutations(e){e.forEach((e=>{"attributes"===e.type&&"id"===e.attributeName&&this.element.id!==this.component.id&&(this.disconnectComponent(),this.createComponent(),this.connectComponent())}))}}Y.values={name:String,url:String,props:{type:Object,default:{}},propsUpdatedFromParent:{type:Object,default:{}},csrf:String,listeners:{type:Array,default:[]},eventsToEmit:{type:Array,default:[]},eventsToDispatch:{type:Array,default:[]},debounce:{type:Number,default:150},fingerprint:{type:String,default:""},requestMethod:{type:String,default:"post"},queryMapping:{type:Object,default:{}}},Y.backendFactory=e=>new R(e.urlValue,e.requestMethodValue,e.csrfValue)},"./node_modules/@symfony/ux-turbo/dist/turbo_controller.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/@hotwired/stimulus/dist/stimulus.js");s("./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js");class n extends r.Controller{}},"./assets/bootstrap.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{app:()=>r});var r=(0,s("./node_modules/@symfony/stimulus-bridge/dist/index.js").startStimulusApp)(s("./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$"))},"./node_modules/fast-diff/diff.js":e=>{var t=-1,s=1,r=0;function n(e,p,g,b,y){if(e===p)return e?[[r,e]]:[];if(null!=g){var j=function(e,t,s){var r="number"==typeof s?{index:s,length:0}:s.oldRange,n="number"==typeof s?null:s.newRange,o=e.length,i=t.length;if(0===r.length&&(null===n||0===n.length)){var l=r.index,a=e.slice(0,l),c=e.slice(l),u=n?n.index:null,d=l+i-o;if((null===u||u===d)&&!(d<0||d>i)){var h=t.slice(0,d);if((p=t.slice(d))===c){var m=Math.min(l,d);if((b=a.slice(0,m))===(j=h.slice(0,m)))return v(b,a.slice(m),h.slice(m),c)}}if(null===u||u===l){var f=l,p=(h=t.slice(0,f),t.slice(f));if(h===a){var g=Math.min(o-f,i-f);if((y=c.slice(c.length-g))===(_=p.slice(p.length-g)))return v(a,c.slice(0,c.length-g),p.slice(0,p.length-g),y)}}}if(r.length>0&&n&&0===n.length){var b=e.slice(0,r.index),y=e.slice(r.index+r.length);if(!(i<(m=b.length)+(g=y.length))){var j=t.slice(0,m),_=t.slice(i-g);if(b===j&&y===_)return v(b,e.slice(m,o-g),t.slice(m,i-g),y)}}return null}(e,p,g);if(j)return j}var _=i(e,p),w=e.substring(0,_);_=a(e=e.substring(_),p=p.substring(_));var E=e.substring(e.length-_),A=function(e,l){var c;if(!e)return[[s,l]];if(!l)return[[t,e]];var u=e.length>l.length?e:l,d=e.length>l.length?l:e,h=u.indexOf(d);if(-1!==h)return c=[[s,u.substring(0,h)],[r,d],[s,u.substring(h+d.length)]],e.length>l.length&&(c[0][0]=c[2][0]=t),c;if(1===d.length)return[[t,e],[s,l]];var m=function(e,t){var s=e.length>t.length?e:t,r=e.length>t.length?t:e;if(s.length<4||2*r.length<s.length)return null;function n(e,t,s){for(var r,n,o,l,c=e.substring(s,s+Math.floor(e.length/4)),u=-1,d="";-1!==(u=t.indexOf(c,u+1));){var h=i(e.substring(s),t.substring(u)),m=a(e.substring(0,s),t.substring(0,u));d.length<m+h&&(d=t.substring(u-m,u)+t.substring(u,u+h),r=e.substring(0,s-m),n=e.substring(s+h),o=t.substring(0,u-m),l=t.substring(u+h))}return 2*d.length>=e.length?[r,n,o,l,d]:null}var o,l,c,u,d,h=n(s,r,Math.ceil(s.length/4)),m=n(s,r,Math.ceil(s.length/2));if(!h&&!m)return null;o=m?h&&h[4].length>m[4].length?h:m:h;e.length>t.length?(l=o[0],c=o[1],u=o[2],d=o[3]):(u=o[0],d=o[1],l=o[2],c=o[3]);var f=o[4];return[l,c,u,d,f]}(e,l);if(m){var f=m[0],p=m[1],g=m[2],b=m[3],y=m[4],v=n(f,g),j=n(p,b);return v.concat([[r,y]],j)}return function(e,r){for(var n=e.length,i=r.length,l=Math.ceil((n+i)/2),a=l,c=2*l,u=new Array(c),d=new Array(c),h=0;h<c;h++)u[h]=-1,d[h]=-1;u[a+1]=0,d[a+1]=0;for(var m=n-i,f=m%2!=0,p=0,g=0,b=0,y=0,v=0;v<l;v++){for(var j=-v+p;j<=v-g;j+=2){for(var _=a+j,w=(x=j===-v||j!==v&&u[_-1]<u[_+1]?u[_+1]:u[_-1]+1)-j;x<n&&w<i&&e.charAt(x)===r.charAt(w);)x++,w++;if(u[_]=x,x>n)g+=2;else if(w>i)p+=2;else if(f){if((S=a+m-j)>=0&&S<c&&-1!==d[S])if(x>=(A=n-d[S]))return o(e,r,x,w)}}for(var E=-v+b;E<=v-y;E+=2){for(var A,S=a+E,k=(A=E===-v||E!==v&&d[S-1]<d[S+1]?d[S+1]:d[S-1]+1)-E;A<n&&k<i&&e.charAt(n-A-1)===r.charAt(i-k-1);)A++,k++;if(d[S]=A,A>n)y+=2;else if(k>i)b+=2;else if(!f){if((_=a+m-E)>=0&&_<c&&-1!==u[_]){var x;w=a+(x=u[_])-_;if(x>=(A=n-A))return o(e,r,x,w)}}}}return[[t,e],[s,r]]}(e,l)}(e=e.substring(0,e.length-_),p=p.substring(0,p.length-_));return w&&A.unshift([r,w]),E&&A.push([r,E]),f(A,y),b&&function(e){var n=!1,o=[],i=0,p=null,g=0,b=0,y=0,v=0,j=0;for(;g<e.length;)e[g][0]==r?(o[i++]=g,b=v,y=j,v=0,j=0,p=e[g][1]):(e[g][0]==s?v+=e[g][1].length:j+=e[g][1].length,p&&p.length<=Math.max(b,y)&&p.length<=Math.max(v,j)&&(e.splice(o[i-1],0,[t,p]),e[o[i-1]+1][0]=s,i--,g=--i>0?o[i-1]:-1,b=0,y=0,v=0,j=0,p=null,n=!0)),g++;n&&f(e);(function(e){function t(e,t){if(!e||!t)return 6;var s=e.charAt(e.length-1),r=t.charAt(0),n=s.match(c),o=r.match(c),i=n&&s.match(u),l=o&&r.match(u),a=i&&s.match(d),f=l&&r.match(d),p=a&&e.match(h),g=f&&t.match(m);return p||g?5:a||f?4:n&&!i&&l?3:i||l?2:n||o?1:0}var s=1;for(;s<e.length-1;){if(e[s-1][0]==r&&e[s+1][0]==r){var n=e[s-1][1],o=e[s][1],i=e[s+1][1],l=a(n,o);if(l){var f=o.substring(o.length-l);n=n.substring(0,n.length-l),o=f+o.substring(0,o.length-l),i=f+i}for(var p=n,g=o,b=i,y=t(n,o)+t(o,i);o.charAt(0)===i.charAt(0);){n+=o.charAt(0),o=o.substring(1)+i.charAt(0),i=i.substring(1);var v=t(n,o)+t(o,i);v>=y&&(y=v,p=n,g=o,b=i)}e[s-1][1]!=p&&(p?e[s-1][1]=p:(e.splice(s-1,1),s--),e[s][1]=g,b?e[s+1][1]=b:(e.splice(s+1,1),s--))}s++}})(e),g=1;for(;g<e.length;){if(e[g-1][0]==t&&e[g][0]==s){var _=e[g-1][1],w=e[g][1],E=l(_,w),A=l(w,_);E>=A?(E>=_.length/2||E>=w.length/2)&&(e.splice(g,0,[r,w.substring(0,E)]),e[g-1][1]=_.substring(0,_.length-E),e[g+1][1]=w.substring(E),g++):(A>=_.length/2||A>=w.length/2)&&(e.splice(g,0,[r,_.substring(0,A)]),e[g-1][0]=s,e[g-1][1]=w.substring(0,w.length-A),e[g+1][0]=t,e[g+1][1]=_.substring(A),g++),g++}g++}}(A),A}function o(e,t,s,r){var o=e.substring(0,s),i=t.substring(0,r),l=e.substring(s),a=t.substring(r),c=n(o,i),u=n(l,a);return c.concat(u)}function i(e,t){if(!e||!t||e.charAt(0)!==t.charAt(0))return 0;for(var s=0,r=Math.min(e.length,t.length),n=r,o=0;s<n;)e.substring(o,n)==t.substring(o,n)?o=s=n:r=n,n=Math.floor((r-s)/2+s);return p(e.charCodeAt(n-1))&&n--,n}function l(e,t){var s=e.length,r=t.length;if(0==s||0==r)return 0;s>r?e=e.substring(s-r):s<r&&(t=t.substring(0,s));var n=Math.min(s,r);if(e==t)return n;for(var o=0,i=1;;){var l=e.substring(n-i),a=t.indexOf(l);if(-1==a)return o;i+=a,0!=a&&e.substring(n-i)!=t.substring(0,i)||(o=i,i++)}}function a(e,t){if(!e||!t||e.slice(-1)!==t.slice(-1))return 0;for(var s=0,r=Math.min(e.length,t.length),n=r,o=0;s<n;)e.substring(e.length-n,e.length-o)==t.substring(t.length-n,t.length-o)?o=s=n:r=n,n=Math.floor((r-s)/2+s);return g(e.charCodeAt(e.length-n))&&n--,n}var c=/[^a-zA-Z0-9]/,u=/\s/,d=/[\r\n]/,h=/\n\r?\n$/,m=/^\r?\n\r?\n/;function f(e,n){e.push([r,""]);for(var o,l=0,c=0,u=0,d="",h="";l<e.length;)if(l<e.length-1&&!e[l][1])e.splice(l,1);else switch(e[l][0]){case s:u++,h+=e[l][1],l++;break;case t:c++,d+=e[l][1],l++;break;case r:var m=l-u-c-1;if(n){if(m>=0&&y(e[m][1])){var p=e[m][1].slice(-1);if(e[m][1]=e[m][1].slice(0,-1),d=p+d,h=p+h,!e[m][1]){e.splice(m,1),l--;var g=m-1;e[g]&&e[g][0]===s&&(u++,h=e[g][1]+h,g--),e[g]&&e[g][0]===t&&(c++,d=e[g][1]+d,g--),m=g}}if(b(e[l][1])){p=e[l][1].charAt(0);e[l][1]=e[l][1].slice(1),d+=p,h+=p}}if(l<e.length-1&&!e[l][1]){e.splice(l,1);break}if(d.length>0||h.length>0){d.length>0&&h.length>0&&(0!==(o=i(h,d))&&(m>=0?e[m][1]+=h.substring(0,o):(e.splice(0,0,[r,h.substring(0,o)]),l++),h=h.substring(o),d=d.substring(o)),0!==(o=a(h,d))&&(e[l][1]=h.substring(h.length-o)+e[l][1],h=h.substring(0,h.length-o),d=d.substring(0,d.length-o)));var v=u+c;0===d.length&&0===h.length?(e.splice(l-v,v),l-=v):0===d.length?(e.splice(l-v,v,[s,h]),l=l-v+1):0===h.length?(e.splice(l-v,v,[t,d]),l=l-v+1):(e.splice(l-v,v,[t,d],[s,h]),l=l-v+2)}0!==l&&e[l-1][0]===r?(e[l-1][1]+=e[l][1],e.splice(l,1)):l++,u=0,c=0,d="",h=""}""===e[e.length-1][1]&&e.pop();var j=!1;for(l=1;l<e.length-1;)e[l-1][0]===r&&e[l+1][0]===r&&(e[l][1].substring(e[l][1].length-e[l-1][1].length)===e[l-1][1]?(e[l][1]=e[l-1][1]+e[l][1].substring(0,e[l][1].length-e[l-1][1].length),e[l+1][1]=e[l-1][1]+e[l+1][1],e.splice(l-1,1),j=!0):e[l][1].substring(0,e[l+1][1].length)==e[l+1][1]&&(e[l-1][1]+=e[l+1][1],e[l][1]=e[l][1].substring(e[l+1][1].length)+e[l+1][1],e.splice(l+1,1),j=!0)),l++;j&&f(e,n)}function p(e){return e>=55296&&e<=56319}function g(e){return e>=56320&&e<=57343}function b(e){return g(e.charCodeAt(0))}function y(e){return p(e.charCodeAt(e.length-1))}function v(e,n,o,i){return y(e)||b(i)?null:function(e){for(var t=[],s=0;s<e.length;s++)e[s][1].length>0&&t.push(e[s]);return t}([[r,e],[t,n],[s,o],[r,i]])}function j(e,t,s,r){return n(e,t,s,r,!0)}j.INSERT=s,j.DELETE=t,j.EQUAL=r,e.exports=j},"./node_modules/lodash.clonedeep/index.js":(e,t,s)=>{e=s.nmd(e);var r="__lodash_hash_undefined__",n=9007199254740991,o="[object Arguments]",i="[object Boolean]",l="[object Date]",a="[object Function]",c="[object GeneratorFunction]",u="[object Map]",d="[object Number]",h="[object Object]",m="[object Promise]",f="[object RegExp]",p="[object Set]",g="[object String]",b="[object Symbol]",y="[object WeakMap]",v="[object ArrayBuffer]",j="[object DataView]",_="[object Float32Array]",w="[object Float64Array]",E="[object Int8Array]",A="[object Int16Array]",S="[object Int32Array]",k="[object Uint8Array]",x="[object Uint8ClampedArray]",O="[object Uint16Array]",N="[object Uint32Array]",q=/\w*$/,T=/^\[object .+?Constructor\]$/,L=/^(?:0|[1-9]\d*)$/,C={};C[o]=C["[object Array]"]=C[v]=C[j]=C[i]=C[l]=C[_]=C[w]=C[E]=C[A]=C[S]=C[u]=C[d]=C[h]=C[f]=C[p]=C[g]=C[b]=C[k]=C[x]=C[O]=C[N]=!0,C["[object Error]"]=C[a]=C[y]=!1;var R="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g,M="object"==typeof self&&self&&self.Object===Object&&self,I=R||M||Function("return this")(),P=t&&!t.nodeType&&t,B=P&&e&&!e.nodeType&&e,F=B&&B.exports===P;function D(e,t){return e.set(t[0],t[1]),e}function H(e,t){return e.add(t),e}function U(e,t,s,r){var n=-1,o=e?e.length:0;for(r&&o&&(s=e[++n]);++n<o;)s=t(s,e[n],n,e);return s}function V(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(s){}return t}function $(e){var t=-1,s=Array(e.size);return e.forEach((function(e,r){s[++t]=[r,e]})),s}function z(e,t){return function(s){return e(t(s))}}function K(e){var t=-1,s=Array(e.size);return e.forEach((function(e){s[++t]=e})),s}var W,G=Array.prototype,Z=Function.prototype,X=Object.prototype,Y=I["__core-js_shared__"],J=(W=/[^.]+$/.exec(Y&&Y.keys&&Y.keys.IE_PROTO||""))?"Symbol(src)_1."+W:"",Q=Z.toString,ee=X.hasOwnProperty,te=X.toString,se=RegExp("^"+Q.call(ee).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),re=F?I.Buffer:void 0,ne=I.Symbol,oe=I.Uint8Array,ie=z(Object.getPrototypeOf,Object),le=Object.create,ae=X.propertyIsEnumerable,ce=G.splice,ue=Object.getOwnPropertySymbols,de=re?re.isBuffer:void 0,he=z(Object.keys,Object),me=Be(I,"DataView"),fe=Be(I,"Map"),pe=Be(I,"Promise"),ge=Be(I,"Set"),be=Be(I,"WeakMap"),ye=Be(Object,"create"),ve=Ve(me),je=Ve(fe),_e=Ve(pe),we=Ve(ge),Ee=Ve(be),Ae=ne?ne.prototype:void 0,Se=Ae?Ae.valueOf:void 0;function ke(e){var t=-1,s=e?e.length:0;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function xe(e){var t=-1,s=e?e.length:0;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,s=e?e.length:0;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function Ne(e){this.__data__=new xe(e)}function qe(e,t){var s=ze(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ke(e)}(e)&&ee.call(e,"callee")&&(!ae.call(e,"callee")||te.call(e)==o)}(e)?function(e,t){for(var s=-1,r=Array(e);++s<e;)r[s]=t(s);return r}(e.length,String):[],r=s.length,n=!!r;for(var i in e)!t&&!ee.call(e,i)||n&&("length"==i||He(i,r))||s.push(i);return s}function Te(e,t,s){var r=e[t];ee.call(e,t)&&$e(r,s)&&(void 0!==s||t in e)||(e[t]=s)}function Le(e,t){for(var s=e.length;s--;)if($e(e[s][0],t))return s;return-1}function Ce(e,t,s,r,n,m,y){var T;if(r&&(T=m?r(e,n,m,y):r(e)),void 0!==T)return T;if(!Ze(e))return e;var L=ze(e);if(L){if(T=function(e){var t=e.length,s=e.constructor(t);t&&"string"==typeof e[0]&&ee.call(e,"index")&&(s.index=e.index,s.input=e.input);return s}(e),!t)return function(e,t){var s=-1,r=e.length;t||(t=Array(r));for(;++s<r;)t[s]=e[s];return t}(e,T)}else{var R=De(e),M=R==a||R==c;if(We(e))return function(e,t){if(t)return e.slice();var s=new e.constructor(e.length);return e.copy(s),s}(e,t);if(R==h||R==o||M&&!m){if(V(e))return m?e:{};if(T=function(e){return"function"!=typeof e.constructor||Ue(e)?{}:(t=ie(e),Ze(t)?le(t):{});var t}(M?{}:e),!t)return function(e,t){return Ie(e,Fe(e),t)}(e,function(e,t){return e&&Ie(t,Xe(t),e)}(T,e))}else{if(!C[R])return m?e:{};T=function(e,t,s,r){var n=e.constructor;switch(t){case v:return Me(e);case i:case l:return new n(+e);case j:return function(e,t){var s=t?Me(e.buffer):e.buffer;return new e.constructor(s,e.byteOffset,e.byteLength)}(e,r);case _:case w:case E:case A:case S:case k:case x:case O:case N:return function(e,t){var s=t?Me(e.buffer):e.buffer;return new e.constructor(s,e.byteOffset,e.length)}(e,r);case u:return function(e,t,s){var r=t?s($(e),!0):$(e);return U(r,D,new e.constructor)}(e,r,s);case d:case g:return new n(e);case f:return function(e){var t=new e.constructor(e.source,q.exec(e));return t.lastIndex=e.lastIndex,t}(e);case p:return function(e,t,s){var r=t?s(K(e),!0):K(e);return U(r,H,new e.constructor)}(e,r,s);case b:return o=e,Se?Object(Se.call(o)):{}}var o}(e,R,Ce,t)}}y||(y=new Ne);var I=y.get(e);if(I)return I;if(y.set(e,T),!L)var P=s?function(e){return function(e,t,s){var r=t(e);return ze(e)?r:function(e,t){for(var s=-1,r=t.length,n=e.length;++s<r;)e[n+s]=t[s];return e}(r,s(e))}(e,Xe,Fe)}(e):Xe(e);return function(e,t){for(var s=-1,r=e?e.length:0;++s<r&&!1!==t(e[s],s,e););}(P||e,(function(n,o){P&&(n=e[o=n]),Te(T,o,Ce(n,t,s,r,o,e,y))})),T}function Re(e){return!(!Ze(e)||(t=e,J&&J in t))&&(Ge(e)||V(e)?se:T).test(Ve(e));var t}function Me(e){var t=new e.constructor(e.byteLength);return new oe(t).set(new oe(e)),t}function Ie(e,t,s,r){s||(s={});for(var n=-1,o=t.length;++n<o;){var i=t[n],l=r?r(s[i],e[i],i,s,e):void 0;Te(s,i,void 0===l?e[i]:l)}return s}function Pe(e,t){var s,r,n=e.__data__;return("string"==(r=typeof(s=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==s:null===s)?n["string"==typeof t?"string":"hash"]:n.map}function Be(e,t){var s=function(e,t){return null==e?void 0:e[t]}(e,t);return Re(s)?s:void 0}ke.prototype.clear=function(){this.__data__=ye?ye(null):{}},ke.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},ke.prototype.get=function(e){var t=this.__data__;if(ye){var s=t[e];return s===r?void 0:s}return ee.call(t,e)?t[e]:void 0},ke.prototype.has=function(e){var t=this.__data__;return ye?void 0!==t[e]:ee.call(t,e)},ke.prototype.set=function(e,t){return this.__data__[e]=ye&&void 0===t?r:t,this},xe.prototype.clear=function(){this.__data__=[]},xe.prototype.delete=function(e){var t=this.__data__,s=Le(t,e);return!(s<0)&&(s==t.length-1?t.pop():ce.call(t,s,1),!0)},xe.prototype.get=function(e){var t=this.__data__,s=Le(t,e);return s<0?void 0:t[s][1]},xe.prototype.has=function(e){return Le(this.__data__,e)>-1},xe.prototype.set=function(e,t){var s=this.__data__,r=Le(s,e);return r<0?s.push([e,t]):s[r][1]=t,this},Oe.prototype.clear=function(){this.__data__={hash:new ke,map:new(fe||xe),string:new ke}},Oe.prototype.delete=function(e){return Pe(this,e).delete(e)},Oe.prototype.get=function(e){return Pe(this,e).get(e)},Oe.prototype.has=function(e){return Pe(this,e).has(e)},Oe.prototype.set=function(e,t){return Pe(this,e).set(e,t),this},Ne.prototype.clear=function(){this.__data__=new xe},Ne.prototype.delete=function(e){return this.__data__.delete(e)},Ne.prototype.get=function(e){return this.__data__.get(e)},Ne.prototype.has=function(e){return this.__data__.has(e)},Ne.prototype.set=function(e,t){var s=this.__data__;if(s instanceof xe){var r=s.__data__;if(!fe||r.length<199)return r.push([e,t]),this;s=this.__data__=new Oe(r)}return s.set(e,t),this};var Fe=ue?z(ue,Object):function(){return[]},De=function(e){return te.call(e)};function He(e,t){return!!(t=null==t?n:t)&&("number"==typeof e||L.test(e))&&e>-1&&e%1==0&&e<t}function Ue(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||X)}function Ve(e){if(null!=e){try{return Q.call(e)}catch(t){}try{return e+""}catch(t){}}return""}function $e(e,t){return e===t||e!=e&&t!=t}(me&&De(new me(new ArrayBuffer(1)))!=j||fe&&De(new fe)!=u||pe&&De(pe.resolve())!=m||ge&&De(new ge)!=p||be&&De(new be)!=y)&&(De=function(e){var t=te.call(e),s=t==h?e.constructor:void 0,r=s?Ve(s):void 0;if(r)switch(r){case ve:return j;case je:return u;case _e:return m;case we:return p;case Ee:return y}return t});var ze=Array.isArray;function Ke(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!Ge(e)}var We=de||function(){return!1};function Ge(e){var t=Ze(e)?te.call(e):"";return t==a||t==c}function Ze(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Xe(e){return Ke(e)?qe(e):function(e){if(!Ue(e))return he(e);var t=[];for(var s in Object(e))ee.call(e,s)&&"constructor"!=s&&t.push(s);return t}(e)}e.exports=function(e){return Ce(e,!0,!0)}},"./node_modules/lodash.isequal/index.js":(e,t,s)=>{e=s.nmd(e);var r="__lodash_hash_undefined__",n=1,o=2,i=9007199254740991,l="[object Arguments]",a="[object Array]",c="[object AsyncFunction]",u="[object Boolean]",d="[object Date]",h="[object Error]",m="[object Function]",f="[object GeneratorFunction]",p="[object Map]",g="[object Number]",b="[object Null]",y="[object Object]",v="[object Promise]",j="[object Proxy]",_="[object RegExp]",w="[object Set]",E="[object String]",A="[object Symbol]",S="[object Undefined]",k="[object WeakMap]",x="[object ArrayBuffer]",O="[object DataView]",N=/^\[object .+?Constructor\]$/,q=/^(?:0|[1-9]\d*)$/,T={};T["[object Float32Array]"]=T["[object Float64Array]"]=T["[object Int8Array]"]=T["[object Int16Array]"]=T["[object Int32Array]"]=T["[object Uint8Array]"]=T["[object Uint8ClampedArray]"]=T["[object Uint16Array]"]=T["[object Uint32Array]"]=!0,T[l]=T[a]=T[x]=T[u]=T[O]=T[d]=T[h]=T[m]=T[p]=T[g]=T[y]=T[_]=T[w]=T[E]=T[k]=!1;var L="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g,C="object"==typeof self&&self&&self.Object===Object&&self,R=L||C||Function("return this")(),M=t&&!t.nodeType&&t,I=M&&e&&!e.nodeType&&e,P=I&&I.exports===M,B=P&&L.process,F=function(){try{return B&&B.binding&&B.binding("util")}catch(e){}}(),D=F&&F.isTypedArray;function H(e,t){for(var s=-1,r=null==e?0:e.length;++s<r;)if(t(e[s],s,e))return!0;return!1}function U(e){var t=-1,s=Array(e.size);return e.forEach((function(e,r){s[++t]=[r,e]})),s}function V(e){var t=-1,s=Array(e.size);return e.forEach((function(e){s[++t]=e})),s}var $,z,K,W=Array.prototype,G=Function.prototype,Z=Object.prototype,X=R["__core-js_shared__"],Y=G.toString,J=Z.hasOwnProperty,Q=($=/[^.]+$/.exec(X&&X.keys&&X.keys.IE_PROTO||""))?"Symbol(src)_1."+$:"",ee=Z.toString,te=RegExp("^"+Y.call(J).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),se=P?R.Buffer:void 0,re=R.Symbol,ne=R.Uint8Array,oe=Z.propertyIsEnumerable,ie=W.splice,le=re?re.toStringTag:void 0,ae=Object.getOwnPropertySymbols,ce=se?se.isBuffer:void 0,ue=(z=Object.keys,K=Object,function(e){return z(K(e))}),de=Fe(R,"DataView"),he=Fe(R,"Map"),me=Fe(R,"Promise"),fe=Fe(R,"Set"),pe=Fe(R,"WeakMap"),ge=Fe(Object,"create"),be=Ve(de),ye=Ve(he),ve=Ve(me),je=Ve(fe),_e=Ve(pe),we=re?re.prototype:void 0,Ee=we?we.valueOf:void 0;function Ae(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function Se(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function ke(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}function xe(e){var t=-1,s=null==e?0:e.length;for(this.__data__=new ke;++t<s;)this.add(e[t])}function Oe(e){var t=this.__data__=new Se(e);this.size=t.size}function Ne(e,t){var s=Ke(e),r=!s&&ze(e),n=!s&&!r&&We(e),o=!s&&!r&&!n&&Je(e),i=s||r||n||o,l=i?function(e,t){for(var s=-1,r=Array(e);++s<e;)r[s]=t(s);return r}(e.length,String):[],a=l.length;for(var c in e)!t&&!J.call(e,c)||i&&("length"==c||n&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ue(c,a))||l.push(c);return l}function qe(e,t){for(var s=e.length;s--;)if($e(e[s][0],t))return s;return-1}function Te(e){return null==e?void 0===e?S:b:le&&le in Object(e)?function(e){var t=J.call(e,le),s=e[le];try{e[le]=void 0;var r=!0}catch(o){}var n=ee.call(e);r&&(t?e[le]=s:delete e[le]);return n}(e):function(e){return ee.call(e)}(e)}function Le(e){return Ye(e)&&Te(e)==l}function Ce(e,t,s,r,i){return e===t||(null==e||null==t||!Ye(e)&&!Ye(t)?e!=e&&t!=t:function(e,t,s,r,i,c){var m=Ke(e),f=Ke(t),b=m?a:He(e),v=f?a:He(t),j=(b=b==l?y:b)==y,S=(v=v==l?y:v)==y,k=b==v;if(k&&We(e)){if(!We(t))return!1;m=!0,j=!1}if(k&&!j)return c||(c=new Oe),m||Je(e)?Ie(e,t,s,r,i,c):function(e,t,s,r,i,l,a){switch(s){case O:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case x:return!(e.byteLength!=t.byteLength||!l(new ne(e),new ne(t)));case u:case d:case g:return $e(+e,+t);case h:return e.name==t.name&&e.message==t.message;case _:case E:return e==t+"";case p:var c=U;case w:var m=r&n;if(c||(c=V),e.size!=t.size&&!m)return!1;var f=a.get(e);if(f)return f==t;r|=o,a.set(e,t);var b=Ie(c(e),c(t),r,i,l,a);return a.delete(e),b;case A:if(Ee)return Ee.call(e)==Ee.call(t)}return!1}(e,t,b,s,r,i,c);if(!(s&n)){var N=j&&J.call(e,"__wrapped__"),q=S&&J.call(t,"__wrapped__");if(N||q){var T=N?e.value():e,L=q?t.value():t;return c||(c=new Oe),i(T,L,s,r,c)}}if(!k)return!1;return c||(c=new Oe),function(e,t,s,r,o,i){var l=s&n,a=Pe(e),c=a.length,u=Pe(t),d=u.length;if(c!=d&&!l)return!1;var h=c;for(;h--;){var m=a[h];if(!(l?m in t:J.call(t,m)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var p=!0;i.set(e,t),i.set(t,e);var g=l;for(;++h<c;){var b=e[m=a[h]],y=t[m];if(r)var v=l?r(y,b,m,t,e,i):r(b,y,m,e,t,i);if(!(void 0===v?b===y||o(b,y,s,r,i):v)){p=!1;break}g||(g="constructor"==m)}if(p&&!g){var j=e.constructor,_=t.constructor;j==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof j&&j instanceof j&&"function"==typeof _&&_ instanceof _||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,s,r,i,c)}(e,t,s,r,Ce,i))}function Re(e){return!(!Xe(e)||function(e){return!!Q&&Q in e}(e))&&(Ge(e)?te:N).test(Ve(e))}function Me(e){if(s=(t=e)&&t.constructor,r="function"==typeof s&&s.prototype||Z,t!==r)return ue(e);var t,s,r,n=[];for(var o in Object(e))J.call(e,o)&&"constructor"!=o&&n.push(o);return n}function Ie(e,t,s,r,i,l){var a=s&n,c=e.length,u=t.length;if(c!=u&&!(a&&u>c))return!1;var d=l.get(e);if(d&&l.get(t))return d==t;var h=-1,m=!0,f=s&o?new xe:void 0;for(l.set(e,t),l.set(t,e);++h<c;){var p=e[h],g=t[h];if(r)var b=a?r(g,p,h,t,e,l):r(p,g,h,e,t,l);if(void 0!==b){if(b)continue;m=!1;break}if(f){if(!H(t,(function(e,t){if(n=t,!f.has(n)&&(p===e||i(p,e,s,r,l)))return f.push(t);var n}))){m=!1;break}}else if(p!==g&&!i(p,g,s,r,l)){m=!1;break}}return l.delete(e),l.delete(t),m}function Pe(e){return function(e,t,s){var r=t(e);return Ke(e)?r:function(e,t){for(var s=-1,r=t.length,n=e.length;++s<r;)e[n+s]=t[s];return e}(r,s(e))}(e,Qe,De)}function Be(e,t){var s,r,n=e.__data__;return("string"==(r=typeof(s=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==s:null===s)?n["string"==typeof t?"string":"hash"]:n.map}function Fe(e,t){var s=function(e,t){return null==e?void 0:e[t]}(e,t);return Re(s)?s:void 0}Ae.prototype.clear=function(){this.__data__=ge?ge(null):{},this.size=0},Ae.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Ae.prototype.get=function(e){var t=this.__data__;if(ge){var s=t[e];return s===r?void 0:s}return J.call(t,e)?t[e]:void 0},Ae.prototype.has=function(e){var t=this.__data__;return ge?void 0!==t[e]:J.call(t,e)},Ae.prototype.set=function(e,t){var s=this.__data__;return this.size+=this.has(e)?0:1,s[e]=ge&&void 0===t?r:t,this},Se.prototype.clear=function(){this.__data__=[],this.size=0},Se.prototype.delete=function(e){var t=this.__data__,s=qe(t,e);return!(s<0)&&(s==t.length-1?t.pop():ie.call(t,s,1),--this.size,!0)},Se.prototype.get=function(e){var t=this.__data__,s=qe(t,e);return s<0?void 0:t[s][1]},Se.prototype.has=function(e){return qe(this.__data__,e)>-1},Se.prototype.set=function(e,t){var s=this.__data__,r=qe(s,e);return r<0?(++this.size,s.push([e,t])):s[r][1]=t,this},ke.prototype.clear=function(){this.size=0,this.__data__={hash:new Ae,map:new(he||Se),string:new Ae}},ke.prototype.delete=function(e){var t=Be(this,e).delete(e);return this.size-=t?1:0,t},ke.prototype.get=function(e){return Be(this,e).get(e)},ke.prototype.has=function(e){return Be(this,e).has(e)},ke.prototype.set=function(e,t){var s=Be(this,e),r=s.size;return s.set(e,t),this.size+=s.size==r?0:1,this},xe.prototype.add=xe.prototype.push=function(e){return this.__data__.set(e,r),this},xe.prototype.has=function(e){return this.__data__.has(e)},Oe.prototype.clear=function(){this.__data__=new Se,this.size=0},Oe.prototype.delete=function(e){var t=this.__data__,s=t.delete(e);return this.size=t.size,s},Oe.prototype.get=function(e){return this.__data__.get(e)},Oe.prototype.has=function(e){return this.__data__.has(e)},Oe.prototype.set=function(e,t){var s=this.__data__;if(s instanceof Se){var r=s.__data__;if(!he||r.length<199)return r.push([e,t]),this.size=++s.size,this;s=this.__data__=new ke(r)}return s.set(e,t),this.size=s.size,this};var De=ae?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var s=-1,r=null==e?0:e.length,n=0,o=[];++s<r;){var i=e[s];t(i,s,e)&&(o[n++]=i)}return o}(ae(e),(function(t){return oe.call(e,t)})))}:function(){return[]},He=Te;function Ue(e,t){return!!(t=null==t?i:t)&&("number"==typeof e||q.test(e))&&e>-1&&e%1==0&&e<t}function Ve(e){if(null!=e){try{return Y.call(e)}catch(t){}try{return e+""}catch(t){}}return""}function $e(e,t){return e===t||e!=e&&t!=t}(de&&He(new de(new ArrayBuffer(1)))!=O||he&&He(new he)!=p||me&&He(me.resolve())!=v||fe&&He(new fe)!=w||pe&&He(new pe)!=k)&&(He=function(e){var t=Te(e),s=t==y?e.constructor:void 0,r=s?Ve(s):"";if(r)switch(r){case be:return O;case ye:return p;case ve:return v;case je:return w;case _e:return k}return t});var ze=Le(function(){return arguments}())?Le:function(e){return Ye(e)&&J.call(e,"callee")&&!oe.call(e,"callee")},Ke=Array.isArray;var We=ce||function(){return!1};function Ge(e){if(!Xe(e))return!1;var t=Te(e);return t==m||t==f||t==c||t==j}function Ze(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=i}function Xe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ye(e){return null!=e&&"object"==typeof e}var Je=D?function(e){return function(t){return e(t)}}(D):function(e){return Ye(e)&&Ze(e.length)&&!!T[Te(e)]};function Qe(e){return null!=(t=e)&&Ze(t.length)&&!Ge(t)?Ne(e):Me(e);var t}e.exports=function(e,t){return Ce(e,t)}},"./assets/styles/app.css":(e,t,s)=>{"use strict";s.r(t)},"./node_modules/@symfony/ux-live-component/dist/live.min.css":(e,t,s)=>{"use strict";s.r(t)},"./node_modules/quill-delta/dist/AttributeMap.js":(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s("./node_modules/lodash.clonedeep/index.js"),n=s("./node_modules/lodash.isequal/index.js");var o;!function(e){e.compose=function(e={},t={},s=!1){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={});let n=r(t);s||(n=Object.keys(n).reduce(((e,t)=>(null!=n[t]&&(e[t]=n[t]),e)),{}));for(const r in e)void 0!==e[r]&&void 0===t[r]&&(n[r]=e[r]);return Object.keys(n).length>0?n:void 0},e.diff=function(e={},t={}){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={});const s=Object.keys(e).concat(Object.keys(t)).reduce(((s,r)=>(n(e[r],t[r])||(s[r]=void 0===t[r]?null:t[r]),s)),{});return Object.keys(s).length>0?s:void 0},e.invert=function(e={},t={}){e=e||{};const s=Object.keys(t).reduce(((s,r)=>(t[r]!==e[r]&&void 0!==e[r]&&(s[r]=t[r]),s)),{});return Object.keys(e).reduce(((s,r)=>(e[r]!==t[r]&&void 0===t[r]&&(s[r]=null),s)),s)},e.transform=function(e,t,s=!1){if("object"!=typeof e)return t;if("object"!=typeof t)return;if(!s)return t;const r=Object.keys(t).reduce(((s,r)=>(void 0===e[r]&&(s[r]=t[r]),s)),{});return Object.keys(r).length>0?r:void 0}}(o||(o={})),t.default=o},"./node_modules/quill-delta/dist/Delta.js":(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeMap=t.OpIterator=t.Op=void 0;const r=s("./node_modules/fast-diff/diff.js"),n=s("./node_modules/lodash.clonedeep/index.js"),o=s("./node_modules/lodash.isequal/index.js"),i=s("./node_modules/quill-delta/dist/AttributeMap.js");t.AttributeMap=i.default;const l=s("./node_modules/quill-delta/dist/Op.js");t.Op=l.default;const a=s("./node_modules/quill-delta/dist/OpIterator.js");t.OpIterator=a.default;const c=String.fromCharCode(0),u=(e,t)=>{if("object"!=typeof e||null===e)throw new Error("cannot retain a "+typeof e);if("object"!=typeof t||null===t)throw new Error("cannot retain a "+typeof t);const s=Object.keys(e)[0];if(!s||s!==Object.keys(t)[0])throw new Error(`embed types not matched: ${s} != ${Object.keys(t)[0]}`);return[s,e[s],t[s]]};class d{constructor(e){Array.isArray(e)?this.ops=e:null!=e&&Array.isArray(e.ops)?this.ops=e.ops:this.ops=[]}static registerEmbed(e,t){this.handlers[e]=t}static unregisterEmbed(e){delete this.handlers[e]}static getHandler(e){const t=this.handlers[e];if(!t)throw new Error(`no handlers for embed type "${e}"`);return t}insert(e,t){const s={};return"string"==typeof e&&0===e.length?this:(s.insert=e,null!=t&&"object"==typeof t&&Object.keys(t).length>0&&(s.attributes=t),this.push(s))}delete(e){return e<=0?this:this.push({delete:e})}retain(e,t){if("number"==typeof e&&e<=0)return this;const s={retain:e};return null!=t&&"object"==typeof t&&Object.keys(t).length>0&&(s.attributes=t),this.push(s)}push(e){let t=this.ops.length,s=this.ops[t-1];if(e=n(e),"object"==typeof s){if("number"==typeof e.delete&&"number"==typeof s.delete)return this.ops[t-1]={delete:s.delete+e.delete},this;if("number"==typeof s.delete&&null!=e.insert&&(t-=1,s=this.ops[t-1],"object"!=typeof s))return this.ops.unshift(e),this;if(o(e.attributes,s.attributes)){if("string"==typeof e.insert&&"string"==typeof s.insert)return this.ops[t-1]={insert:s.insert+e.insert},"object"==typeof e.attributes&&(this.ops[t-1].attributes=e.attributes),this;if("number"==typeof e.retain&&"number"==typeof s.retain)return this.ops[t-1]={retain:s.retain+e.retain},"object"==typeof e.attributes&&(this.ops[t-1].attributes=e.attributes),this}}return t===this.ops.length?this.ops.push(e):this.ops.splice(t,0,e),this}chop(){const e=this.ops[this.ops.length-1];return e&&"number"==typeof e.retain&&!e.attributes&&this.ops.pop(),this}filter(e){return this.ops.filter(e)}forEach(e){this.ops.forEach(e)}map(e){return this.ops.map(e)}partition(e){const t=[],s=[];return this.forEach((r=>{(e(r)?t:s).push(r)})),[t,s]}reduce(e,t){return this.ops.reduce(e,t)}changeLength(){return this.reduce(((e,t)=>t.insert?e+l.default.length(t):t.delete?e-t.delete:e),0)}length(){return this.reduce(((e,t)=>e+l.default.length(t)),0)}slice(e=0,t=1/0){const s=[],r=new a.default(this.ops);let n=0;for(;n<t&&r.hasNext();){let o;n<e?o=r.next(e-n):(o=r.next(t-n),s.push(o)),n+=l.default.length(o)}return new d(s)}compose(e){const t=new a.default(this.ops),s=new a.default(e.ops),r=[],n=s.peek();if(null!=n&&"number"==typeof n.retain&&null==n.attributes){let e=n.retain;for(;"insert"===t.peekType()&&t.peekLength()<=e;)e-=t.peekLength(),r.push(t.next());n.retain-e>0&&s.next(n.retain-e)}const l=new d(r);for(;t.hasNext()||s.hasNext();)if("insert"===s.peekType())l.push(s.next());else if("delete"===t.peekType())l.push(t.next());else{const e=Math.min(t.peekLength(),s.peekLength()),r=t.next(e),n=s.next(e);if(n.retain){const a={};if("number"==typeof r.retain)a.retain="number"==typeof n.retain?e:n.retain;else if("number"==typeof n.retain)null==r.retain?a.insert=r.insert:a.retain=r.retain;else{const e=null==r.retain?"insert":"retain",[t,s,o]=u(r[e],n.retain),i=d.getHandler(t);a[e]={[t]:i.compose(s,o,"retain"===e)}}const c=i.default.compose(r.attributes,n.attributes,"number"==typeof r.retain);if(c&&(a.attributes=c),l.push(a),!s.hasNext()&&o(l.ops[l.ops.length-1],a)){const e=new d(t.rest());return l.concat(e).chop()}}else"number"==typeof n.delete&&("number"==typeof r.retain||"object"==typeof r.retain&&null!==r.retain)&&l.push(n)}return l.chop()}concat(e){const t=new d(this.ops.slice());return e.ops.length>0&&(t.push(e.ops[0]),t.ops=t.ops.concat(e.ops.slice(1))),t}diff(e,t){if(this.ops===e.ops)return new d;const s=[this,e].map((t=>t.map((s=>{if(null!=s.insert)return"string"==typeof s.insert?s.insert:c;throw new Error("diff() called "+(t===e?"on":"with")+" non-document")})).join(""))),n=new d,l=r(s[0],s[1],t,!0),u=new a.default(this.ops),h=new a.default(e.ops);return l.forEach((e=>{let t=e[1].length;for(;t>0;){let s=0;switch(e[0]){case r.INSERT:s=Math.min(h.peekLength(),t),n.push(h.next(s));break;case r.DELETE:s=Math.min(t,u.peekLength()),u.next(s),n.delete(s);break;case r.EQUAL:s=Math.min(u.peekLength(),h.peekLength(),t);const e=u.next(s),l=h.next(s);o(e.insert,l.insert)?n.retain(s,i.default.diff(e.attributes,l.attributes)):n.push(l).delete(s)}t-=s}})),n.chop()}eachLine(e,t="\n"){const s=new a.default(this.ops);let r=new d,n=0;for(;s.hasNext();){if("insert"!==s.peekType())return;const o=s.peek(),i=l.default.length(o)-s.peekLength(),a="string"==typeof o.insert?o.insert.indexOf(t,i)-i:-1;if(a<0)r.push(s.next());else if(a>0)r.push(s.next(a));else{if(!1===e(r,s.next(1).attributes||{},n))return;n+=1,r=new d}}r.length()>0&&e(r,{},n)}invert(e){const t=new d;return this.reduce(((s,r)=>{if(r.insert)t.delete(l.default.length(r));else{if("number"==typeof r.retain&&null==r.attributes)return t.retain(r.retain),s+r.retain;if(r.delete||"number"==typeof r.retain){const n=r.delete||r.retain;return e.slice(s,s+n).forEach((e=>{r.delete?t.push(e):r.retain&&r.attributes&&t.retain(l.default.length(e),i.default.invert(r.attributes,e.attributes))})),s+n}if("object"==typeof r.retain&&null!==r.retain){const n=e.slice(s,s+1),o=new a.default(n.ops).next(),[l,c,h]=u(r.retain,o.insert),m=d.getHandler(l);return t.retain({[l]:m.invert(c,h)},i.default.invert(r.attributes,o.attributes)),s+1}}return s}),0),t.chop()}transform(e,t=!1){if(t=!!t,"number"==typeof e)return this.transformPosition(e,t);const s=e,r=new a.default(this.ops),n=new a.default(s.ops),o=new d;for(;r.hasNext()||n.hasNext();)if("insert"!==r.peekType()||!t&&"insert"===n.peekType())if("insert"===n.peekType())o.push(n.next());else{const e=Math.min(r.peekLength(),n.peekLength()),s=r.next(e),l=n.next(e);if(s.delete)continue;if(l.delete)o.push(l);else{const r=s.retain,n=l.retain;let a="object"==typeof n&&null!==n?n:e;if("object"==typeof r&&null!==r&&"object"==typeof n&&null!==n){const e=Object.keys(r)[0];if(e===Object.keys(n)[0]){const s=d.getHandler(e);s&&(a={[e]:s.transform(r[e],n[e],t)})}}o.retain(a,i.default.transform(s.attributes,l.attributes,t))}}else o.retain(l.default.length(r.next()));return o.chop()}transformPosition(e,t=!1){t=!!t;const s=new a.default(this.ops);let r=0;for(;s.hasNext()&&r<=e;){const n=s.peekLength(),o=s.peekType();s.next(),"delete"!==o?("insert"===o&&(r<e||!t)&&(e+=n),r+=n):e-=Math.min(n,e-r)}return e}}d.Op=l.default,d.OpIterator=a.default,d.AttributeMap=i.default,d.handlers={},t.default=d,e.exports=d,e.exports.default=d},"./node_modules/quill-delta/dist/Op.js":(e,t)=>{"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.length=function(e){return"number"==typeof e.delete?e.delete:"number"==typeof e.retain?e.retain:"object"==typeof e.retain&&null!==e.retain?1:"string"==typeof e.insert?e.insert.length:1}}(s||(s={})),t.default=s},"./node_modules/quill-delta/dist/OpIterator.js":(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s("./node_modules/quill-delta/dist/Op.js");t.default=class{constructor(e){this.ops=e,this.index=0,this.offset=0}hasNext(){return this.peekLength()<1/0}next(e){e||(e=1/0);const t=this.ops[this.index];if(t){const s=this.offset,n=r.default.length(t);if(e>=n-s?(e=n-s,this.index+=1,this.offset=0):this.offset+=e,"number"==typeof t.delete)return{delete:e};{const r={};return t.attributes&&(r.attributes=t.attributes),"number"==typeof t.retain?r.retain=e:"object"==typeof t.retain&&null!==t.retain?r.retain=t.retain:"string"==typeof t.insert?r.insert=t.insert.substr(s,e):r.insert=t.insert,r}}return{retain:1/0}}peek(){return this.ops[this.index]}peekLength(){return this.ops[this.index]?r.default.length(this.ops[this.index])-this.offset:1/0}peekType(){const e=this.ops[this.index];return e?"number"==typeof e.delete?"delete":"number"==typeof e.retain||"object"==typeof e.retain&&null!==e.retain?"retain":"insert":"retain"}rest(){if(this.hasNext()){if(0===this.offset)return this.ops.slice(this.index);{const e=this.offset,t=this.index,s=this.next(),r=this.ops.slice(this.index);return this.offset=e,this.index=t,[s].concat(r)}}return[]}}},"./node_modules/quill/node_modules/eventemitter3/index.js":e=>{"use strict";var t=Object.prototype.hasOwnProperty,s="~";function r(){}function n(e,t,s){this.fn=e,this.context=t,this.once=s||!1}function o(e,t,r,o,i){if("function"!=typeof r)throw new TypeError("The listener must be a function");var l=new n(r,o||e,i),a=s?s+t:t;return e._events[a]?e._events[a].fn?e._events[a]=[e._events[a],l]:e._events[a].push(l):(e._events[a]=l,e._eventsCount++),e}function i(e,t){0==--e._eventsCount?e._events=new r:delete e._events[t]}function l(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(s=!1)),l.prototype.eventNames=function(){var e,r,n=[];if(0===this._eventsCount)return n;for(r in e=this._events)t.call(e,r)&&n.push(s?r.slice(1):r);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},l.prototype.listeners=function(e){var t=s?s+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var n=0,o=r.length,i=new Array(o);n<o;n++)i[n]=r[n].fn;return i},l.prototype.listenerCount=function(e){var t=s?s+e:e,r=this._events[t];return r?r.fn?1:r.length:0},l.prototype.emit=function(e,t,r,n,o,i){var l=s?s+e:e;if(!this._events[l])return!1;var a,c,u=this._events[l],d=arguments.length;if(u.fn){switch(u.once&&this.removeListener(e,u.fn,void 0,!0),d){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,t),!0;case 3:return u.fn.call(u.context,t,r),!0;case 4:return u.fn.call(u.context,t,r,n),!0;case 5:return u.fn.call(u.context,t,r,n,o),!0;case 6:return u.fn.call(u.context,t,r,n,o,i),!0}for(c=1,a=new Array(d-1);c<d;c++)a[c-1]=arguments[c];u.fn.apply(u.context,a)}else{var h,m=u.length;for(c=0;c<m;c++)switch(u[c].once&&this.removeListener(e,u[c].fn,void 0,!0),d){case 1:u[c].fn.call(u[c].context);break;case 2:u[c].fn.call(u[c].context,t);break;case 3:u[c].fn.call(u[c].context,t,r);break;case 4:u[c].fn.call(u[c].context,t,r,n);break;default:if(!a)for(h=1,a=new Array(d-1);h<d;h++)a[h-1]=arguments[h];u[c].fn.apply(u[c].context,a)}}return!0},l.prototype.on=function(e,t,s){return o(this,e,t,s,!1)},l.prototype.once=function(e,t,s){return o(this,e,t,s,!0)},l.prototype.removeListener=function(e,t,r,n){var o=s?s+e:e;if(!this._events[o])return this;if(!t)return i(this,o),this;var l=this._events[o];if(l.fn)l.fn!==t||n&&!l.once||r&&l.context!==r||i(this,o);else{for(var a=0,c=[],u=l.length;a<u;a++)(l[a].fn!==t||n&&!l[a].once||r&&l[a].context!==r)&&c.push(l[a]);c.length?this._events[o]=1===c.length?c[0]:c:i(this,o)}return this},l.prototype.removeAllListeners=function(e){var t;return e?(t=s?s+e:e,this._events[t]&&i(this,t)):(this._events=new r,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=s,l.EventEmitter=l,e.exports=l},"./node_modules/core-js/internals/a-callable.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-callable.js"),n=s("./node_modules/core-js/internals/try-to-string.js"),o=TypeError;e.exports=function(e){if(r(e))return e;throw new o(n(e)+" is not a function")}},"./node_modules/core-js/internals/a-constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-constructor.js"),n=s("./node_modules/core-js/internals/try-to-string.js"),o=TypeError;e.exports=function(e){if(r(e))return e;throw new o(n(e)+" is not a constructor")}},"./node_modules/core-js/internals/a-possible-prototype.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-possible-prototype.js"),n=String,o=TypeError;e.exports=function(e){if(r(e))return e;throw new o("Can't set "+n(e)+" as a prototype")}},"./node_modules/core-js/internals/add-to-unscopables.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/well-known-symbol.js"),n=s("./node_modules/core-js/internals/object-create.js"),o=s("./node_modules/core-js/internals/object-define-property.js").f,i=r("unscopables"),l=Array.prototype;void 0===l[i]&&o(l,i,{configurable:!0,value:n(null)}),e.exports=function(e){l[i][e]=!0}},"./node_modules/core-js/internals/an-object.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-object.js"),n=String,o=TypeError;e.exports=function(e){if(r(e))return e;throw new o(n(e)+" is not an object")}},"./node_modules/core-js/internals/array-for-each.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/array-iteration.js").forEach,n=s("./node_modules/core-js/internals/array-method-is-strict.js")("forEach");e.exports=n?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},"./node_modules/core-js/internals/array-includes.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-indexed-object.js"),n=s("./node_modules/core-js/internals/to-absolute-index.js"),o=s("./node_modules/core-js/internals/length-of-array-like.js"),i=function(e){return function(t,s,i){var l=r(t),a=o(l);if(0===a)return!e&&-1;var c,u=n(i,a);if(e&&s!=s){for(;a>u;)if((c=l[u++])!=c)return!0}else for(;a>u;u++)if((e||u in l)&&l[u]===s)return e||u||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},"./node_modules/core-js/internals/array-iteration.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-bind-context.js"),n=s("./node_modules/core-js/internals/function-uncurry-this.js"),o=s("./node_modules/core-js/internals/indexed-object.js"),i=s("./node_modules/core-js/internals/to-object.js"),l=s("./node_modules/core-js/internals/length-of-array-like.js"),a=s("./node_modules/core-js/internals/array-species-create.js"),c=n([].push),u=function(e){var t=1===e,s=2===e,n=3===e,u=4===e,d=6===e,h=7===e,m=5===e||d;return function(f,p,g,b){for(var y,v,j=i(f),_=o(j),w=l(_),E=r(p,g),A=0,S=b||a,k=t?S(f,w):s||h?S(f,0):void 0;w>A;A++)if((m||A in _)&&(v=E(y=_[A],A,j),e))if(t)k[A]=v;else if(v)switch(e){case 3:return!0;case 5:return y;case 6:return A;case 2:c(k,y)}else switch(e){case 4:return!1;case 7:c(k,y)}return d?-1:n||u?u:k}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},"./node_modules/core-js/internals/array-method-has-species-support.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js"),n=s("./node_modules/core-js/internals/well-known-symbol.js"),o=s("./node_modules/core-js/internals/engine-v8-version.js"),i=n("species");e.exports=function(e){return o>=51||!r((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},"./node_modules/core-js/internals/array-method-is-strict.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js");e.exports=function(e,t){var s=[][e];return!!s&&r((function(){s.call(null,t||function(){return 1},1)}))}},"./node_modules/core-js/internals/array-set-length.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/is-array.js"),o=TypeError,i=Object.getOwnPropertyDescriptor,l=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=l?function(e,t){if(n(e)&&!i(e,"length").writable)throw new o("Cannot set read only .length");return e.length=t}:function(e,t){return e.length=t}},"./node_modules/core-js/internals/array-slice.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js");e.exports=r([].slice)},"./node_modules/core-js/internals/array-species-constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-array.js"),n=s("./node_modules/core-js/internals/is-constructor.js"),o=s("./node_modules/core-js/internals/is-object.js"),i=s("./node_modules/core-js/internals/well-known-symbol.js")("species"),l=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(n(t)&&(t===l||r(t.prototype))||o(t)&&null===(t=t[i]))&&(t=void 0)),void 0===t?l:t}},"./node_modules/core-js/internals/array-species-create.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/array-species-constructor.js");e.exports=function(e,t){return new(r(e))(0===t?0:t)}},"./node_modules/core-js/internals/classof-raw.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=r({}.toString),o=r("".slice);e.exports=function(e){return o(n(e),8,-1)}},"./node_modules/core-js/internals/classof.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-string-tag-support.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=s("./node_modules/core-js/internals/classof-raw.js"),i=s("./node_modules/core-js/internals/well-known-symbol.js")("toStringTag"),l=Object,a="Arguments"===o(function(){return arguments}());e.exports=r?o:function(e){var t,s,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(s=function(e,t){try{return e[t]}catch(s){}}(t=l(e),i))?s:a?o(t):"Object"===(r=o(t))&&n(t.callee)?"Arguments":r}},"./node_modules/core-js/internals/copy-constructor-properties.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/has-own-property.js"),n=s("./node_modules/core-js/internals/own-keys.js"),o=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js"),i=s("./node_modules/core-js/internals/object-define-property.js");e.exports=function(e,t,s){for(var l=n(t),a=i.f,c=o.f,u=0;u<l.length;u++){var d=l[u];r(e,d)||s&&r(s,d)||a(e,d,c(t,d))}}},"./node_modules/core-js/internals/correct-prototype-getter.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js");e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},"./node_modules/core-js/internals/create-iter-result-object.js":e=>{"use strict";e.exports=function(e,t){return{value:e,done:t}}},"./node_modules/core-js/internals/create-non-enumerable-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/object-define-property.js"),o=s("./node_modules/core-js/internals/create-property-descriptor.js");e.exports=r?function(e,t,s){return n.f(e,t,o(1,s))}:function(e,t,s){return e[t]=s,e}},"./node_modules/core-js/internals/create-property-descriptor.js":e=>{"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},"./node_modules/core-js/internals/create-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/object-define-property.js"),o=s("./node_modules/core-js/internals/create-property-descriptor.js");e.exports=function(e,t,s){r?n.f(e,t,o(0,s)):e[t]=s}},"./node_modules/core-js/internals/date-to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/an-object.js"),n=s("./node_modules/core-js/internals/ordinary-to-primitive.js"),o=TypeError;e.exports=function(e){if(r(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw new o("Incorrect hint");return n(this,e)}},"./node_modules/core-js/internals/define-built-in-accessor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/make-built-in.js"),n=s("./node_modules/core-js/internals/object-define-property.js");e.exports=function(e,t,s){return s.get&&r(s.get,t,{getter:!0}),s.set&&r(s.set,t,{setter:!0}),n.f(e,t,s)}},"./node_modules/core-js/internals/define-built-in.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-callable.js"),n=s("./node_modules/core-js/internals/object-define-property.js"),o=s("./node_modules/core-js/internals/make-built-in.js"),i=s("./node_modules/core-js/internals/define-global-property.js");e.exports=function(e,t,s,l){l||(l={});var a=l.enumerable,c=void 0!==l.name?l.name:t;if(r(s)&&o(s,c,l),l.global)a?e[t]=s:i(t,s);else{try{l.unsafe?e[t]&&(a=!0):delete e[t]}catch(u){}a?e[t]=s:n.f(e,t,{value:s,enumerable:!1,configurable:!l.nonConfigurable,writable:!l.nonWritable})}return e}},"./node_modules/core-js/internals/define-global-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=Object.defineProperty;e.exports=function(e,t){try{n(r,e,{value:t,configurable:!0,writable:!0})}catch(s){r[e]=t}return t}},"./node_modules/core-js/internals/descriptors.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js");e.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},"./node_modules/core-js/internals/document-create-element.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/is-object.js"),o=r.document,i=n(o)&&n(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},"./node_modules/core-js/internals/does-not-exceed-safe-integer.js":e=>{"use strict";var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},"./node_modules/core-js/internals/dom-iterables.js":e=>{"use strict";e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},"./node_modules/core-js/internals/dom-token-list-prototype.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/document-create-element.js")("span").classList,n=r&&r.constructor&&r.constructor.prototype;e.exports=n===Object.prototype?void 0:n},"./node_modules/core-js/internals/engine-user-agent.js":e=>{"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},"./node_modules/core-js/internals/engine-v8-version.js":(e,t,s)=>{"use strict";var r,n,o=s("./node_modules/core-js/internals/global.js"),i=s("./node_modules/core-js/internals/engine-user-agent.js"),l=o.process,a=o.Deno,c=l&&l.versions||a&&a.version,u=c&&c.v8;u&&(n=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!n&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(n=+r[1]),e.exports=n},"./node_modules/core-js/internals/enum-bug-keys.js":e=>{"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"./node_modules/core-js/internals/error-stack-clear.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=Error,o=r("".replace),i=String(new n("zxcasd").stack),l=/\n\s*at [^:]*:[^\n]*/,a=l.test(i);e.exports=function(e,t){if(a&&"string"==typeof e&&!n.prepareStackTrace)for(;t--;)e=o(e,l,"");return e}},"./node_modules/core-js/internals/error-stack-install.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),n=s("./node_modules/core-js/internals/error-stack-clear.js"),o=s("./node_modules/core-js/internals/error-stack-installable.js"),i=Error.captureStackTrace;e.exports=function(e,t,s,l){o&&(i?i(e,t):r(e,"stack",n(s,l)))}},"./node_modules/core-js/internals/error-stack-installable.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js"),n=s("./node_modules/core-js/internals/create-property-descriptor.js");e.exports=!r((function(){var e=new Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",n(1,7)),7!==e.stack)}))},"./node_modules/core-js/internals/error-to-string.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/an-object.js"),i=s("./node_modules/core-js/internals/normalize-string-argument.js"),l=Error.prototype.toString,a=n((function(){if(r){var e=Object.create(Object.defineProperty({},"name",{get:function(){return this===e}}));if("true"!==l.call(e))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));e.exports=a?function(){var e=o(this),t=i(e.name,"Error"),s=i(e.message);return t?s?t+": "+s:t:s}:l},"./node_modules/core-js/internals/export.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js").f,o=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),i=s("./node_modules/core-js/internals/define-built-in.js"),l=s("./node_modules/core-js/internals/define-global-property.js"),a=s("./node_modules/core-js/internals/copy-constructor-properties.js"),c=s("./node_modules/core-js/internals/is-forced.js");e.exports=function(e,t){var s,u,d,h,m,f=e.target,p=e.global,g=e.stat;if(s=p?r:g?r[f]||l(f,{}):r[f]&&r[f].prototype)for(u in t){if(h=t[u],d=e.dontCallGetSet?(m=n(s,u))&&m.value:s[u],!c(p?u:f+(g?".":"#")+u,e.forced)&&void 0!==d){if(typeof h==typeof d)continue;a(h,d)}(e.sham||d&&d.sham)&&o(h,"sham",!0),i(s,u,h,e)}}},"./node_modules/core-js/internals/fails.js":e=>{"use strict";e.exports=function(e){try{return!!e()}catch(t){return!0}}},"./node_modules/core-js/internals/function-apply.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-bind-native.js"),n=Function.prototype,o=n.apply,i=n.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(o):function(){return i.apply(o,arguments)})},"./node_modules/core-js/internals/function-bind-context.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this-clause.js"),n=s("./node_modules/core-js/internals/a-callable.js"),o=s("./node_modules/core-js/internals/function-bind-native.js"),i=r(r.bind);e.exports=function(e,t){return n(e),void 0===t?e:o?i(e,t):function(){return e.apply(t,arguments)}}},"./node_modules/core-js/internals/function-bind-native.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js");e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},"./node_modules/core-js/internals/function-bind.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/a-callable.js"),o=s("./node_modules/core-js/internals/is-object.js"),i=s("./node_modules/core-js/internals/has-own-property.js"),l=s("./node_modules/core-js/internals/array-slice.js"),a=s("./node_modules/core-js/internals/function-bind-native.js"),c=Function,u=r([].concat),d=r([].join),h={};e.exports=a?c.bind:function(e){var t=n(this),s=t.prototype,r=l(arguments,1),a=function(){var s=u(r,l(arguments));return this instanceof a?function(e,t,s){if(!i(h,t)){for(var r=[],n=0;n<t;n++)r[n]="a["+n+"]";h[t]=c("C,a","return new C("+d(r,",")+")")}return h[t](e,s)}(t,s.length,s):t.apply(e,s)};return o(s)&&(a.prototype=s),a}},"./node_modules/core-js/internals/function-call.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-bind-native.js"),n=Function.prototype.call;e.exports=r?n.bind(n):function(){return n.apply(n,arguments)}},"./node_modules/core-js/internals/function-name.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/has-own-property.js"),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,l=n(o,"name"),a=l&&"something"===function(){}.name,c=l&&(!r||r&&i(o,"name").configurable);e.exports={EXISTS:l,PROPER:a,CONFIGURABLE:c}},"./node_modules/core-js/internals/function-uncurry-this-accessor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/a-callable.js");e.exports=function(e,t,s){try{return r(n(Object.getOwnPropertyDescriptor(e,t)[s]))}catch(o){}}},"./node_modules/core-js/internals/function-uncurry-this-clause.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/classof-raw.js"),n=s("./node_modules/core-js/internals/function-uncurry-this.js");e.exports=function(e){if("Function"===r(e))return n(e)}},"./node_modules/core-js/internals/function-uncurry-this.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-bind-native.js"),n=Function.prototype,o=n.call,i=r&&n.bind.bind(o,o);e.exports=r?i:function(e){return function(){return o.apply(e,arguments)}}},"./node_modules/core-js/internals/get-built-in.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/is-callable.js");e.exports=function(e,t){return arguments.length<2?(s=r[e],n(s)?s:void 0):r[e]&&r[e][t];var s}},"./node_modules/core-js/internals/get-json-replacer-function.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/is-array.js"),o=s("./node_modules/core-js/internals/is-callable.js"),i=s("./node_modules/core-js/internals/classof-raw.js"),l=s("./node_modules/core-js/internals/to-string.js"),a=r([].push);e.exports=function(e){if(o(e))return e;if(n(e)){for(var t=e.length,s=[],r=0;r<t;r++){var c=e[r];"string"==typeof c?a(s,c):"number"!=typeof c&&"Number"!==i(c)&&"String"!==i(c)||a(s,l(c))}var u=s.length,d=!0;return function(e,t){if(d)return d=!1,t;if(n(this))return t;for(var r=0;r<u;r++)if(s[r]===e)return t}}}},"./node_modules/core-js/internals/get-method.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/a-callable.js"),n=s("./node_modules/core-js/internals/is-null-or-undefined.js");e.exports=function(e,t){var s=e[t];return n(s)?void 0:r(s)}},"./node_modules/core-js/internals/global.js":function(e,t,s){"use strict";var r=function(e){return e&&e.Math===Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof s.g&&s.g)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},"./node_modules/core-js/internals/has-own-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/to-object.js"),o=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(n(e),t)}},"./node_modules/core-js/internals/hidden-keys.js":e=>{"use strict";e.exports={}},"./node_modules/core-js/internals/html.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/get-built-in.js");e.exports=r("document","documentElement")},"./node_modules/core-js/internals/ie8-dom-define.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/document-create-element.js");e.exports=!r&&!n((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},"./node_modules/core-js/internals/indexed-object.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/classof-raw.js"),i=Object,l=r("".split);e.exports=n((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"===o(e)?l(e,""):i(e)}:i},"./node_modules/core-js/internals/inherit-if-required.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-callable.js"),n=s("./node_modules/core-js/internals/is-object.js"),o=s("./node_modules/core-js/internals/object-set-prototype-of.js");e.exports=function(e,t,s){var i,l;return o&&r(i=t.constructor)&&i!==s&&n(l=i.prototype)&&l!==s.prototype&&o(e,l),e}},"./node_modules/core-js/internals/inspect-source.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=s("./node_modules/core-js/internals/shared-store.js"),i=r(Function.toString);n(o.inspectSource)||(o.inspectSource=function(e){return i(e)}),e.exports=o.inspectSource},"./node_modules/core-js/internals/install-error-cause.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-object.js"),n=s("./node_modules/core-js/internals/create-non-enumerable-property.js");e.exports=function(e,t){r(t)&&"cause"in t&&n(e,"cause",t.cause)}},"./node_modules/core-js/internals/internal-state.js":(e,t,s)=>{"use strict";var r,n,o,i=s("./node_modules/core-js/internals/weak-map-basic-detection.js"),l=s("./node_modules/core-js/internals/global.js"),a=s("./node_modules/core-js/internals/is-object.js"),c=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),u=s("./node_modules/core-js/internals/has-own-property.js"),d=s("./node_modules/core-js/internals/shared-store.js"),h=s("./node_modules/core-js/internals/shared-key.js"),m=s("./node_modules/core-js/internals/hidden-keys.js"),f="Object already initialized",p=l.TypeError,g=l.WeakMap;if(i||d.state){var b=d.state||(d.state=new g);b.get=b.get,b.has=b.has,b.set=b.set,r=function(e,t){if(b.has(e))throw new p(f);return t.facade=e,b.set(e,t),t},n=function(e){return b.get(e)||{}},o=function(e){return b.has(e)}}else{var y=h("state");m[y]=!0,r=function(e,t){if(u(e,y))throw new p(f);return t.facade=e,c(e,y,t),t},n=function(e){return u(e,y)?e[y]:{}},o=function(e){return u(e,y)}}e.exports={set:r,get:n,has:o,enforce:function(e){return o(e)?n(e):r(e,{})},getterFor:function(e){return function(t){var s;if(!a(t)||(s=n(t)).type!==e)throw new p("Incompatible receiver, "+e+" required");return s}}}},"./node_modules/core-js/internals/is-array.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/classof-raw.js");e.exports=Array.isArray||function(e){return"Array"===r(e)}},"./node_modules/core-js/internals/is-callable.js":e=>{"use strict";var t="object"==typeof document&&document.all;e.exports=void 0===t&&void 0!==t?function(e){return"function"==typeof e||e===t}:function(e){return"function"==typeof e}},"./node_modules/core-js/internals/is-constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/is-callable.js"),i=s("./node_modules/core-js/internals/classof.js"),l=s("./node_modules/core-js/internals/get-built-in.js"),a=s("./node_modules/core-js/internals/inspect-source.js"),c=function(){},u=l("Reflect","construct"),d=/^\s*(?:class|function)\b/,h=r(d.exec),m=!d.test(c),f=function(e){if(!o(e))return!1;try{return u(c,[],e),!0}catch(t){return!1}},p=function(e){if(!o(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!h(d,a(e))}catch(t){return!0}};p.sham=!0,e.exports=!u||n((function(){var e;return f(f.call)||!f(Object)||!f((function(){e=!0}))||e}))?p:f},"./node_modules/core-js/internals/is-forced.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/fails.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=/#|\.prototype\./,i=function(e,t){var s=a[l(e)];return s===u||s!==c&&(n(t)?r(t):!!t)},l=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},a=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},"./node_modules/core-js/internals/is-null-or-undefined.js":e=>{"use strict";e.exports=function(e){return null==e}},"./node_modules/core-js/internals/is-object.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-callable.js");e.exports=function(e){return"object"==typeof e?null!==e:r(e)}},"./node_modules/core-js/internals/is-possible-prototype.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-object.js");e.exports=function(e){return r(e)||null===e}},"./node_modules/core-js/internals/is-pure.js":e=>{"use strict";e.exports=!1},"./node_modules/core-js/internals/is-symbol.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/get-built-in.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=s("./node_modules/core-js/internals/object-is-prototype-of.js"),i=s("./node_modules/core-js/internals/use-symbol-as-uid.js"),l=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return n(t)&&o(t.prototype,l(e))}},"./node_modules/core-js/internals/iterator-create-constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/iterators-core.js").IteratorPrototype,n=s("./node_modules/core-js/internals/object-create.js"),o=s("./node_modules/core-js/internals/create-property-descriptor.js"),i=s("./node_modules/core-js/internals/set-to-string-tag.js"),l=s("./node_modules/core-js/internals/iterators.js"),a=function(){return this};e.exports=function(e,t,s,c){var u=t+" Iterator";return e.prototype=n(r,{next:o(+!c,s)}),i(e,u,!1,!0),l[u]=a,e}},"./node_modules/core-js/internals/iterator-define.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/function-call.js"),o=s("./node_modules/core-js/internals/is-pure.js"),i=s("./node_modules/core-js/internals/function-name.js"),l=s("./node_modules/core-js/internals/is-callable.js"),a=s("./node_modules/core-js/internals/iterator-create-constructor.js"),c=s("./node_modules/core-js/internals/object-get-prototype-of.js"),u=s("./node_modules/core-js/internals/object-set-prototype-of.js"),d=s("./node_modules/core-js/internals/set-to-string-tag.js"),h=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),m=s("./node_modules/core-js/internals/define-built-in.js"),f=s("./node_modules/core-js/internals/well-known-symbol.js"),p=s("./node_modules/core-js/internals/iterators.js"),g=s("./node_modules/core-js/internals/iterators-core.js"),b=i.PROPER,y=i.CONFIGURABLE,v=g.IteratorPrototype,j=g.BUGGY_SAFARI_ITERATORS,_=f("iterator"),w="keys",E="values",A="entries",S=function(){return this};e.exports=function(e,t,s,i,f,g,k){a(s,t,i);var x,O,N,q=function(e){if(e===f&&M)return M;if(!j&&e&&e in C)return C[e];switch(e){case w:case E:case A:return function(){return new s(this,e)}}return function(){return new s(this)}},T=t+" Iterator",L=!1,C=e.prototype,R=C[_]||C["@@iterator"]||f&&C[f],M=!j&&R||q(f),I="Array"===t&&C.entries||R;if(I&&(x=c(I.call(new e)))!==Object.prototype&&x.next&&(o||c(x)===v||(u?u(x,v):l(x[_])||m(x,_,S)),d(x,T,!0,!0),o&&(p[T]=S)),b&&f===E&&R&&R.name!==E&&(!o&&y?h(C,"name",E):(L=!0,M=function(){return n(R,this)})),f)if(O={values:q(E),keys:g?M:q(w),entries:q(A)},k)for(N in O)(j||L||!(N in C))&&m(C,N,O[N]);else r({target:t,proto:!0,forced:j||L},O);return o&&!k||C[_]===M||m(C,_,M,{name:f}),p[t]=M,O}},"./node_modules/core-js/internals/iterators-core.js":(e,t,s)=>{"use strict";var r,n,o,i=s("./node_modules/core-js/internals/fails.js"),l=s("./node_modules/core-js/internals/is-callable.js"),a=s("./node_modules/core-js/internals/is-object.js"),c=s("./node_modules/core-js/internals/object-create.js"),u=s("./node_modules/core-js/internals/object-get-prototype-of.js"),d=s("./node_modules/core-js/internals/define-built-in.js"),h=s("./node_modules/core-js/internals/well-known-symbol.js"),m=s("./node_modules/core-js/internals/is-pure.js"),f=h("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(n=u(u(o)))!==Object.prototype&&(r=n):p=!0),!a(r)||i((function(){var e={};return r[f].call(e)!==e}))?r={}:m&&(r=c(r)),l(r[f])||d(r,f,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},"./node_modules/core-js/internals/iterators.js":e=>{"use strict";e.exports={}},"./node_modules/core-js/internals/length-of-array-like.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-length.js");e.exports=function(e){return r(e.length)}},"./node_modules/core-js/internals/make-built-in.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/is-callable.js"),i=s("./node_modules/core-js/internals/has-own-property.js"),l=s("./node_modules/core-js/internals/descriptors.js"),a=s("./node_modules/core-js/internals/function-name.js").CONFIGURABLE,c=s("./node_modules/core-js/internals/inspect-source.js"),u=s("./node_modules/core-js/internals/internal-state.js"),d=u.enforce,h=u.get,m=String,f=Object.defineProperty,p=r("".slice),g=r("".replace),b=r([].join),y=l&&!n((function(){return 8!==f((function(){}),"length",{value:8}).length})),v=String(String).split("String"),j=e.exports=function(e,t,s){"Symbol("===p(m(t),0,7)&&(t="["+g(m(t),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),s&&s.getter&&(t="get "+t),s&&s.setter&&(t="set "+t),(!i(e,"name")||a&&e.name!==t)&&(l?f(e,"name",{value:t,configurable:!0}):e.name=t),y&&s&&i(s,"arity")&&e.length!==s.arity&&f(e,"length",{value:s.arity});try{s&&i(s,"constructor")&&s.constructor?l&&f(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(n){}var r=d(e);return i(r,"source")||(r.source=b(v,"string"==typeof t?t:"")),e};Function.prototype.toString=j((function(){return o(this)&&h(this).source||c(this)}),"toString")},"./node_modules/core-js/internals/math-trunc.js":e=>{"use strict";var t=Math.ceil,s=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?s:t)(r)}},"./node_modules/core-js/internals/normalize-string-argument.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-string.js");e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:r(e)}},"./node_modules/core-js/internals/object-create.js":(e,t,s)=>{"use strict";var r,n=s("./node_modules/core-js/internals/an-object.js"),o=s("./node_modules/core-js/internals/object-define-properties.js"),i=s("./node_modules/core-js/internals/enum-bug-keys.js"),l=s("./node_modules/core-js/internals/hidden-keys.js"),a=s("./node_modules/core-js/internals/html.js"),c=s("./node_modules/core-js/internals/document-create-element.js"),u=s("./node_modules/core-js/internals/shared-key.js"),d="prototype",h="script",m=u("IE_PROTO"),f=function(){},p=function(e){return"<"+h+">"+e+"</"+h+">"},g=function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t},b=function(){try{r=new ActiveXObject("htmlfile")}catch(o){}var e,t,s;b="undefined"!=typeof document?document.domain&&r?g(r):(t=c("iframe"),s="java"+h+":",t.style.display="none",a.appendChild(t),t.src=String(s),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):g(r);for(var n=i.length;n--;)delete b[d][i[n]];return b()};l[m]=!0,e.exports=Object.create||function(e,t){var s;return null!==e?(f[d]=n(e),s=new f,f[d]=null,s[m]=e):s=b(),void 0===t?s:o.f(s,t)}},"./node_modules/core-js/internals/object-define-properties.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/v8-prototype-define-bug.js"),o=s("./node_modules/core-js/internals/object-define-property.js"),i=s("./node_modules/core-js/internals/an-object.js"),l=s("./node_modules/core-js/internals/to-indexed-object.js"),a=s("./node_modules/core-js/internals/object-keys.js");t.f=r&&!n?Object.defineProperties:function(e,t){i(e);for(var s,r=l(t),n=a(t),c=n.length,u=0;c>u;)o.f(e,s=n[u++],r[s]);return e}},"./node_modules/core-js/internals/object-define-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/ie8-dom-define.js"),o=s("./node_modules/core-js/internals/v8-prototype-define-bug.js"),i=s("./node_modules/core-js/internals/an-object.js"),l=s("./node_modules/core-js/internals/to-property-key.js"),a=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d="enumerable",h="configurable",m="writable";t.f=r?o?function(e,t,s){if(i(e),t=l(t),i(s),"function"==typeof e&&"prototype"===t&&"value"in s&&m in s&&!s[m]){var r=u(e,t);r&&r[m]&&(e[t]=s.value,s={configurable:h in s?s[h]:r[h],enumerable:d in s?s[d]:r[d],writable:!1})}return c(e,t,s)}:c:function(e,t,s){if(i(e),t=l(t),i(s),n)try{return c(e,t,s)}catch(r){}if("get"in s||"set"in s)throw new a("Accessors not supported");return"value"in s&&(e[t]=s.value),e}},"./node_modules/core-js/internals/object-get-own-property-descriptor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/function-call.js"),o=s("./node_modules/core-js/internals/object-property-is-enumerable.js"),i=s("./node_modules/core-js/internals/create-property-descriptor.js"),l=s("./node_modules/core-js/internals/to-indexed-object.js"),a=s("./node_modules/core-js/internals/to-property-key.js"),c=s("./node_modules/core-js/internals/has-own-property.js"),u=s("./node_modules/core-js/internals/ie8-dom-define.js"),d=Object.getOwnPropertyDescriptor;t.f=r?d:function(e,t){if(e=l(e),t=a(t),u)try{return d(e,t)}catch(s){}if(c(e,t))return i(!n(o.f,e,t),e[t])}},"./node_modules/core-js/internals/object-get-own-property-names-external.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/classof-raw.js"),n=s("./node_modules/core-js/internals/to-indexed-object.js"),o=s("./node_modules/core-js/internals/object-get-own-property-names.js").f,i=s("./node_modules/core-js/internals/array-slice.js"),l="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return l&&"Window"===r(e)?function(e){try{return o(e)}catch(t){return i(l)}}(e):o(n(e))}},"./node_modules/core-js/internals/object-get-own-property-names.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/object-keys-internal.js"),n=s("./node_modules/core-js/internals/enum-bug-keys.js").concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,n)}},"./node_modules/core-js/internals/object-get-own-property-symbols.js":(e,t)=>{"use strict";t.f=Object.getOwnPropertySymbols},"./node_modules/core-js/internals/object-get-prototype-of.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/has-own-property.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=s("./node_modules/core-js/internals/to-object.js"),i=s("./node_modules/core-js/internals/shared-key.js"),l=s("./node_modules/core-js/internals/correct-prototype-getter.js"),a=i("IE_PROTO"),c=Object,u=c.prototype;e.exports=l?c.getPrototypeOf:function(e){var t=o(e);if(r(t,a))return t[a];var s=t.constructor;return n(s)&&t instanceof s?s.prototype:t instanceof c?u:null}},"./node_modules/core-js/internals/object-is-prototype-of.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js");e.exports=r({}.isPrototypeOf)},"./node_modules/core-js/internals/object-keys-internal.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/has-own-property.js"),o=s("./node_modules/core-js/internals/to-indexed-object.js"),i=s("./node_modules/core-js/internals/array-includes.js").indexOf,l=s("./node_modules/core-js/internals/hidden-keys.js"),a=r([].push);e.exports=function(e,t){var s,r=o(e),c=0,u=[];for(s in r)!n(l,s)&&n(r,s)&&a(u,s);for(;t.length>c;)n(r,s=t[c++])&&(~i(u,s)||a(u,s));return u}},"./node_modules/core-js/internals/object-keys.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/object-keys-internal.js"),n=s("./node_modules/core-js/internals/enum-bug-keys.js");e.exports=Object.keys||function(e){return r(e,n)}},"./node_modules/core-js/internals/object-property-is-enumerable.js":(e,t)=>{"use strict";var s={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,n=r&&!s.call({1:2},1);t.f=n?function(e){var t=r(this,e);return!!t&&t.enumerable}:s},"./node_modules/core-js/internals/object-set-prototype-of.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this-accessor.js"),n=s("./node_modules/core-js/internals/is-object.js"),o=s("./node_modules/core-js/internals/require-object-coercible.js"),i=s("./node_modules/core-js/internals/a-possible-prototype.js");e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,s={};try{(e=r(Object.prototype,"__proto__","set"))(s,[]),t=s instanceof Array}catch(l){}return function(s,r){return o(s),i(r),n(s)?(t?e(s,r):s.__proto__=r,s):s}}():void 0)},"./node_modules/core-js/internals/object-to-string.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-string-tag-support.js"),n=s("./node_modules/core-js/internals/classof.js");e.exports=r?{}.toString:function(){return"[object "+n(this)+"]"}},"./node_modules/core-js/internals/ordinary-to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-call.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=s("./node_modules/core-js/internals/is-object.js"),i=TypeError;e.exports=function(e,t){var s,l;if("string"===t&&n(s=e.toString)&&!o(l=r(s,e)))return l;if(n(s=e.valueOf)&&!o(l=r(s,e)))return l;if("string"!==t&&n(s=e.toString)&&!o(l=r(s,e)))return l;throw new i("Can't convert object to primitive value")}},"./node_modules/core-js/internals/own-keys.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/get-built-in.js"),n=s("./node_modules/core-js/internals/function-uncurry-this.js"),o=s("./node_modules/core-js/internals/object-get-own-property-names.js"),i=s("./node_modules/core-js/internals/object-get-own-property-symbols.js"),l=s("./node_modules/core-js/internals/an-object.js"),a=n([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(l(e)),s=i.f;return s?a(t,s(e)):t}},"./node_modules/core-js/internals/path.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js");e.exports=r},"./node_modules/core-js/internals/proxy-accessor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/object-define-property.js").f;e.exports=function(e,t,s){s in e||r(e,s,{configurable:!0,get:function(){return t[s]},set:function(e){t[s]=e}})}},"./node_modules/core-js/internals/require-object-coercible.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-null-or-undefined.js"),n=TypeError;e.exports=function(e){if(r(e))throw new n("Can't call method on "+e);return e}},"./node_modules/core-js/internals/set-to-string-tag.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/object-define-property.js").f,n=s("./node_modules/core-js/internals/has-own-property.js"),o=s("./node_modules/core-js/internals/well-known-symbol.js")("toStringTag");e.exports=function(e,t,s){e&&!s&&(e=e.prototype),e&&!n(e,o)&&r(e,o,{configurable:!0,value:t})}},"./node_modules/core-js/internals/shared-key.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/shared.js"),n=s("./node_modules/core-js/internals/uid.js"),o=r("keys");e.exports=function(e){return o[e]||(o[e]=n(e))}},"./node_modules/core-js/internals/shared-store.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/is-pure.js"),n=s("./node_modules/core-js/internals/global.js"),o=s("./node_modules/core-js/internals/define-global-property.js"),i="__core-js_shared__",l=e.exports=n[i]||o(i,{});(l.versions||(l.versions=[])).push({version:"3.37.1",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.37.1/LICENSE",source:"https://github.com/zloirock/core-js"})},"./node_modules/core-js/internals/shared.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/shared-store.js");e.exports=function(e,t){return r[e]||(r[e]=t||{})}},"./node_modules/core-js/internals/string-multibyte.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/to-integer-or-infinity.js"),o=s("./node_modules/core-js/internals/to-string.js"),i=s("./node_modules/core-js/internals/require-object-coercible.js"),l=r("".charAt),a=r("".charCodeAt),c=r("".slice),u=function(e){return function(t,s){var r,u,d=o(i(t)),h=n(s),m=d.length;return h<0||h>=m?e?"":void 0:(r=a(d,h))<55296||r>56319||h+1===m||(u=a(d,h+1))<56320||u>57343?e?l(d,h):r:e?c(d,h,h+2):u-56320+(r-55296<<10)+65536}};e.exports={codeAt:u(!1),charAt:u(!0)}},"./node_modules/core-js/internals/string-trim.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=s("./node_modules/core-js/internals/require-object-coercible.js"),o=s("./node_modules/core-js/internals/to-string.js"),i=s("./node_modules/core-js/internals/whitespaces.js"),l=r("".replace),a=RegExp("^["+i+"]+"),c=RegExp("(^|[^"+i+"])["+i+"]+$"),u=function(e){return function(t){var s=o(n(t));return 1&e&&(s=l(s,a,"")),2&e&&(s=l(s,c,"$1")),s}};e.exports={start:u(1),end:u(2),trim:u(3)}},"./node_modules/core-js/internals/symbol-constructor-detection.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/engine-v8-version.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/global.js").String;e.exports=!!Object.getOwnPropertySymbols&&!n((function(){var e=Symbol("symbol detection");return!o(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},"./node_modules/core-js/internals/symbol-define-to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-call.js"),n=s("./node_modules/core-js/internals/get-built-in.js"),o=s("./node_modules/core-js/internals/well-known-symbol.js"),i=s("./node_modules/core-js/internals/define-built-in.js");e.exports=function(){var e=n("Symbol"),t=e&&e.prototype,s=t&&t.valueOf,l=o("toPrimitive");t&&!t[l]&&i(t,l,(function(e){return r(s,this)}),{arity:1})}},"./node_modules/core-js/internals/symbol-registry-detection.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/symbol-constructor-detection.js");e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},"./node_modules/core-js/internals/this-number-value.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js");e.exports=r(1..valueOf)},"./node_modules/core-js/internals/to-absolute-index.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-integer-or-infinity.js"),n=Math.max,o=Math.min;e.exports=function(e,t){var s=r(e);return s<0?n(s+t,0):o(s,t)}},"./node_modules/core-js/internals/to-indexed-object.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/indexed-object.js"),n=s("./node_modules/core-js/internals/require-object-coercible.js");e.exports=function(e){return r(n(e))}},"./node_modules/core-js/internals/to-integer-or-infinity.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/math-trunc.js");e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},"./node_modules/core-js/internals/to-length.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-integer-or-infinity.js"),n=Math.min;e.exports=function(e){var t=r(e);return t>0?n(t,9007199254740991):0}},"./node_modules/core-js/internals/to-object.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/require-object-coercible.js"),n=Object;e.exports=function(e){return n(r(e))}},"./node_modules/core-js/internals/to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-call.js"),n=s("./node_modules/core-js/internals/is-object.js"),o=s("./node_modules/core-js/internals/is-symbol.js"),i=s("./node_modules/core-js/internals/get-method.js"),l=s("./node_modules/core-js/internals/ordinary-to-primitive.js"),a=s("./node_modules/core-js/internals/well-known-symbol.js"),c=TypeError,u=a("toPrimitive");e.exports=function(e,t){if(!n(e)||o(e))return e;var s,a=i(e,u);if(a){if(void 0===t&&(t="default"),s=r(a,e,t),!n(s)||o(s))return s;throw new c("Can't convert object to primitive value")}return void 0===t&&(t="number"),l(e,t)}},"./node_modules/core-js/internals/to-property-key.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-primitive.js"),n=s("./node_modules/core-js/internals/is-symbol.js");e.exports=function(e){var t=r(e,"string");return n(t)?t:t+""}},"./node_modules/core-js/internals/to-string-tag-support.js":(e,t,s)=>{"use strict";var r={};r[s("./node_modules/core-js/internals/well-known-symbol.js")("toStringTag")]="z",e.exports="[object z]"===String(r)},"./node_modules/core-js/internals/to-string.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/classof.js"),n=String;e.exports=function(e){if("Symbol"===r(e))throw new TypeError("Cannot convert a Symbol value to a string");return n(e)}},"./node_modules/core-js/internals/try-to-string.js":e=>{"use strict";var t=String;e.exports=function(e){try{return t(e)}catch(s){return"Object"}}},"./node_modules/core-js/internals/uid.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/function-uncurry-this.js"),n=0,o=Math.random(),i=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++n+o,36)}},"./node_modules/core-js/internals/use-symbol-as-uid.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/symbol-constructor-detection.js");e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},"./node_modules/core-js/internals/v8-prototype-define-bug.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/descriptors.js"),n=s("./node_modules/core-js/internals/fails.js");e.exports=r&&n((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},"./node_modules/core-js/internals/weak-map-basic-detection.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/is-callable.js"),o=r.WeakMap;e.exports=n(o)&&/native code/.test(String(o))},"./node_modules/core-js/internals/well-known-symbol-define.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/path.js"),n=s("./node_modules/core-js/internals/has-own-property.js"),o=s("./node_modules/core-js/internals/well-known-symbol-wrapped.js"),i=s("./node_modules/core-js/internals/object-define-property.js").f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});n(t,e)||i(t,e,{value:o.f(e)})}},"./node_modules/core-js/internals/well-known-symbol-wrapped.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/well-known-symbol.js");t.f=r},"./node_modules/core-js/internals/well-known-symbol.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/shared.js"),o=s("./node_modules/core-js/internals/has-own-property.js"),i=s("./node_modules/core-js/internals/uid.js"),l=s("./node_modules/core-js/internals/symbol-constructor-detection.js"),a=s("./node_modules/core-js/internals/use-symbol-as-uid.js"),c=r.Symbol,u=n("wks"),d=a?c.for||c:c&&c.withoutSetter||i;e.exports=function(e){return o(u,e)||(u[e]=l&&o(c,e)?c[e]:d("Symbol."+e)),u[e]}},"./node_modules/core-js/internals/whitespaces.js":e=>{"use strict";e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"./node_modules/core-js/internals/wrap-error-constructor-with-cause.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/get-built-in.js"),n=s("./node_modules/core-js/internals/has-own-property.js"),o=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),i=s("./node_modules/core-js/internals/object-is-prototype-of.js"),l=s("./node_modules/core-js/internals/object-set-prototype-of.js"),a=s("./node_modules/core-js/internals/copy-constructor-properties.js"),c=s("./node_modules/core-js/internals/proxy-accessor.js"),u=s("./node_modules/core-js/internals/inherit-if-required.js"),d=s("./node_modules/core-js/internals/normalize-string-argument.js"),h=s("./node_modules/core-js/internals/install-error-cause.js"),m=s("./node_modules/core-js/internals/error-stack-install.js"),f=s("./node_modules/core-js/internals/descriptors.js"),p=s("./node_modules/core-js/internals/is-pure.js");e.exports=function(e,t,s,g){var b="stackTraceLimit",y=g?2:1,v=e.split("."),j=v[v.length-1],_=r.apply(null,v);if(_){var w=_.prototype;if(!p&&n(w,"cause")&&delete w.cause,!s)return _;var E=r("Error"),A=t((function(e,t){var s=d(g?t:e,void 0),r=g?new _(e):new _;return void 0!==s&&o(r,"message",s),m(r,A,r.stack,2),this&&i(w,this)&&u(r,this,A),arguments.length>y&&h(r,arguments[y]),r}));if(A.prototype=w,"Error"!==j?l?l(A,E):a(A,E,{name:!0}):f&&b in _&&(c(A,_,b),c(A,_,"prepareStackTrace")),a(A,_),!p)try{w.name!==j&&o(w,"name",j),w.constructor=A}catch(S){}return A}}},"./node_modules/core-js/modules/es.array.concat.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/is-array.js"),i=s("./node_modules/core-js/internals/is-object.js"),l=s("./node_modules/core-js/internals/to-object.js"),a=s("./node_modules/core-js/internals/length-of-array-like.js"),c=s("./node_modules/core-js/internals/does-not-exceed-safe-integer.js"),u=s("./node_modules/core-js/internals/create-property.js"),d=s("./node_modules/core-js/internals/array-species-create.js"),h=s("./node_modules/core-js/internals/array-method-has-species-support.js"),m=s("./node_modules/core-js/internals/well-known-symbol.js"),f=s("./node_modules/core-js/internals/engine-v8-version.js"),p=m("isConcatSpreadable"),g=f>=51||!n((function(){var e=[];return e[p]=!1,e.concat()[0]!==e})),b=function(e){if(!i(e))return!1;var t=e[p];return void 0!==t?!!t:o(e)};r({target:"Array",proto:!0,arity:1,forced:!g||!h("concat")},{concat:function(e){var t,s,r,n,o,i=l(this),h=d(i,0),m=0;for(t=-1,r=arguments.length;t<r;t++)if(b(o=-1===t?i:arguments[t]))for(n=a(o),c(m+n),s=0;s<n;s++,m++)s in o&&u(h,m,o[s]);else c(m+1),u(h,m++,o);return h.length=m,h}})},"./node_modules/core-js/modules/es.array.filter.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/array-iteration.js").filter;r({target:"Array",proto:!0,forced:!s("./node_modules/core-js/internals/array-method-has-species-support.js")("filter")},{filter:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}})},"./node_modules/core-js/modules/es.array.for-each.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/array-for-each.js");r({target:"Array",proto:!0,forced:[].forEach!==n},{forEach:n})},"./node_modules/core-js/modules/es.array.iterator.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-indexed-object.js"),n=s("./node_modules/core-js/internals/add-to-unscopables.js"),o=s("./node_modules/core-js/internals/iterators.js"),i=s("./node_modules/core-js/internals/internal-state.js"),l=s("./node_modules/core-js/internals/object-define-property.js").f,a=s("./node_modules/core-js/internals/iterator-define.js"),c=s("./node_modules/core-js/internals/create-iter-result-object.js"),u=s("./node_modules/core-js/internals/is-pure.js"),d=s("./node_modules/core-js/internals/descriptors.js"),h="Array Iterator",m=i.set,f=i.getterFor(h);e.exports=a(Array,"Array",(function(e,t){m(this,{type:h,target:r(e),index:0,kind:t})}),(function(){var e=f(this),t=e.target,s=e.index++;if(!t||s>=t.length)return e.target=void 0,c(void 0,!0);switch(e.kind){case"keys":return c(s,!1);case"values":return c(t[s],!1)}return c([s,t[s]],!1)}),"values");var p=o.Arguments=o.Array;if(n("keys"),n("values"),n("entries"),!u&&d&&"values"!==p.name)try{l(p,"name",{value:"values"})}catch(g){}},"./node_modules/core-js/modules/es.array.push.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/to-object.js"),o=s("./node_modules/core-js/internals/length-of-array-like.js"),i=s("./node_modules/core-js/internals/array-set-length.js"),l=s("./node_modules/core-js/internals/does-not-exceed-safe-integer.js");r({target:"Array",proto:!0,arity:1,forced:s("./node_modules/core-js/internals/fails.js")((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var t=n(this),s=o(t),r=arguments.length;l(s+r);for(var a=0;a<r;a++)t[s]=arguments[a],s++;return i(t,s),s}})},"./node_modules/core-js/modules/es.date.to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/has-own-property.js"),n=s("./node_modules/core-js/internals/define-built-in.js"),o=s("./node_modules/core-js/internals/date-to-primitive.js"),i=s("./node_modules/core-js/internals/well-known-symbol.js")("toPrimitive"),l=Date.prototype;r(l,i)||n(l,i,o)},"./node_modules/core-js/modules/es.error.cause.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/global.js"),o=s("./node_modules/core-js/internals/function-apply.js"),i=s("./node_modules/core-js/internals/wrap-error-constructor-with-cause.js"),l="WebAssembly",a=n[l],c=7!==new Error("e",{cause:7}).cause,u=function(e,t){var s={};s[e]=i(e,t,c),r({global:!0,constructor:!0,arity:1,forced:c},s)},d=function(e,t){if(a&&a[e]){var s={};s[e]=i(l+"."+e,t,c),r({target:l,stat:!0,constructor:!0,arity:1,forced:c},s)}};u("Error",(function(e){return function(t){return o(e,this,arguments)}})),u("EvalError",(function(e){return function(t){return o(e,this,arguments)}})),u("RangeError",(function(e){return function(t){return o(e,this,arguments)}})),u("ReferenceError",(function(e){return function(t){return o(e,this,arguments)}})),u("SyntaxError",(function(e){return function(t){return o(e,this,arguments)}})),u("TypeError",(function(e){return function(t){return o(e,this,arguments)}})),u("URIError",(function(e){return function(t){return o(e,this,arguments)}})),d("CompileError",(function(e){return function(t){return o(e,this,arguments)}})),d("LinkError",(function(e){return function(t){return o(e,this,arguments)}})),d("RuntimeError",(function(e){return function(t){return o(e,this,arguments)}}))},"./node_modules/core-js/modules/es.error.to-string.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/define-built-in.js"),n=s("./node_modules/core-js/internals/error-to-string.js"),o=Error.prototype;o.toString!==n&&r(o,"toString",n)},"./node_modules/core-js/modules/es.function.bind.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/function-bind.js");r({target:"Function",proto:!0,forced:Function.bind!==n},{bind:n})},"./node_modules/core-js/modules/es.json.stringify.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/get-built-in.js"),o=s("./node_modules/core-js/internals/function-apply.js"),i=s("./node_modules/core-js/internals/function-call.js"),l=s("./node_modules/core-js/internals/function-uncurry-this.js"),a=s("./node_modules/core-js/internals/fails.js"),c=s("./node_modules/core-js/internals/is-callable.js"),u=s("./node_modules/core-js/internals/is-symbol.js"),d=s("./node_modules/core-js/internals/array-slice.js"),h=s("./node_modules/core-js/internals/get-json-replacer-function.js"),m=s("./node_modules/core-js/internals/symbol-constructor-detection.js"),f=String,p=n("JSON","stringify"),g=l(/./.exec),b=l("".charAt),y=l("".charCodeAt),v=l("".replace),j=l(1..toString),_=/[\uD800-\uDFFF]/g,w=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,A=!m||a((function(){var e=n("Symbol")("stringify detection");return"[null]"!==p([e])||"{}"!==p({a:e})||"{}"!==p(Object(e))})),S=a((function(){return'"\\udf06\\ud834"'!==p("\udf06\ud834")||'"\\udead"'!==p("\udead")})),k=function(e,t){var s=d(arguments),r=h(t);if(c(r)||void 0!==e&&!u(e))return s[1]=function(e,t){if(c(r)&&(t=i(r,this,f(e),t)),!u(t))return t},o(p,null,s)},x=function(e,t,s){var r=b(s,t-1),n=b(s,t+1);return g(w,e)&&!g(E,n)||g(E,e)&&!g(w,r)?"\\u"+j(y(e,0),16):e};p&&r({target:"JSON",stat:!0,arity:3,forced:A||S},{stringify:function(e,t,s){var r=d(arguments),n=o(A?k:p,null,r);return S&&"string"==typeof n?v(n,_,x):n}})},"./node_modules/core-js/modules/es.number.constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/is-pure.js"),o=s("./node_modules/core-js/internals/descriptors.js"),i=s("./node_modules/core-js/internals/global.js"),l=s("./node_modules/core-js/internals/path.js"),a=s("./node_modules/core-js/internals/function-uncurry-this.js"),c=s("./node_modules/core-js/internals/is-forced.js"),u=s("./node_modules/core-js/internals/has-own-property.js"),d=s("./node_modules/core-js/internals/inherit-if-required.js"),h=s("./node_modules/core-js/internals/object-is-prototype-of.js"),m=s("./node_modules/core-js/internals/is-symbol.js"),f=s("./node_modules/core-js/internals/to-primitive.js"),p=s("./node_modules/core-js/internals/fails.js"),g=s("./node_modules/core-js/internals/object-get-own-property-names.js").f,b=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js").f,y=s("./node_modules/core-js/internals/object-define-property.js").f,v=s("./node_modules/core-js/internals/this-number-value.js"),j=s("./node_modules/core-js/internals/string-trim.js").trim,_="Number",w=i[_],E=l[_],A=w.prototype,S=i.TypeError,k=a("".slice),x=a("".charCodeAt),O=function(e){var t,s,r,n,o,i,l,a,c=f(e,"number");if(m(c))throw new S("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=j(c),43===(t=x(c,0))||45===t){if(88===(s=x(c,2))||120===s)return NaN}else if(48===t){switch(x(c,1)){case 66:case 98:r=2,n=49;break;case 79:case 111:r=8,n=55;break;default:return+c}for(i=(o=k(c,2)).length,l=0;l<i;l++)if((a=x(o,l))<48||a>n)return NaN;return parseInt(o,r)}return+c},N=c(_,!w(" 0o1")||!w("0b1")||w("+0x1")),q=function(e){var t,s=arguments.length<1?0:w(function(e){var t=f(e,"number");return"bigint"==typeof t?t:O(t)}(e));return h(A,t=this)&&p((function(){v(t)}))?d(Object(s),this,q):s};q.prototype=A,N&&!n&&(A.constructor=q),r({global:!0,constructor:!0,wrap:!0,forced:N},{Number:q});var T=function(e,t){for(var s,r=o?g(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),n=0;r.length>n;n++)u(t,s=r[n])&&!u(e,s)&&y(e,s,b(t,s))};n&&E&&T(l[_],E),(N||n)&&T(l[_],w)},"./node_modules/core-js/modules/es.object.create.js":(e,t,s)=>{"use strict";s("./node_modules/core-js/internals/export.js")({target:"Object",stat:!0,sham:!s("./node_modules/core-js/internals/descriptors.js")},{create:s("./node_modules/core-js/internals/object-create.js")})},"./node_modules/core-js/modules/es.object.define-properties.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/descriptors.js"),o=s("./node_modules/core-js/internals/object-define-properties.js").f;r({target:"Object",stat:!0,forced:Object.defineProperties!==o,sham:!n},{defineProperties:o})},"./node_modules/core-js/modules/es.object.define-property.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/descriptors.js"),o=s("./node_modules/core-js/internals/object-define-property.js").f;r({target:"Object",stat:!0,forced:Object.defineProperty!==o,sham:!n},{defineProperty:o})},"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/to-indexed-object.js"),i=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js").f,l=s("./node_modules/core-js/internals/descriptors.js");r({target:"Object",stat:!0,forced:!l||n((function(){i(1)})),sham:!l},{getOwnPropertyDescriptor:function(e,t){return i(o(e),t)}})},"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/descriptors.js"),o=s("./node_modules/core-js/internals/own-keys.js"),i=s("./node_modules/core-js/internals/to-indexed-object.js"),l=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js"),a=s("./node_modules/core-js/internals/create-property.js");r({target:"Object",stat:!0,sham:!n},{getOwnPropertyDescriptors:function(e){for(var t,s,r=i(e),n=l.f,c=o(r),u={},d=0;c.length>d;)void 0!==(s=n(r,t=c[d++]))&&a(u,t,s);return u}})},"./node_modules/core-js/modules/es.object.get-own-property-symbols.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/symbol-constructor-detection.js"),o=s("./node_modules/core-js/internals/fails.js"),i=s("./node_modules/core-js/internals/object-get-own-property-symbols.js"),l=s("./node_modules/core-js/internals/to-object.js");r({target:"Object",stat:!0,forced:!n||o((function(){i.f(1)}))},{getOwnPropertySymbols:function(e){var t=i.f;return t?t(l(e)):[]}})},"./node_modules/core-js/modules/es.object.get-prototype-of.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/fails.js"),o=s("./node_modules/core-js/internals/to-object.js"),i=s("./node_modules/core-js/internals/object-get-prototype-of.js"),l=s("./node_modules/core-js/internals/correct-prototype-getter.js");r({target:"Object",stat:!0,forced:n((function(){i(1)})),sham:!l},{getPrototypeOf:function(e){return i(o(e))}})},"./node_modules/core-js/modules/es.object.keys.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/to-object.js"),o=s("./node_modules/core-js/internals/object-keys.js");r({target:"Object",stat:!0,forced:s("./node_modules/core-js/internals/fails.js")((function(){o(1)}))},{keys:function(e){return o(n(e))}})},"./node_modules/core-js/modules/es.object.set-prototype-of.js":(e,t,s)=>{"use strict";s("./node_modules/core-js/internals/export.js")({target:"Object",stat:!0},{setPrototypeOf:s("./node_modules/core-js/internals/object-set-prototype-of.js")})},"./node_modules/core-js/modules/es.object.to-string.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/to-string-tag-support.js"),n=s("./node_modules/core-js/internals/define-built-in.js"),o=s("./node_modules/core-js/internals/object-to-string.js");r||n(Object.prototype,"toString",o,{unsafe:!0})},"./node_modules/core-js/modules/es.reflect.construct.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/get-built-in.js"),o=s("./node_modules/core-js/internals/function-apply.js"),i=s("./node_modules/core-js/internals/function-bind.js"),l=s("./node_modules/core-js/internals/a-constructor.js"),a=s("./node_modules/core-js/internals/an-object.js"),c=s("./node_modules/core-js/internals/is-object.js"),u=s("./node_modules/core-js/internals/object-create.js"),d=s("./node_modules/core-js/internals/fails.js"),h=n("Reflect","construct"),m=Object.prototype,f=[].push,p=d((function(){function e(){}return!(h((function(){}),[],e)instanceof e)})),g=!d((function(){h((function(){}))})),b=p||g;r({target:"Reflect",stat:!0,forced:b,sham:b},{construct:function(e,t){l(e),a(t);var s=arguments.length<3?e:l(arguments[2]);if(g&&!p)return h(e,t,s);if(e===s){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return o(f,r,t),new(o(i,e,r))}var n=s.prototype,d=u(c(n)?n:m),b=o(e,d,t);return c(b)?b:d}})},"./node_modules/core-js/modules/es.string.iterator.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/string-multibyte.js").charAt,n=s("./node_modules/core-js/internals/to-string.js"),o=s("./node_modules/core-js/internals/internal-state.js"),i=s("./node_modules/core-js/internals/iterator-define.js"),l=s("./node_modules/core-js/internals/create-iter-result-object.js"),a="String Iterator",c=o.set,u=o.getterFor(a);i(String,"String",(function(e){c(this,{type:a,string:n(e),index:0})}),(function(){var e,t=u(this),s=t.string,n=t.index;return n>=s.length?l(void 0,!0):(e=r(s,n),t.index+=e.length,l(e,!1))}))},"./node_modules/core-js/modules/es.symbol.constructor.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/global.js"),o=s("./node_modules/core-js/internals/function-call.js"),i=s("./node_modules/core-js/internals/function-uncurry-this.js"),l=s("./node_modules/core-js/internals/is-pure.js"),a=s("./node_modules/core-js/internals/descriptors.js"),c=s("./node_modules/core-js/internals/symbol-constructor-detection.js"),u=s("./node_modules/core-js/internals/fails.js"),d=s("./node_modules/core-js/internals/has-own-property.js"),h=s("./node_modules/core-js/internals/object-is-prototype-of.js"),m=s("./node_modules/core-js/internals/an-object.js"),f=s("./node_modules/core-js/internals/to-indexed-object.js"),p=s("./node_modules/core-js/internals/to-property-key.js"),g=s("./node_modules/core-js/internals/to-string.js"),b=s("./node_modules/core-js/internals/create-property-descriptor.js"),y=s("./node_modules/core-js/internals/object-create.js"),v=s("./node_modules/core-js/internals/object-keys.js"),j=s("./node_modules/core-js/internals/object-get-own-property-names.js"),_=s("./node_modules/core-js/internals/object-get-own-property-names-external.js"),w=s("./node_modules/core-js/internals/object-get-own-property-symbols.js"),E=s("./node_modules/core-js/internals/object-get-own-property-descriptor.js"),A=s("./node_modules/core-js/internals/object-define-property.js"),S=s("./node_modules/core-js/internals/object-define-properties.js"),k=s("./node_modules/core-js/internals/object-property-is-enumerable.js"),x=s("./node_modules/core-js/internals/define-built-in.js"),O=s("./node_modules/core-js/internals/define-built-in-accessor.js"),N=s("./node_modules/core-js/internals/shared.js"),q=s("./node_modules/core-js/internals/shared-key.js"),T=s("./node_modules/core-js/internals/hidden-keys.js"),L=s("./node_modules/core-js/internals/uid.js"),C=s("./node_modules/core-js/internals/well-known-symbol.js"),R=s("./node_modules/core-js/internals/well-known-symbol-wrapped.js"),M=s("./node_modules/core-js/internals/well-known-symbol-define.js"),I=s("./node_modules/core-js/internals/symbol-define-to-primitive.js"),P=s("./node_modules/core-js/internals/set-to-string-tag.js"),B=s("./node_modules/core-js/internals/internal-state.js"),F=s("./node_modules/core-js/internals/array-iteration.js").forEach,D=q("hidden"),H="Symbol",U="prototype",V=B.set,$=B.getterFor(H),z=Object[U],K=n.Symbol,W=K&&K[U],G=n.RangeError,Z=n.TypeError,X=n.QObject,Y=E.f,J=A.f,Q=_.f,ee=k.f,te=i([].push),se=N("symbols"),re=N("op-symbols"),ne=N("wks"),oe=!X||!X[U]||!X[U].findChild,ie=function(e,t,s){var r=Y(z,t);r&&delete z[t],J(e,t,s),r&&e!==z&&J(z,t,r)},le=a&&u((function(){return 7!==y(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?ie:J,ae=function(e,t){var s=se[e]=y(W);return V(s,{type:H,tag:e,description:t}),a||(s.description=t),s},ce=function(e,t,s){e===z&&ce(re,t,s),m(e);var r=p(t);return m(s),d(se,r)?(s.enumerable?(d(e,D)&&e[D][r]&&(e[D][r]=!1),s=y(s,{enumerable:b(0,!1)})):(d(e,D)||J(e,D,b(1,y(null))),e[D][r]=!0),le(e,r,s)):J(e,r,s)},ue=function(e,t){m(e);var s=f(t),r=v(s).concat(fe(s));return F(r,(function(t){a&&!o(de,s,t)||ce(e,t,s[t])})),e},de=function(e){var t=p(e),s=o(ee,this,t);return!(this===z&&d(se,t)&&!d(re,t))&&(!(s||!d(this,t)||!d(se,t)||d(this,D)&&this[D][t])||s)},he=function(e,t){var s=f(e),r=p(t);if(s!==z||!d(se,r)||d(re,r)){var n=Y(s,r);return!n||!d(se,r)||d(s,D)&&s[D][r]||(n.enumerable=!0),n}},me=function(e){var t=Q(f(e)),s=[];return F(t,(function(e){d(se,e)||d(T,e)||te(s,e)})),s},fe=function(e){var t=e===z,s=Q(t?re:f(e)),r=[];return F(s,(function(e){!d(se,e)||t&&!d(z,e)||te(r,se[e])})),r};c||(x(W=(K=function(){if(h(W,this))throw new Z("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,t=L(e),s=function(e){var r=void 0===this?n:this;r===z&&o(s,re,e),d(r,D)&&d(r[D],t)&&(r[D][t]=!1);var i=b(1,e);try{le(r,t,i)}catch(l){if(!(l instanceof G))throw l;ie(r,t,i)}};return a&&oe&&le(z,t,{configurable:!0,set:s}),ae(t,e)})[U],"toString",(function(){return $(this).tag})),x(K,"withoutSetter",(function(e){return ae(L(e),e)})),k.f=de,A.f=ce,S.f=ue,E.f=he,j.f=_.f=me,w.f=fe,R.f=function(e){return ae(C(e),e)},a&&(O(W,"description",{configurable:!0,get:function(){return $(this).description}}),l||x(z,"propertyIsEnumerable",de,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!c,sham:!c},{Symbol:K}),F(v(ne),(function(e){M(e)})),r({target:H,stat:!0,forced:!c},{useSetter:function(){oe=!0},useSimple:function(){oe=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!a},{create:function(e,t){return void 0===t?y(e):ue(y(e),t)},defineProperty:ce,defineProperties:ue,getOwnPropertyDescriptor:he}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:me}),I(),P(K,H),T[D]=!0},"./node_modules/core-js/modules/es.symbol.description.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/descriptors.js"),o=s("./node_modules/core-js/internals/global.js"),i=s("./node_modules/core-js/internals/function-uncurry-this.js"),l=s("./node_modules/core-js/internals/has-own-property.js"),a=s("./node_modules/core-js/internals/is-callable.js"),c=s("./node_modules/core-js/internals/object-is-prototype-of.js"),u=s("./node_modules/core-js/internals/to-string.js"),d=s("./node_modules/core-js/internals/define-built-in-accessor.js"),h=s("./node_modules/core-js/internals/copy-constructor-properties.js"),m=o.Symbol,f=m&&m.prototype;if(n&&a(m)&&(!("description"in f)||void 0!==m().description)){var p={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),t=c(f,this)?new m(e):void 0===e?m():m(e);return""===e&&(p[t]=!0),t};h(g,m),g.prototype=f,f.constructor=g;var b="Symbol(description detection)"===String(m("description detection")),y=i(f.valueOf),v=i(f.toString),j=/^Symbol\((.*)\)[^)]+$/,_=i("".replace),w=i("".slice);d(f,"description",{configurable:!0,get:function(){var e=y(this);if(l(p,e))return"";var t=v(e),s=b?w(t,7,-1):_(t,j,"$1");return""===s?void 0:s}}),r({global:!0,constructor:!0,forced:!0},{Symbol:g})}},"./node_modules/core-js/modules/es.symbol.for.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/get-built-in.js"),o=s("./node_modules/core-js/internals/has-own-property.js"),i=s("./node_modules/core-js/internals/to-string.js"),l=s("./node_modules/core-js/internals/shared.js"),a=s("./node_modules/core-js/internals/symbol-registry-detection.js"),c=l("string-to-symbol-registry"),u=l("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!a},{for:function(e){var t=i(e);if(o(c,t))return c[t];var s=n("Symbol")(t);return c[t]=s,u[s]=t,s}})},"./node_modules/core-js/modules/es.symbol.iterator.js":(e,t,s)=>{"use strict";s("./node_modules/core-js/internals/well-known-symbol-define.js")("iterator")},"./node_modules/core-js/modules/es.symbol.js":(e,t,s)=>{"use strict";s("./node_modules/core-js/modules/es.symbol.constructor.js"),s("./node_modules/core-js/modules/es.symbol.for.js"),s("./node_modules/core-js/modules/es.symbol.key-for.js"),s("./node_modules/core-js/modules/es.json.stringify.js"),s("./node_modules/core-js/modules/es.object.get-own-property-symbols.js")},"./node_modules/core-js/modules/es.symbol.key-for.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/export.js"),n=s("./node_modules/core-js/internals/has-own-property.js"),o=s("./node_modules/core-js/internals/is-symbol.js"),i=s("./node_modules/core-js/internals/try-to-string.js"),l=s("./node_modules/core-js/internals/shared.js"),a=s("./node_modules/core-js/internals/symbol-registry-detection.js"),c=l("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!a},{keyFor:function(e){if(!o(e))throw new TypeError(i(e)+" is not a symbol");if(n(c,e))return c[e]}})},"./node_modules/core-js/modules/es.symbol.to-primitive.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/well-known-symbol-define.js"),n=s("./node_modules/core-js/internals/symbol-define-to-primitive.js");r("toPrimitive"),n()},"./node_modules/core-js/modules/web.dom-collections.for-each.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/dom-iterables.js"),o=s("./node_modules/core-js/internals/dom-token-list-prototype.js"),i=s("./node_modules/core-js/internals/array-for-each.js"),l=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),a=function(e){if(e&&e.forEach!==i)try{l(e,"forEach",i)}catch(t){e.forEach=i}};for(var c in n)n[c]&&a(r[c]&&r[c].prototype);a(o)},"./node_modules/core-js/modules/web.dom-collections.iterator.js":(e,t,s)=>{"use strict";var r=s("./node_modules/core-js/internals/global.js"),n=s("./node_modules/core-js/internals/dom-iterables.js"),o=s("./node_modules/core-js/internals/dom-token-list-prototype.js"),i=s("./node_modules/core-js/modules/es.array.iterator.js"),l=s("./node_modules/core-js/internals/create-non-enumerable-property.js"),a=s("./node_modules/core-js/internals/set-to-string-tag.js"),c=s("./node_modules/core-js/internals/well-known-symbol.js")("iterator"),u=i.values,d=function(e,t){if(e){if(e[c]!==u)try{l(e,c,u)}catch(r){e[c]=u}if(a(e,t,!0),n[t])for(var s in i)if(e[s]!==i[s])try{l(e,s,i[s])}catch(r){e[s]=i[s]}}};for(var h in n)d(r[h]&&r[h].prototype,h);d(o,"DOMTokenList")},"./node_modules/lodash-es/_DataView.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getNative.js"),n=s("./node_modules/lodash-es/_root.js");const o=(0,r.default)(n.default,"DataView")},"./node_modules/lodash-es/_Hash.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>c});var r=s("./node_modules/lodash-es/_hashClear.js"),n=s("./node_modules/lodash-es/_hashDelete.js"),o=s("./node_modules/lodash-es/_hashGet.js"),i=s("./node_modules/lodash-es/_hashHas.js"),l=s("./node_modules/lodash-es/_hashSet.js");function a(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r.default,a.prototype.delete=n.default,a.prototype.get=o.default,a.prototype.has=i.default,a.prototype.set=l.default;const c=a},"./node_modules/lodash-es/_ListCache.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>c});var r=s("./node_modules/lodash-es/_listCacheClear.js"),n=s("./node_modules/lodash-es/_listCacheDelete.js"),o=s("./node_modules/lodash-es/_listCacheGet.js"),i=s("./node_modules/lodash-es/_listCacheHas.js"),l=s("./node_modules/lodash-es/_listCacheSet.js");function a(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r.default,a.prototype.delete=n.default,a.prototype.get=o.default,a.prototype.has=i.default,a.prototype.set=l.default;const c=a},"./node_modules/lodash-es/_Map.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getNative.js"),n=s("./node_modules/lodash-es/_root.js");const o=(0,r.default)(n.default,"Map")},"./node_modules/lodash-es/_MapCache.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>c});var r=s("./node_modules/lodash-es/_mapCacheClear.js"),n=s("./node_modules/lodash-es/_mapCacheDelete.js"),o=s("./node_modules/lodash-es/_mapCacheGet.js"),i=s("./node_modules/lodash-es/_mapCacheHas.js"),l=s("./node_modules/lodash-es/_mapCacheSet.js");function a(e){var t=-1,s=null==e?0:e.length;for(this.clear();++t<s;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r.default,a.prototype.delete=n.default,a.prototype.get=o.default,a.prototype.has=i.default,a.prototype.set=l.default;const c=a},"./node_modules/lodash-es/_Promise.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getNative.js"),n=s("./node_modules/lodash-es/_root.js");const o=(0,r.default)(n.default,"Promise")},"./node_modules/lodash-es/_Set.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getNative.js"),n=s("./node_modules/lodash-es/_root.js");const o=(0,r.default)(n.default,"Set")},"./node_modules/lodash-es/_SetCache.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_MapCache.js"),n=s("./node_modules/lodash-es/_setCacheAdd.js"),o=s("./node_modules/lodash-es/_setCacheHas.js");function i(e){var t=-1,s=null==e?0:e.length;for(this.__data__=new r.default;++t<s;)this.add(e[t])}i.prototype.add=i.prototype.push=n.default,i.prototype.has=o.default;const l=i},"./node_modules/lodash-es/_Stack.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var r=s("./node_modules/lodash-es/_ListCache.js"),n=s("./node_modules/lodash-es/_stackClear.js"),o=s("./node_modules/lodash-es/_stackDelete.js"),i=s("./node_modules/lodash-es/_stackGet.js"),l=s("./node_modules/lodash-es/_stackHas.js"),a=s("./node_modules/lodash-es/_stackSet.js");function c(e){var t=this.__data__=new r.default(e);this.size=t.size}c.prototype.clear=n.default,c.prototype.delete=o.default,c.prototype.get=i.default,c.prototype.has=l.default,c.prototype.set=a.default;const u=c},"./node_modules/lodash-es/_Symbol.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=s("./node_modules/lodash-es/_root.js").default.Symbol},"./node_modules/lodash-es/_Uint8Array.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=s("./node_modules/lodash-es/_root.js").default.Uint8Array},"./node_modules/lodash-es/_WeakMap.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getNative.js"),n=s("./node_modules/lodash-es/_root.js");const o=(0,r.default)(n.default,"WeakMap")},"./node_modules/lodash-es/_apply.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t,s){switch(s.length){case 0:return e.call(t);case 1:return e.call(t,s[0]);case 2:return e.call(t,s[0],s[1]);case 3:return e.call(t,s[0],s[1],s[2])}return e.apply(t,s)}},"./node_modules/lodash-es/_arrayEach.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){for(var s=-1,r=null==e?0:e.length;++s<r&&!1!==t(e[s],s,e););return e}},"./node_modules/lodash-es/_arrayFilter.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){for(var s=-1,r=null==e?0:e.length,n=0,o=[];++s<r;){var i=e[s];t(i,s,e)&&(o[n++]=i)}return o}},"./node_modules/lodash-es/_arrayLikeKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var r=s("./node_modules/lodash-es/_baseTimes.js"),n=s("./node_modules/lodash-es/isArguments.js"),o=s("./node_modules/lodash-es/isArray.js"),i=s("./node_modules/lodash-es/isBuffer.js"),l=s("./node_modules/lodash-es/_isIndex.js"),a=s("./node_modules/lodash-es/isTypedArray.js"),c=Object.prototype.hasOwnProperty;const u=function(e,t){var s=(0,o.default)(e),u=!s&&(0,n.default)(e),d=!s&&!u&&(0,i.default)(e),h=!s&&!u&&!d&&(0,a.default)(e),m=s||u||d||h,f=m?(0,r.default)(e.length,String):[],p=f.length;for(var g in e)!t&&!c.call(e,g)||m&&("length"==g||d&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||(0,l.default)(g,p))||f.push(g);return f}},"./node_modules/lodash-es/_arrayPush.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){for(var s=-1,r=t.length,n=e.length;++s<r;)e[n+s]=t[s];return e}},"./node_modules/lodash-es/_arraySome.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){for(var s=-1,r=null==e?0:e.length;++s<r;)if(t(e[s],s,e))return!0;return!1}},"./node_modules/lodash-es/_assignMergeValue.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseAssignValue.js"),n=s("./node_modules/lodash-es/eq.js");const o=function(e,t,s){(void 0!==s&&!(0,n.default)(e[t],s)||void 0===s&&!(t in e))&&(0,r.default)(e,t,s)}},"./node_modules/lodash-es/_assignValue.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_baseAssignValue.js"),n=s("./node_modules/lodash-es/eq.js"),o=Object.prototype.hasOwnProperty;const i=function(e,t,s){var i=e[t];o.call(e,t)&&(0,n.default)(i,s)&&(void 0!==s||t in e)||(0,r.default)(e,t,s)}},"./node_modules/lodash-es/_assocIndexOf.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/eq.js");const n=function(e,t){for(var s=e.length;s--;)if((0,r.default)(e[s][0],t))return s;return-1}},"./node_modules/lodash-es/_baseAssign.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_copyObject.js"),n=s("./node_modules/lodash-es/keys.js");const o=function(e,t){return e&&(0,r.default)(t,(0,n.default)(t),e)}},"./node_modules/lodash-es/_baseAssignIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_copyObject.js"),n=s("./node_modules/lodash-es/keysIn.js");const o=function(e,t){return e&&(0,r.default)(t,(0,n.default)(t),e)}},"./node_modules/lodash-es/_baseAssignValue.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_defineProperty.js");const n=function(e,t,s){"__proto__"==t&&r.default?(0,r.default)(e,t,{configurable:!0,enumerable:!0,value:s,writable:!0}):e[t]=s}},"./node_modules/lodash-es/_baseClone.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>N});var r=s("./node_modules/lodash-es/_Stack.js"),n=s("./node_modules/lodash-es/_arrayEach.js"),o=s("./node_modules/lodash-es/_assignValue.js"),i=s("./node_modules/lodash-es/_baseAssign.js"),l=s("./node_modules/lodash-es/_baseAssignIn.js"),a=s("./node_modules/lodash-es/_cloneBuffer.js"),c=s("./node_modules/lodash-es/_copyArray.js"),u=s("./node_modules/lodash-es/_copySymbols.js"),d=s("./node_modules/lodash-es/_copySymbolsIn.js"),h=s("./node_modules/lodash-es/_getAllKeys.js"),m=s("./node_modules/lodash-es/_getAllKeysIn.js"),f=s("./node_modules/lodash-es/_getTag.js"),p=s("./node_modules/lodash-es/_initCloneArray.js"),g=s("./node_modules/lodash-es/_initCloneByTag.js"),b=s("./node_modules/lodash-es/_initCloneObject.js"),y=s("./node_modules/lodash-es/isArray.js"),v=s("./node_modules/lodash-es/isBuffer.js"),j=s("./node_modules/lodash-es/isMap.js"),_=s("./node_modules/lodash-es/isObject.js"),w=s("./node_modules/lodash-es/isSet.js"),E=s("./node_modules/lodash-es/keys.js"),A=s("./node_modules/lodash-es/keysIn.js"),S="[object Arguments]",k="[object Function]",x="[object Object]",O={};O[S]=O["[object Array]"]=O["[object ArrayBuffer]"]=O["[object DataView]"]=O["[object Boolean]"]=O["[object Date]"]=O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Map]"]=O["[object Number]"]=O[x]=O["[object RegExp]"]=O["[object Set]"]=O["[object String]"]=O["[object Symbol]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O["[object Error]"]=O[k]=O["[object WeakMap]"]=!1;const N=function e(t,s,N,q,T,L){var C,R=1&s,M=2&s,I=4&s;if(N&&(C=T?N(t,q,T,L):N(t)),void 0!==C)return C;if(!(0,_.default)(t))return t;var P=(0,y.default)(t);if(P){if(C=(0,p.default)(t),!R)return(0,c.default)(t,C)}else{var B=(0,f.default)(t),F=B==k||"[object GeneratorFunction]"==B;if((0,v.default)(t))return(0,a.default)(t,R);if(B==x||B==S||F&&!T){if(C=M||F?{}:(0,b.default)(t),!R)return M?(0,d.default)(t,(0,l.default)(C,t)):(0,u.default)(t,(0,i.default)(C,t))}else{if(!O[B])return T?t:{};C=(0,g.default)(t,B,R)}}L||(L=new r.default);var D=L.get(t);if(D)return D;L.set(t,C),(0,w.default)(t)?t.forEach((function(r){C.add(e(r,s,N,r,t,L))})):(0,j.default)(t)&&t.forEach((function(r,n){C.set(n,e(r,s,N,n,t,L))}));var H=I?M?m.default:h.default:M?A.default:E.default,U=P?void 0:H(t);return(0,n.default)(U||t,(function(r,n){U&&(r=t[n=r]),(0,o.default)(C,n,e(r,s,N,n,t,L))})),C}},"./node_modules/lodash-es/_baseCreate.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/isObject.js"),n=Object.create;const o=function(){function e(){}return function(t){if(!(0,r.default)(t))return{};if(n)return n(t);e.prototype=t;var s=new e;return e.prototype=void 0,s}}()},"./node_modules/lodash-es/_baseFor.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=(0,s("./node_modules/lodash-es/_createBaseFor.js").default)()},"./node_modules/lodash-es/_baseGetAllKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_arrayPush.js"),n=s("./node_modules/lodash-es/isArray.js");const o=function(e,t,s){var o=t(e);return(0,n.default)(e)?o:(0,r.default)(o,s(e))}},"./node_modules/lodash-es/_baseGetTag.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_Symbol.js"),n=s("./node_modules/lodash-es/_getRawTag.js"),o=s("./node_modules/lodash-es/_objectToString.js"),i=r.default?r.default.toStringTag:void 0;const l=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?(0,n.default)(e):(0,o.default)(e)}},"./node_modules/lodash-es/_baseIsArguments.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseGetTag.js"),n=s("./node_modules/lodash-es/isObjectLike.js");const o=function(e){return(0,n.default)(e)&&"[object Arguments]"==(0,r.default)(e)}},"./node_modules/lodash-es/_baseIsEqual.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseIsEqualDeep.js"),n=s("./node_modules/lodash-es/isObjectLike.js");const o=function e(t,s,o,i,l){return t===s||(null==t||null==s||!(0,n.default)(t)&&!(0,n.default)(s)?t!=t&&s!=s:(0,r.default)(t,s,o,i,e,l))}},"./node_modules/lodash-es/_baseIsEqualDeep.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>p});var r=s("./node_modules/lodash-es/_Stack.js"),n=s("./node_modules/lodash-es/_equalArrays.js"),o=s("./node_modules/lodash-es/_equalByTag.js"),i=s("./node_modules/lodash-es/_equalObjects.js"),l=s("./node_modules/lodash-es/_getTag.js"),a=s("./node_modules/lodash-es/isArray.js"),c=s("./node_modules/lodash-es/isBuffer.js"),u=s("./node_modules/lodash-es/isTypedArray.js"),d="[object Arguments]",h="[object Array]",m="[object Object]",f=Object.prototype.hasOwnProperty;const p=function(e,t,s,p,g,b){var y=(0,a.default)(e),v=(0,a.default)(t),j=y?h:(0,l.default)(e),_=v?h:(0,l.default)(t),w=(j=j==d?m:j)==m,E=(_=_==d?m:_)==m,A=j==_;if(A&&(0,c.default)(e)){if(!(0,c.default)(t))return!1;y=!0,w=!1}if(A&&!w)return b||(b=new r.default),y||(0,u.default)(e)?(0,n.default)(e,t,s,p,g,b):(0,o.default)(e,t,j,s,p,g,b);if(!(1&s)){var S=w&&f.call(e,"__wrapped__"),k=E&&f.call(t,"__wrapped__");if(S||k){var x=S?e.value():e,O=k?t.value():t;return b||(b=new r.default),g(x,O,s,p,b)}}return!!A&&(b||(b=new r.default),(0,i.default)(e,t,s,p,g,b))}},"./node_modules/lodash-es/_baseIsMap.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getTag.js"),n=s("./node_modules/lodash-es/isObjectLike.js");const o=function(e){return(0,n.default)(e)&&"[object Map]"==(0,r.default)(e)}},"./node_modules/lodash-es/_baseIsNative.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});var r=s("./node_modules/lodash-es/isFunction.js"),n=s("./node_modules/lodash-es/_isMasked.js"),o=s("./node_modules/lodash-es/isObject.js"),i=s("./node_modules/lodash-es/_toSource.js"),l=/^\[object .+?Constructor\]$/,a=Function.prototype,c=Object.prototype,u=a.toString,d=c.hasOwnProperty,h=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const m=function(e){return!(!(0,o.default)(e)||(0,n.default)(e))&&((0,r.default)(e)?h:l).test((0,i.default)(e))}},"./node_modules/lodash-es/_baseIsSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getTag.js"),n=s("./node_modules/lodash-es/isObjectLike.js");const o=function(e){return(0,n.default)(e)&&"[object Set]"==(0,r.default)(e)}},"./node_modules/lodash-es/_baseIsTypedArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_baseGetTag.js"),n=s("./node_modules/lodash-es/isLength.js"),o=s("./node_modules/lodash-es/isObjectLike.js"),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1;const l=function(e){return(0,o.default)(e)&&(0,n.default)(e.length)&&!!i[(0,r.default)(e)]}},"./node_modules/lodash-es/_baseKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_isPrototype.js"),n=s("./node_modules/lodash-es/_nativeKeys.js"),o=Object.prototype.hasOwnProperty;const i=function(e){if(!(0,r.default)(e))return(0,n.default)(e);var t=[];for(var s in Object(e))o.call(e,s)&&"constructor"!=s&&t.push(s);return t}},"./node_modules/lodash-es/_baseKeysIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/isObject.js"),n=s("./node_modules/lodash-es/_isPrototype.js"),o=s("./node_modules/lodash-es/_nativeKeysIn.js"),i=Object.prototype.hasOwnProperty;const l=function(e){if(!(0,r.default)(e))return(0,o.default)(e);var t=(0,n.default)(e),s=[];for(var l in e)("constructor"!=l||!t&&i.call(e,l))&&s.push(l);return s}},"./node_modules/lodash-es/_baseMerge.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var r=s("./node_modules/lodash-es/_Stack.js"),n=s("./node_modules/lodash-es/_assignMergeValue.js"),o=s("./node_modules/lodash-es/_baseFor.js"),i=s("./node_modules/lodash-es/_baseMergeDeep.js"),l=s("./node_modules/lodash-es/isObject.js"),a=s("./node_modules/lodash-es/keysIn.js"),c=s("./node_modules/lodash-es/_safeGet.js");const u=function e(t,s,u,d,h){t!==s&&(0,o.default)(s,(function(o,a){if(h||(h=new r.default),(0,l.default)(o))(0,i.default)(t,s,a,u,e,d,h);else{var m=d?d((0,c.default)(t,a),o,a+"",t,s,h):void 0;void 0===m&&(m=o),(0,n.default)(t,a,m)}}),a.default)}},"./node_modules/lodash-es/_baseMergeDeep.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>y});var r=s("./node_modules/lodash-es/_assignMergeValue.js"),n=s("./node_modules/lodash-es/_cloneBuffer.js"),o=s("./node_modules/lodash-es/_cloneTypedArray.js"),i=s("./node_modules/lodash-es/_copyArray.js"),l=s("./node_modules/lodash-es/_initCloneObject.js"),a=s("./node_modules/lodash-es/isArguments.js"),c=s("./node_modules/lodash-es/isArray.js"),u=s("./node_modules/lodash-es/isArrayLikeObject.js"),d=s("./node_modules/lodash-es/isBuffer.js"),h=s("./node_modules/lodash-es/isFunction.js"),m=s("./node_modules/lodash-es/isObject.js"),f=s("./node_modules/lodash-es/isPlainObject.js"),p=s("./node_modules/lodash-es/isTypedArray.js"),g=s("./node_modules/lodash-es/_safeGet.js"),b=s("./node_modules/lodash-es/toPlainObject.js");const y=function(e,t,s,y,v,j,_){var w=(0,g.default)(e,s),E=(0,g.default)(t,s),A=_.get(E);if(A)(0,r.default)(e,s,A);else{var S=j?j(w,E,s+"",e,t,_):void 0,k=void 0===S;if(k){var x=(0,c.default)(E),O=!x&&(0,d.default)(E),N=!x&&!O&&(0,p.default)(E);S=E,x||O||N?(0,c.default)(w)?S=w:(0,u.default)(w)?S=(0,i.default)(w):O?(k=!1,S=(0,n.default)(E,!0)):N?(k=!1,S=(0,o.default)(E,!0)):S=[]:(0,f.default)(E)||(0,a.default)(E)?(S=w,(0,a.default)(w)?S=(0,b.default)(w):(0,m.default)(w)&&!(0,h.default)(w)||(S=(0,l.default)(E))):k=!1}k&&(_.set(E,S),v(S,E,y,j,_),_.delete(E)),(0,r.default)(e,s,S)}}},"./node_modules/lodash-es/_baseRest.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/identity.js"),n=s("./node_modules/lodash-es/_overRest.js"),o=s("./node_modules/lodash-es/_setToString.js");const i=function(e,t){return(0,o.default)((0,n.default)(e,t,r.default),e+"")}},"./node_modules/lodash-es/_baseSetToString.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/constant.js"),n=s("./node_modules/lodash-es/_defineProperty.js"),o=s("./node_modules/lodash-es/identity.js");const i=n.default?function(e,t){return(0,n.default)(e,"toString",{configurable:!0,enumerable:!1,value:(0,r.default)(t),writable:!0})}:o.default},"./node_modules/lodash-es/_baseTimes.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){for(var s=-1,r=Array(e);++s<e;)r[s]=t(s);return r}},"./node_modules/lodash-es/_baseUnary.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return function(t){return e(t)}}},"./node_modules/lodash-es/_cacheHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){return e.has(t)}},"./node_modules/lodash-es/_cloneArrayBuffer.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_Uint8Array.js");const n=function(e){var t=new e.constructor(e.byteLength);return new r.default(t).set(new r.default(e)),t}},"./node_modules/lodash-es/_cloneBuffer.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/lodash-es/_root.js"),n="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=n&&"object"==typeof module&&module&&!module.nodeType&&module,i=o&&o.exports===n?r.default.Buffer:void 0,l=i?i.allocUnsafe:void 0;const a=function(e,t){if(t)return e.slice();var s=e.length,r=l?l(s):new e.constructor(s);return e.copy(r),r}},"./node_modules/lodash-es/_cloneDataView.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_cloneArrayBuffer.js");const n=function(e,t){var s=t?(0,r.default)(e.buffer):e.buffer;return new e.constructor(s,e.byteOffset,e.byteLength)}},"./node_modules/lodash-es/_cloneRegExp.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=/\w*$/;const n=function(e){var t=new e.constructor(e.source,r.exec(e));return t.lastIndex=e.lastIndex,t}},"./node_modules/lodash-es/_cloneSymbol.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_Symbol.js"),n=r.default?r.default.prototype:void 0,o=n?n.valueOf:void 0;const i=function(e){return o?Object(o.call(e)):{}}},"./node_modules/lodash-es/_cloneTypedArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_cloneArrayBuffer.js");const n=function(e,t){var s=t?(0,r.default)(e.buffer):e.buffer;return new e.constructor(s,e.byteOffset,e.length)}},"./node_modules/lodash-es/_copyArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){var s=-1,r=e.length;for(t||(t=Array(r));++s<r;)t[s]=e[s];return t}},"./node_modules/lodash-es/_copyObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_assignValue.js"),n=s("./node_modules/lodash-es/_baseAssignValue.js");const o=function(e,t,s,o){var i=!s;s||(s={});for(var l=-1,a=t.length;++l<a;){var c=t[l],u=o?o(s[c],e[c],c,s,e):void 0;void 0===u&&(u=e[c]),i?(0,n.default)(s,c,u):(0,r.default)(s,c,u)}return s}},"./node_modules/lodash-es/_copySymbols.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_copyObject.js"),n=s("./node_modules/lodash-es/_getSymbols.js");const o=function(e,t){return(0,r.default)(e,(0,n.default)(e),t)}},"./node_modules/lodash-es/_copySymbolsIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_copyObject.js"),n=s("./node_modules/lodash-es/_getSymbolsIn.js");const o=function(e,t){return(0,r.default)(e,(0,n.default)(e),t)}},"./node_modules/lodash-es/_coreJsData.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=s("./node_modules/lodash-es/_root.js").default["__core-js_shared__"]},"./node_modules/lodash-es/_createAssigner.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseRest.js"),n=s("./node_modules/lodash-es/_isIterateeCall.js");const o=function(e){return(0,r.default)((function(t,s){var r=-1,o=s.length,i=o>1?s[o-1]:void 0,l=o>2?s[2]:void 0;for(i=e.length>3&&"function"==typeof i?(o--,i):void 0,l&&(0,n.default)(s[0],s[1],l)&&(i=o<3?void 0:i,o=1),t=Object(t);++r<o;){var a=s[r];a&&e(t,a,r,i)}return t}))}},"./node_modules/lodash-es/_createBaseFor.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return function(t,s,r){for(var n=-1,o=Object(t),i=r(t),l=i.length;l--;){var a=i[e?l:++n];if(!1===s(o[a],a,o))break}return t}}},"./node_modules/lodash-es/_defineProperty.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_getNative.js");const n=function(){try{var e=(0,r.default)(Object,"defineProperty");return e({},"",{}),e}catch(t){}}()},"./node_modules/lodash-es/_equalArrays.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_SetCache.js"),n=s("./node_modules/lodash-es/_arraySome.js"),o=s("./node_modules/lodash-es/_cacheHas.js");const i=function(e,t,s,i,l,a){var c=1&s,u=e.length,d=t.length;if(u!=d&&!(c&&d>u))return!1;var h=a.get(e),m=a.get(t);if(h&&m)return h==t&&m==e;var f=-1,p=!0,g=2&s?new r.default:void 0;for(a.set(e,t),a.set(t,e);++f<u;){var b=e[f],y=t[f];if(i)var v=c?i(y,b,f,t,e,a):i(b,y,f,e,t,a);if(void 0!==v){if(v)continue;p=!1;break}if(g){if(!(0,n.default)(t,(function(e,t){if(!(0,o.default)(g,t)&&(b===e||l(b,e,s,i,a)))return g.push(t)}))){p=!1;break}}else if(b!==y&&!l(b,y,s,i,a)){p=!1;break}}return a.delete(e),a.delete(t),p}},"./node_modules/lodash-es/_equalByTag.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d});var r=s("./node_modules/lodash-es/_Symbol.js"),n=s("./node_modules/lodash-es/_Uint8Array.js"),o=s("./node_modules/lodash-es/eq.js"),i=s("./node_modules/lodash-es/_equalArrays.js"),l=s("./node_modules/lodash-es/_mapToArray.js"),a=s("./node_modules/lodash-es/_setToArray.js"),c=r.default?r.default.prototype:void 0,u=c?c.valueOf:void 0;const d=function(e,t,s,r,c,d,h){switch(s){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new n.default(e),new n.default(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return(0,o.default)(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var m=l.default;case"[object Set]":var f=1&r;if(m||(m=a.default),e.size!=t.size&&!f)return!1;var p=h.get(e);if(p)return p==t;r|=2,h.set(e,t);var g=(0,i.default)(m(e),m(t),r,c,d,h);return h.delete(e),g;case"[object Symbol]":if(u)return u.call(e)==u.call(t)}return!1}},"./node_modules/lodash-es/_equalObjects.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;const o=function(e,t,s,o,i,l){var a=1&s,c=(0,r.default)(e),u=c.length;if(u!=(0,r.default)(t).length&&!a)return!1;for(var d=u;d--;){var h=c[d];if(!(a?h in t:n.call(t,h)))return!1}var m=l.get(e),f=l.get(t);if(m&&f)return m==t&&f==e;var p=!0;l.set(e,t),l.set(t,e);for(var g=a;++d<u;){var b=e[h=c[d]],y=t[h];if(o)var v=a?o(y,b,h,t,e,l):o(b,y,h,e,t,l);if(!(void 0===v?b===y||i(b,y,s,o,l):v)){p=!1;break}g||(g="constructor"==h)}if(p&&!g){var j=e.constructor,_=t.constructor;j==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof j&&j instanceof j&&"function"==typeof _&&_ instanceof _||(p=!1)}return l.delete(e),l.delete(t),p}},"./node_modules/lodash-es/_freeGlobal.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r="object"==typeof global&&global&&global.Object===Object&&global},"./node_modules/lodash-es/_getAllKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_baseGetAllKeys.js"),n=s("./node_modules/lodash-es/_getSymbols.js"),o=s("./node_modules/lodash-es/keys.js");const i=function(e){return(0,r.default)(e,o.default,n.default)}},"./node_modules/lodash-es/_getAllKeysIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_baseGetAllKeys.js"),n=s("./node_modules/lodash-es/_getSymbolsIn.js"),o=s("./node_modules/lodash-es/keysIn.js");const i=function(e){return(0,r.default)(e,o.default,n.default)}},"./node_modules/lodash-es/_getMapData.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_isKeyable.js");const n=function(e,t){var s=e.__data__;return(0,r.default)(t)?s["string"==typeof t?"string":"hash"]:s.map}},"./node_modules/lodash-es/_getNative.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseIsNative.js"),n=s("./node_modules/lodash-es/_getValue.js");const o=function(e,t){var s=(0,n.default)(e,t);return(0,r.default)(s)?s:void 0}},"./node_modules/lodash-es/_getPrototype.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=(0,s("./node_modules/lodash-es/_overArg.js").default)(Object.getPrototypeOf,Object)},"./node_modules/lodash-es/_getRawTag.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/lodash-es/_Symbol.js"),n=Object.prototype,o=n.hasOwnProperty,i=n.toString,l=r.default?r.default.toStringTag:void 0;const a=function(e){var t=o.call(e,l),s=e[l];try{e[l]=void 0;var r=!0}catch(a){}var n=i.call(e);return r&&(t?e[l]=s:delete e[l]),n}},"./node_modules/lodash-es/_getSymbols.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_arrayFilter.js"),n=s("./node_modules/lodash-es/stubArray.js"),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols;const l=i?function(e){return null==e?[]:(e=Object(e),(0,r.default)(i(e),(function(t){return o.call(e,t)})))}:n.default},"./node_modules/lodash-es/_getSymbolsIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_arrayPush.js"),n=s("./node_modules/lodash-es/_getPrototype.js"),o=s("./node_modules/lodash-es/_getSymbols.js"),i=s("./node_modules/lodash-es/stubArray.js");const l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)(0,r.default)(t,(0,o.default)(e)),e=(0,n.default)(e);return t}:i.default},"./node_modules/lodash-es/_getTag.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>_});var r=s("./node_modules/lodash-es/_DataView.js"),n=s("./node_modules/lodash-es/_Map.js"),o=s("./node_modules/lodash-es/_Promise.js"),i=s("./node_modules/lodash-es/_Set.js"),l=s("./node_modules/lodash-es/_WeakMap.js"),a=s("./node_modules/lodash-es/_baseGetTag.js"),c=s("./node_modules/lodash-es/_toSource.js"),u="[object Map]",d="[object Promise]",h="[object Set]",m="[object WeakMap]",f="[object DataView]",p=(0,c.default)(r.default),g=(0,c.default)(n.default),b=(0,c.default)(o.default),y=(0,c.default)(i.default),v=(0,c.default)(l.default),j=a.default;(r.default&&j(new r.default(new ArrayBuffer(1)))!=f||n.default&&j(new n.default)!=u||o.default&&j(o.default.resolve())!=d||i.default&&j(new i.default)!=h||l.default&&j(new l.default)!=m)&&(j=function(e){var t=(0,a.default)(e),s="[object Object]"==t?e.constructor:void 0,r=s?(0,c.default)(s):"";if(r)switch(r){case p:return f;case g:return u;case b:return d;case y:return h;case v:return m}return t});const _=j},"./node_modules/lodash-es/_getValue.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash-es/_hashClear.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_nativeCreate.js");const n=function(){this.__data__=r.default?(0,r.default)(null):{},this.size=0}},"./node_modules/lodash-es/_hashDelete.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash-es/_hashGet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;const o=function(e){var t=this.__data__;if(r.default){var s=t[e];return"__lodash_hash_undefined__"===s?void 0:s}return n.call(t,e)?t[e]:void 0}},"./node_modules/lodash-es/_hashHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;const o=function(e){var t=this.__data__;return r.default?void 0!==t[e]:n.call(t,e)}},"./node_modules/lodash-es/_hashSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_nativeCreate.js");const n=function(e,t){var s=this.__data__;return this.size+=this.has(e)?0:1,s[e]=r.default&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash-es/_initCloneArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=Object.prototype.hasOwnProperty;const n=function(e){var t=e.length,s=new e.constructor(t);return t&&"string"==typeof e[0]&&r.call(e,"index")&&(s.index=e.index,s.input=e.input),s}},"./node_modules/lodash-es/_initCloneByTag.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/lodash-es/_cloneArrayBuffer.js"),n=s("./node_modules/lodash-es/_cloneDataView.js"),o=s("./node_modules/lodash-es/_cloneRegExp.js"),i=s("./node_modules/lodash-es/_cloneSymbol.js"),l=s("./node_modules/lodash-es/_cloneTypedArray.js");const a=function(e,t,s){var a=e.constructor;switch(t){case"[object ArrayBuffer]":return(0,r.default)(e);case"[object Boolean]":case"[object Date]":return new a(+e);case"[object DataView]":return(0,n.default)(e,s);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return(0,l.default)(e,s);case"[object Map]":case"[object Set]":return new a;case"[object Number]":case"[object String]":return new a(e);case"[object RegExp]":return(0,o.default)(e);case"[object Symbol]":return(0,i.default)(e)}}},"./node_modules/lodash-es/_initCloneObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_baseCreate.js"),n=s("./node_modules/lodash-es/_getPrototype.js"),o=s("./node_modules/lodash-es/_isPrototype.js");const i=function(e){return"function"!=typeof e.constructor||(0,o.default)(e)?{}:(0,r.default)((0,n.default)(e))}},"./node_modules/lodash-es/_isIndex.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=/^(?:0|[1-9]\d*)$/;const n=function(e,t){var s=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==s||"symbol"!=s&&r.test(e))&&e>-1&&e%1==0&&e<t}},"./node_modules/lodash-es/_isIterateeCall.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/eq.js"),n=s("./node_modules/lodash-es/isArrayLike.js"),o=s("./node_modules/lodash-es/_isIndex.js"),i=s("./node_modules/lodash-es/isObject.js");const l=function(e,t,s){if(!(0,i.default)(s))return!1;var l=typeof t;return!!("number"==l?(0,n.default)(s)&&(0,o.default)(t,s.length):"string"==l&&t in s)&&(0,r.default)(s[t],e)}},"./node_modules/lodash-es/_isKeyable.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash-es/_isMasked.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r,n=s("./node_modules/lodash-es/_coreJsData.js"),o=(r=/[^.]+$/.exec(n.default&&n.default.keys&&n.default.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";const i=function(e){return!!o&&o in e}},"./node_modules/lodash-es/_isPrototype.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=Object.prototype;const n=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||r)}},"./node_modules/lodash-es/_listCacheClear.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(){this.__data__=[],this.size=0}},"./node_modules/lodash-es/_listCacheDelete.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_assocIndexOf.js"),n=Array.prototype.splice;const o=function(e){var t=this.__data__,s=(0,r.default)(t,e);return!(s<0)&&(s==t.length-1?t.pop():n.call(t,s,1),--this.size,!0)}},"./node_modules/lodash-es/_listCacheGet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_assocIndexOf.js");const n=function(e){var t=this.__data__,s=(0,r.default)(t,e);return s<0?void 0:t[s][1]}},"./node_modules/lodash-es/_listCacheHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_assocIndexOf.js");const n=function(e){return(0,r.default)(this.__data__,e)>-1}},"./node_modules/lodash-es/_listCacheSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_assocIndexOf.js");const n=function(e,t){var s=this.__data__,n=(0,r.default)(s,e);return n<0?(++this.size,s.push([e,t])):s[n][1]=t,this}},"./node_modules/lodash-es/_mapCacheClear.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_Hash.js"),n=s("./node_modules/lodash-es/_ListCache.js"),o=s("./node_modules/lodash-es/_Map.js");const i=function(){this.size=0,this.__data__={hash:new r.default,map:new(o.default||n.default),string:new r.default}}},"./node_modules/lodash-es/_mapCacheDelete.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_getMapData.js");const n=function(e){var t=(0,r.default)(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash-es/_mapCacheGet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_getMapData.js");const n=function(e){return(0,r.default)(this,e).get(e)}},"./node_modules/lodash-es/_mapCacheHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_getMapData.js");const n=function(e){return(0,r.default)(this,e).has(e)}},"./node_modules/lodash-es/_mapCacheSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_getMapData.js");const n=function(e,t){var s=(0,r.default)(this,e),n=s.size;return s.set(e,t),this.size+=s.size==n?0:1,this}},"./node_modules/lodash-es/_mapToArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=-1,s=Array(e.size);return e.forEach((function(e,r){s[++t]=[r,e]})),s}},"./node_modules/lodash-es/_nativeCreate.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=(0,s("./node_modules/lodash-es/_getNative.js").default)(Object,"create")},"./node_modules/lodash-es/_nativeKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=(0,s("./node_modules/lodash-es/_overArg.js").default)(Object.keys,Object)},"./node_modules/lodash-es/_nativeKeysIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=[];if(null!=e)for(var s in Object(e))t.push(s);return t}},"./node_modules/lodash-es/_nodeUtil.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_freeGlobal.js"),n="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=n&&"object"==typeof module&&module&&!module.nodeType&&module,i=o&&o.exports===n&&r.default.process;const l=function(){try{var e=o&&o.require&&o.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(t){}}()},"./node_modules/lodash-es/_objectToString.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=Object.prototype.toString;const n=function(e){return r.call(e)}},"./node_modules/lodash-es/_overArg.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){return function(s){return e(t(s))}}},"./node_modules/lodash-es/_overRest.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_apply.js"),n=Math.max;const o=function(e,t,s){return t=n(void 0===t?e.length-1:t,0),function(){for(var o=arguments,i=-1,l=n(o.length-t,0),a=Array(l);++i<l;)a[i]=o[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=o[i];return c[t]=s(a),(0,r.default)(e,this,c)}}},"./node_modules/lodash-es/_root.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self;const o=r.default||n||Function("return this")()},"./node_modules/lodash-es/_safeGet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},"./node_modules/lodash-es/_setCacheAdd.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash-es/_setCacheHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return this.__data__.has(e)}},"./node_modules/lodash-es/_setToArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=-1,s=Array(e.size);return e.forEach((function(e){s[++t]=e})),s}},"./node_modules/lodash-es/_setToString.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_baseSetToString.js");const n=(0,s("./node_modules/lodash-es/_shortOut.js").default)(r.default)},"./node_modules/lodash-es/_shortOut.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=Date.now;const n=function(e){var t=0,s=0;return function(){var n=r(),o=16-(n-s);if(s=n,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},"./node_modules/lodash-es/_stackClear.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_ListCache.js");const n=function(){this.__data__=new r.default,this.size=0}},"./node_modules/lodash-es/_stackDelete.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=this.__data__,s=t.delete(e);return this.size=t.size,s}},"./node_modules/lodash-es/_stackGet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return this.__data__.get(e)}},"./node_modules/lodash-es/_stackHas.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return this.__data__.has(e)}},"./node_modules/lodash-es/_stackSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_ListCache.js"),n=s("./node_modules/lodash-es/_Map.js"),o=s("./node_modules/lodash-es/_MapCache.js");const i=function(e,t){var s=this.__data__;if(s instanceof r.default){var i=s.__data__;if(!n.default||i.length<199)return i.push([e,t]),this.size=++s.size,this;s=this.__data__=new o.default(i)}return s.set(e,t),this.size=s.size,this}},"./node_modules/lodash-es/_toSource.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=Function.prototype.toString;const n=function(e){if(null!=e){try{return r.call(e)}catch(t){}try{return e+""}catch(t){}}return""}},"./node_modules/lodash-es/cloneDeep.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_baseClone.js");const n=function(e){return(0,r.default)(e,5)}},"./node_modules/lodash-es/constant.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return function(){return e}}},"./node_modules/lodash-es/eq.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash-es/identity.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return e}},"./node_modules/lodash-es/isArguments.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/lodash-es/_baseIsArguments.js"),n=s("./node_modules/lodash-es/isObjectLike.js"),o=Object.prototype,i=o.hasOwnProperty,l=o.propertyIsEnumerable;const a=(0,r.default)(function(){return arguments}())?r.default:function(e){return(0,n.default)(e)&&i.call(e,"callee")&&!l.call(e,"callee")}},"./node_modules/lodash-es/isArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=Array.isArray},"./node_modules/lodash-es/isArrayLike.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/isFunction.js"),n=s("./node_modules/lodash-es/isLength.js");const o=function(e){return null!=e&&(0,n.default)(e.length)&&!(0,r.default)(e)}},"./node_modules/lodash-es/isArrayLikeObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/isArrayLike.js"),n=s("./node_modules/lodash-es/isObjectLike.js");const o=function(e){return(0,n.default)(e)&&(0,r.default)(e)}},"./node_modules/lodash-es/isBuffer.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/lodash-es/_root.js"),n=s("./node_modules/lodash-es/stubFalse.js"),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&"object"==typeof module&&module&&!module.nodeType&&module,l=i&&i.exports===o?r.default.Buffer:void 0;const a=(l?l.isBuffer:void 0)||n.default},"./node_modules/lodash-es/isEqual.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_baseIsEqual.js");const n=function(e,t){return(0,r.default)(e,t)}},"./node_modules/lodash-es/isFunction.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_baseGetTag.js"),n=s("./node_modules/lodash-es/isObject.js");const o=function(e){if(!(0,n.default)(e))return!1;var t=(0,r.default)(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash-es/isLength.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash-es/isMap.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_baseIsMap.js"),n=s("./node_modules/lodash-es/_baseUnary.js"),o=s("./node_modules/lodash-es/_nodeUtil.js"),i=o.default&&o.default.isMap;const l=i?(0,n.default)(i):r.default},"./node_modules/lodash-es/isObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash-es/isObjectLike.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash-es/isPlainObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d});var r=s("./node_modules/lodash-es/_baseGetTag.js"),n=s("./node_modules/lodash-es/_getPrototype.js"),o=s("./node_modules/lodash-es/isObjectLike.js"),i=Function.prototype,l=Object.prototype,a=i.toString,c=l.hasOwnProperty,u=a.call(Object);const d=function(e){if(!(0,o.default)(e)||"[object Object]"!=(0,r.default)(e))return!1;var t=(0,n.default)(e);if(null===t)return!0;var s=c.call(t,"constructor")&&t.constructor;return"function"==typeof s&&s instanceof s&&a.call(s)==u}},"./node_modules/lodash-es/isSet.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_baseIsSet.js"),n=s("./node_modules/lodash-es/_baseUnary.js"),o=s("./node_modules/lodash-es/_nodeUtil.js"),i=o.default&&o.default.isSet;const l=i?(0,n.default)(i):r.default},"./node_modules/lodash-es/isTypedArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/lodash-es/_baseIsTypedArray.js"),n=s("./node_modules/lodash-es/_baseUnary.js"),o=s("./node_modules/lodash-es/_nodeUtil.js"),i=o.default&&o.default.isTypedArray;const l=i?(0,n.default)(i):r.default},"./node_modules/lodash-es/keys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_arrayLikeKeys.js"),n=s("./node_modules/lodash-es/_baseKeys.js"),o=s("./node_modules/lodash-es/isArrayLike.js");const i=function(e){return(0,o.default)(e)?(0,r.default)(e):(0,n.default)(e)}},"./node_modules/lodash-es/keysIn.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/lodash-es/_arrayLikeKeys.js"),n=s("./node_modules/lodash-es/_baseKeysIn.js"),o=s("./node_modules/lodash-es/isArrayLike.js");const i=function(e){return(0,o.default)(e)?(0,r.default)(e,!0):(0,n.default)(e)}},"./node_modules/lodash-es/merge.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var r=s("./node_modules/lodash-es/_baseMerge.js");const n=(0,s("./node_modules/lodash-es/_createAssigner.js").default)((function(e,t,s){(0,r.default)(e,t,s)}))},"./node_modules/lodash-es/stubArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(){return[]}},"./node_modules/lodash-es/stubFalse.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=function(){return!1}},"./node_modules/lodash-es/toPlainObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/lodash-es/_copyObject.js"),n=s("./node_modules/lodash-es/keysIn.js");const o=function(e){return(0,r.default)(e,(0,n.default)(e))}},"./node_modules/parchment/dist/parchment.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Attributor:()=>n,AttributorStore:()=>h,BlockBlot:()=>A,ClassAttributor:()=>c,ContainerBlot:()=>k,EmbedBlot:()=>x,InlineBlot:()=>w,LeafBlot:()=>g,ParentBlot:()=>j,Registry:()=>l,Scope:()=>r,ScrollBlot:()=>q,StyleAttributor:()=>d,TextBlot:()=>L});var r=(e=>(e[e.TYPE=3]="TYPE",e[e.LEVEL=12]="LEVEL",e[e.ATTRIBUTE=13]="ATTRIBUTE",e[e.BLOT=14]="BLOT",e[e.INLINE=7]="INLINE",e[e.BLOCK=11]="BLOCK",e[e.BLOCK_BLOT=10]="BLOCK_BLOT",e[e.INLINE_BLOT=6]="INLINE_BLOT",e[e.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",e[e.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",e[e.ANY=15]="ANY",e))(r||{});class n{constructor(e,t,s={}){this.attrName=e,this.keyName=t;const n=r.TYPE&r.ATTRIBUTE;this.scope=null!=s.scope?s.scope&r.LEVEL|n:r.ATTRIBUTE,null!=s.whitelist&&(this.whitelist=s.whitelist)}static keys(e){return Array.from(e.attributes).map((e=>e.name))}add(e,t){return!!this.canAdd(e,t)&&(e.setAttribute(this.keyName,t),!0)}canAdd(e,t){return null==this.whitelist||("string"==typeof t?this.whitelist.indexOf(t.replace(/["']/g,""))>-1:this.whitelist.indexOf(t)>-1)}remove(e){e.removeAttribute(this.keyName)}value(e){const t=e.getAttribute(this.keyName);return this.canAdd(e,t)&&t?t:""}}class o extends Error{constructor(e){super(e="[Parchment] "+e),this.message=e,this.name=this.constructor.name}}const i=class e{constructor(){this.attributes={},this.classes={},this.tags={},this.types={}}static find(e,t=!1){if(null==e)return null;if(this.blots.has(e))return this.blots.get(e)||null;if(t){let s=null;try{s=e.parentNode}catch{return null}return this.find(s,t)}return null}create(t,s,r){const n=this.query(s);if(null==n)throw new o(`Unable to create ${s} blot`);const i=n,l=s instanceof Node||s.nodeType===Node.TEXT_NODE?s:i.create(r),a=new i(t,l,r);return e.blots.set(a.domNode,a),a}find(t,s=!1){return e.find(t,s)}query(e,t=r.ANY){let s;return"string"==typeof e?s=this.types[e]||this.attributes[e]:e instanceof Text||e.nodeType===Node.TEXT_NODE?s=this.types.text:"number"==typeof e?e&r.LEVEL&r.BLOCK?s=this.types.block:e&r.LEVEL&r.INLINE&&(s=this.types.inline):e instanceof Element&&((e.getAttribute("class")||"").split(/\s+/).some((e=>(s=this.classes[e],!!s))),s=s||this.tags[e.tagName]),null==s?null:"scope"in s&&t&r.LEVEL&s.scope&&t&r.TYPE&s.scope?s:null}register(...e){return e.map((e=>{const t="blotName"in e,s="attrName"in e;if(!t&&!s)throw new o("Invalid definition");if(t&&"abstract"===e.blotName)throw new o("Cannot register abstract class");const r=t?e.blotName:s?e.attrName:void 0;return this.types[r]=e,s?"string"==typeof e.keyName&&(this.attributes[e.keyName]=e):t&&(e.className&&(this.classes[e.className]=e),e.tagName&&(Array.isArray(e.tagName)?e.tagName=e.tagName.map((e=>e.toUpperCase())):e.tagName=e.tagName.toUpperCase(),(Array.isArray(e.tagName)?e.tagName:[e.tagName]).forEach((t=>{(null==this.tags[t]||null==e.className)&&(this.tags[t]=e)})))),e}))}};i.blots=new WeakMap;let l=i;function a(e,t){return(e.getAttribute("class")||"").split(/\s+/).filter((e=>0===e.indexOf(`${t}-`)))}const c=class extends n{static keys(e){return(e.getAttribute("class")||"").split(/\s+/).map((e=>e.split("-").slice(0,-1).join("-")))}add(e,t){return!!this.canAdd(e,t)&&(this.remove(e),e.classList.add(`${this.keyName}-${t}`),!0)}remove(e){a(e,this.keyName).forEach((t=>{e.classList.remove(t)})),0===e.classList.length&&e.removeAttribute("class")}value(e){const t=(a(e,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(e,t)?t:""}};function u(e){const t=e.split("-"),s=t.slice(1).map((e=>e[0].toUpperCase()+e.slice(1))).join("");return t[0]+s}const d=class extends n{static keys(e){return(e.getAttribute("style")||"").split(";").map((e=>e.split(":")[0].trim()))}add(e,t){return!!this.canAdd(e,t)&&(e.style[u(this.keyName)]=t,!0)}remove(e){e.style[u(this.keyName)]="",e.getAttribute("style")||e.removeAttribute("style")}value(e){const t=e.style[u(this.keyName)];return this.canAdd(e,t)?t:""}};const h=class{constructor(e){this.attributes={},this.domNode=e,this.build()}attribute(e,t){t?e.add(this.domNode,t)&&(null!=e.value(this.domNode)?this.attributes[e.attrName]=e:delete this.attributes[e.attrName]):(e.remove(this.domNode),delete this.attributes[e.attrName])}build(){this.attributes={};const e=l.find(this.domNode);if(null==e)return;const t=n.keys(this.domNode),s=c.keys(this.domNode),o=d.keys(this.domNode);t.concat(s).concat(o).forEach((t=>{const s=e.scroll.query(t,r.ATTRIBUTE);s instanceof n&&(this.attributes[s.attrName]=s)}))}copy(e){Object.keys(this.attributes).forEach((t=>{const s=this.attributes[t].value(this.domNode);e.format(t,s)}))}move(e){this.copy(e),Object.keys(this.attributes).forEach((e=>{this.attributes[e].remove(this.domNode)})),this.attributes={}}values(){return Object.keys(this.attributes).reduce(((e,t)=>(e[t]=this.attributes[t].value(this.domNode),e)),{})}},m=class{constructor(e,t){this.scroll=e,this.domNode=t,l.blots.set(t,this),this.prev=null,this.next=null}static create(e){if(null==this.tagName)throw new o("Blot definition missing tagName");let t,s;return Array.isArray(this.tagName)?("string"==typeof e?(s=e.toUpperCase(),parseInt(s,10).toString()===s&&(s=parseInt(s,10))):"number"==typeof e&&(s=e),t="number"==typeof s?document.createElement(this.tagName[s-1]):s&&this.tagName.indexOf(s)>-1?document.createElement(s):document.createElement(this.tagName[0])):t=document.createElement(this.tagName),this.className&&t.classList.add(this.className),t}get statics(){return this.constructor}attach(){}clone(){const e=this.domNode.cloneNode(!1);return this.scroll.create(e)}detach(){null!=this.parent&&this.parent.removeChild(this),l.blots.delete(this.domNode)}deleteAt(e,t){this.isolate(e,t).remove()}formatAt(e,t,s,n){const o=this.isolate(e,t);if(null!=this.scroll.query(s,r.BLOT)&&n)o.wrap(s,n);else if(null!=this.scroll.query(s,r.ATTRIBUTE)){const e=this.scroll.create(this.statics.scope);o.wrap(e),e.format(s,n)}}insertAt(e,t,s){const r=null==s?this.scroll.create("text",t):this.scroll.create(t,s),n=this.split(e);this.parent.insertBefore(r,n||void 0)}isolate(e,t){const s=this.split(e);if(null==s)throw new Error("Attempt to isolate at end");return s.split(t),s}length(){return 1}offset(e=this.parent){return null==this.parent||this===e?0:this.parent.children.offset(this)+this.parent.offset(e)}optimize(e){this.statics.requiredContainer&&!(this.parent instanceof this.statics.requiredContainer)&&this.wrap(this.statics.requiredContainer.blotName)}remove(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()}replaceWith(e,t){const s="string"==typeof e?this.scroll.create(e,t):e;return null!=this.parent&&(this.parent.insertBefore(s,this.next||void 0),this.remove()),s}split(e,t){return 0===e?this:this.next}update(e,t){}wrap(e,t){const s="string"==typeof e?this.scroll.create(e,t):e;if(null!=this.parent&&this.parent.insertBefore(s,this.next||void 0),"function"!=typeof s.appendChild)throw new o(`Cannot wrap ${e}`);return s.appendChild(this),s}};m.blotName="abstract";let f=m;const p=class extends f{static value(e){return!0}index(e,t){return this.domNode===e||this.domNode.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(t,1):-1}position(e,t){let s=Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);return e>0&&(s+=1),[this.parent.domNode,s]}value(){return{[this.statics.blotName]:this.statics.value(this.domNode)||!0}}};p.scope=r.INLINE_BLOT;const g=p;class b{constructor(){this.head=null,this.tail=null,this.length=0}append(...e){if(this.insertBefore(e[0],null),e.length>1){const t=e.slice(1);this.append(...t)}}at(e){const t=this.iterator();let s=t();for(;s&&e>0;)e-=1,s=t();return s}contains(e){const t=this.iterator();let s=t();for(;s;){if(s===e)return!0;s=t()}return!1}indexOf(e){const t=this.iterator();let s=t(),r=0;for(;s;){if(s===e)return r;r+=1,s=t()}return-1}insertBefore(e,t){null!=e&&(this.remove(e),e.next=t,null!=t?(e.prev=t.prev,null!=t.prev&&(t.prev.next=e),t.prev=e,t===this.head&&(this.head=e)):null!=this.tail?(this.tail.next=e,e.prev=this.tail,this.tail=e):(e.prev=null,this.head=this.tail=e),this.length+=1)}offset(e){let t=0,s=this.head;for(;null!=s;){if(s===e)return t;t+=s.length(),s=s.next}return-1}remove(e){this.contains(e)&&(null!=e.prev&&(e.prev.next=e.next),null!=e.next&&(e.next.prev=e.prev),e===this.head&&(this.head=e.next),e===this.tail&&(this.tail=e.prev),this.length-=1)}iterator(e=this.head){return()=>{const t=e;return null!=e&&(e=e.next),t}}find(e,t=!1){const s=this.iterator();let r=s();for(;r;){const n=r.length();if(e<n||t&&e===n&&(null==r.next||0!==r.next.length()))return[r,e];e-=n,r=s()}return[null,0]}forEach(e){const t=this.iterator();let s=t();for(;s;)e(s),s=t()}forEachAt(e,t,s){if(t<=0)return;const[r,n]=this.find(e);let o=e-n;const i=this.iterator(r);let l=i();for(;l&&o<e+t;){const r=l.length();e>o?s(l,e-o,Math.min(t,o+r-e)):s(l,0,Math.min(r,e+t-o)),o+=r,l=i()}}map(e){return this.reduce(((t,s)=>(t.push(e(s)),t)),[])}reduce(e,t){const s=this.iterator();let r=s();for(;r;)t=e(t,r),r=s();return t}}function y(e,t){const s=t.find(e);if(s)return s;try{return t.create(e)}catch{const s=t.create(r.INLINE);return Array.from(e.childNodes).forEach((e=>{s.domNode.appendChild(e)})),e.parentNode&&e.parentNode.replaceChild(s.domNode,e),s.attach(),s}}const v=class e extends f{constructor(e,t){super(e,t),this.uiNode=null,this.build()}appendChild(e){this.insertBefore(e)}attach(){super.attach(),this.children.forEach((e=>{e.attach()}))}attachUI(t){null!=this.uiNode&&this.uiNode.remove(),this.uiNode=t,e.uiClass&&this.uiNode.classList.add(e.uiClass),this.uiNode.setAttribute("contenteditable","false"),this.domNode.insertBefore(this.uiNode,this.domNode.firstChild)}build(){this.children=new b,Array.from(this.domNode.childNodes).filter((e=>e!==this.uiNode)).reverse().forEach((e=>{try{const t=y(e,this.scroll);this.insertBefore(t,this.children.head||void 0)}catch(t){if(t instanceof o)return;throw t}}))}deleteAt(e,t){if(0===e&&t===this.length())return this.remove();this.children.forEachAt(e,t,((e,t,s)=>{e.deleteAt(t,s)}))}descendant(t,s=0){const[r,n]=this.children.find(s);return null==t.blotName&&t(r)||null!=t.blotName&&r instanceof t?[r,n]:r instanceof e?r.descendant(t,n):[null,-1]}descendants(t,s=0,r=Number.MAX_VALUE){let n=[],o=r;return this.children.forEachAt(s,r,((s,r,i)=>{(null==t.blotName&&t(s)||null!=t.blotName&&s instanceof t)&&n.push(s),s instanceof e&&(n=n.concat(s.descendants(t,r,o))),o-=i})),n}detach(){this.children.forEach((e=>{e.detach()})),super.detach()}enforceAllowedChildren(){let t=!1;this.children.forEach((s=>{t||this.statics.allowedChildren.some((e=>s instanceof e))||(s.statics.scope===r.BLOCK_BLOT?(null!=s.next&&this.splitAfter(s),null!=s.prev&&this.splitAfter(s.prev),s.parent.unwrap(),t=!0):s instanceof e?s.unwrap():s.remove())}))}formatAt(e,t,s,r){this.children.forEachAt(e,t,((e,t,n)=>{e.formatAt(t,n,s,r)}))}insertAt(e,t,s){const[r,n]=this.children.find(e);if(r)r.insertAt(n,t,s);else{const e=null==s?this.scroll.create("text",t):this.scroll.create(t,s);this.appendChild(e)}}insertBefore(e,t){null!=e.parent&&e.parent.children.remove(e);let s=null;this.children.insertBefore(e,t||null),e.parent=this,null!=t&&(s=t.domNode),(this.domNode.parentNode!==e.domNode||this.domNode.nextSibling!==s)&&this.domNode.insertBefore(e.domNode,s),e.attach()}length(){return this.children.reduce(((e,t)=>e+t.length()),0)}moveChildren(e,t){this.children.forEach((s=>{e.insertBefore(s,t)}))}optimize(e){if(super.optimize(e),this.enforceAllowedChildren(),null!=this.uiNode&&this.uiNode!==this.domNode.firstChild&&this.domNode.insertBefore(this.uiNode,this.domNode.firstChild),0===this.children.length)if(null!=this.statics.defaultChild){const e=this.scroll.create(this.statics.defaultChild.blotName);this.appendChild(e)}else this.remove()}path(t,s=!1){const[r,n]=this.children.find(t,s),o=[[this,t]];return r instanceof e?o.concat(r.path(n,s)):(null!=r&&o.push([r,n]),o)}removeChild(e){this.children.remove(e)}replaceWith(t,s){const r="string"==typeof t?this.scroll.create(t,s):t;return r instanceof e&&this.moveChildren(r),super.replaceWith(r)}split(e,t=!1){if(!t){if(0===e)return this;if(e===this.length())return this.next}const s=this.clone();return this.parent&&this.parent.insertBefore(s,this.next||void 0),this.children.forEachAt(e,this.length(),((e,r,n)=>{const o=e.split(r,t);null!=o&&s.appendChild(o)})),s}splitAfter(e){const t=this.clone();for(;null!=e.next;)t.appendChild(e.next);return this.parent&&this.parent.insertBefore(t,this.next||void 0),t}unwrap(){this.parent&&this.moveChildren(this.parent,this.next||void 0),this.remove()}update(e,t){const s=[],r=[];e.forEach((e=>{e.target===this.domNode&&"childList"===e.type&&(s.push(...e.addedNodes),r.push(...e.removedNodes))})),r.forEach((e=>{if(null!=e.parentNode&&"IFRAME"!==e.tagName&&document.body.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY)return;const t=this.scroll.find(e);null!=t&&(null==t.domNode.parentNode||t.domNode.parentNode===this.domNode)&&t.detach()})),s.filter((e=>e.parentNode===this.domNode&&e!==this.uiNode)).sort(((e,t)=>e===t?0:e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1)).forEach((e=>{let t=null;null!=e.nextSibling&&(t=this.scroll.find(e.nextSibling));const s=y(e,this.scroll);(s.next!==t||null==s.next)&&(null!=s.parent&&s.parent.removeChild(this),this.insertBefore(s,t||void 0))})),this.enforceAllowedChildren()}};v.uiClass="";const j=v;const _=class e extends j{static create(e){return super.create(e)}static formats(t,s){const r=s.query(e.blotName);if(null==r||t.tagName!==r.tagName){if("string"==typeof this.tagName)return!0;if(Array.isArray(this.tagName))return t.tagName.toLowerCase()}}constructor(e,t){super(e,t),this.attributes=new h(this.domNode)}format(t,s){if(t!==this.statics.blotName||s){const e=this.scroll.query(t,r.INLINE);if(null==e)return;e instanceof n?this.attributes.attribute(e,s):s&&(t!==this.statics.blotName||this.formats()[t]!==s)&&this.replaceWith(t,s)}else this.children.forEach((t=>{t instanceof e||(t=t.wrap(e.blotName,!0)),this.attributes.copy(t)})),this.unwrap()}formats(){const e=this.attributes.values(),t=this.statics.formats(this.domNode,this.scroll);return null!=t&&(e[this.statics.blotName]=t),e}formatAt(e,t,s,n){null!=this.formats()[s]||this.scroll.query(s,r.ATTRIBUTE)?this.isolate(e,t).format(s,n):super.formatAt(e,t,s,n)}optimize(t){super.optimize(t);const s=this.formats();if(0===Object.keys(s).length)return this.unwrap();const r=this.next;r instanceof e&&r.prev===this&&function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const s in e)if(e[s]!==t[s])return!1;return!0}(s,r.formats())&&(r.moveChildren(this),r.remove())}replaceWith(e,t){const s=super.replaceWith(e,t);return this.attributes.copy(s),s}update(e,t){super.update(e,t),e.some((e=>e.target===this.domNode&&"attributes"===e.type))&&this.attributes.build()}wrap(t,s){const r=super.wrap(t,s);return r instanceof e&&this.attributes.move(r),r}};_.allowedChildren=[_,g],_.blotName="inline",_.scope=r.INLINE_BLOT,_.tagName="SPAN";const w=_,E=class e extends j{static create(e){return super.create(e)}static formats(t,s){const r=s.query(e.blotName);if(null==r||t.tagName!==r.tagName){if("string"==typeof this.tagName)return!0;if(Array.isArray(this.tagName))return t.tagName.toLowerCase()}}constructor(e,t){super(e,t),this.attributes=new h(this.domNode)}format(t,s){const o=this.scroll.query(t,r.BLOCK);null!=o&&(o instanceof n?this.attributes.attribute(o,s):t!==this.statics.blotName||s?s&&(t!==this.statics.blotName||this.formats()[t]!==s)&&this.replaceWith(t,s):this.replaceWith(e.blotName))}formats(){const e=this.attributes.values(),t=this.statics.formats(this.domNode,this.scroll);return null!=t&&(e[this.statics.blotName]=t),e}formatAt(e,t,s,n){null!=this.scroll.query(s,r.BLOCK)?this.format(s,n):super.formatAt(e,t,s,n)}insertAt(e,t,s){if(null==s||null!=this.scroll.query(t,r.INLINE))super.insertAt(e,t,s);else{const r=this.split(e);if(null==r)throw new Error("Attempt to insertAt after block boundaries");{const e=this.scroll.create(t,s);r.parent.insertBefore(e,r)}}}replaceWith(e,t){const s=super.replaceWith(e,t);return this.attributes.copy(s),s}update(e,t){super.update(e,t),e.some((e=>e.target===this.domNode&&"attributes"===e.type))&&this.attributes.build()}};E.blotName="block",E.scope=r.BLOCK_BLOT,E.tagName="P",E.allowedChildren=[w,E,g];const A=E,S=class extends j{checkMerge(){return null!==this.next&&this.next.statics.blotName===this.statics.blotName}deleteAt(e,t){super.deleteAt(e,t),this.enforceAllowedChildren()}formatAt(e,t,s,r){super.formatAt(e,t,s,r),this.enforceAllowedChildren()}insertAt(e,t,s){super.insertAt(e,t,s),this.enforceAllowedChildren()}optimize(e){super.optimize(e),this.children.length>0&&null!=this.next&&this.checkMerge()&&(this.next.moveChildren(this),this.next.remove())}};S.blotName="container",S.scope=r.BLOCK_BLOT;const k=S;const x=class extends g{static formats(e,t){}format(e,t){super.formatAt(0,this.length(),e,t)}formatAt(e,t,s,r){0===e&&t===this.length()?this.format(s,r):super.formatAt(e,t,s,r)}formats(){return this.statics.formats(this.domNode,this.scroll)}},O={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},N=class extends j{constructor(e,t){super(null,t),this.registry=e,this.scroll=this,this.build(),this.observer=new MutationObserver((e=>{this.update(e)})),this.observer.observe(this.domNode,O),this.attach()}create(e,t){return this.registry.create(this,e,t)}find(e,t=!1){const s=this.registry.find(e,t);return s?s.scroll===this?s:t?this.find(s.scroll.domNode.parentNode,!0):null:null}query(e,t=r.ANY){return this.registry.query(e,t)}register(...e){return this.registry.register(...e)}build(){null!=this.scroll&&super.build()}detach(){super.detach(),this.observer.disconnect()}deleteAt(e,t){this.update(),0===e&&t===this.length()?this.children.forEach((e=>{e.remove()})):super.deleteAt(e,t)}formatAt(e,t,s,r){this.update(),super.formatAt(e,t,s,r)}insertAt(e,t,s){this.update(),super.insertAt(e,t,s)}optimize(e=[],t={}){super.optimize(t);const s=t.mutationsMap||new WeakMap;let r=Array.from(this.observer.takeRecords());for(;r.length>0;)e.push(r.pop());const n=(e,t=!0)=>{null==e||e===this||null!=e.domNode.parentNode&&(s.has(e.domNode)||s.set(e.domNode,[]),t&&n(e.parent))},o=e=>{s.has(e.domNode)&&(e instanceof j&&e.children.forEach(o),s.delete(e.domNode),e.optimize(t))};let i=e;for(let l=0;i.length>0;l+=1){if(l>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(i.forEach((e=>{const t=this.find(e.target,!0);null!=t&&(t.domNode===e.target&&("childList"===e.type?(n(this.find(e.previousSibling,!1)),Array.from(e.addedNodes).forEach((e=>{const t=this.find(e,!1);n(t,!1),t instanceof j&&t.children.forEach((e=>{n(e,!1)}))}))):"attributes"===e.type&&n(t.prev)),n(t))})),this.children.forEach(o),i=Array.from(this.observer.takeRecords()),r=i.slice();r.length>0;)e.push(r.pop())}}update(e,t={}){e=e||this.observer.takeRecords();const s=new WeakMap;e.map((e=>{const t=this.find(e.target,!0);return null==t?null:s.has(t.domNode)?(s.get(t.domNode).push(e),null):(s.set(t.domNode,[e]),t)})).forEach((e=>{null!=e&&e!==this&&s.has(e.domNode)&&e.update(s.get(e.domNode)||[],t)})),t.mutationsMap=s,s.has(this.domNode)&&super.update(s.get(this.domNode),t),this.optimize(e,t)}};N.blotName="scroll",N.defaultChild=A,N.allowedChildren=[A,k],N.scope=r.BLOCK_BLOT,N.tagName="DIV";const q=N,T=class e extends g{static create(e){return document.createTextNode(e)}static value(e){return e.data}constructor(e,t){super(e,t),this.text=this.statics.value(this.domNode)}deleteAt(e,t){this.domNode.data=this.text=this.text.slice(0,e)+this.text.slice(e+t)}index(e,t){return this.domNode===e?t:-1}insertAt(e,t,s){null==s?(this.text=this.text.slice(0,e)+t+this.text.slice(e),this.domNode.data=this.text):super.insertAt(e,t,s)}length(){return this.text.length}optimize(t){super.optimize(t),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())}position(e,t=!1){return[this.domNode,e]}split(e,t=!1){if(!t){if(0===e)return this;if(e===this.length())return this.next}const s=this.scroll.create(this.domNode.splitText(e));return this.parent.insertBefore(s,this.next||void 0),this.text=this.statics.value(this.domNode),s}update(e,t){e.some((e=>"characterData"===e.type&&e.target===this.domNode))&&(this.text=this.statics.value(this.domNode))}value(){return this.text}};T.blotName="text",T.scope=r.INLINE_BLOT;const L=T},"./node_modules/quill/blots/block.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{BlockEmbed:()=>c,blockDelta:()=>u,bubbleFormats:()=>d,default:()=>a});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill-delta/dist/Delta.js"),o=s("./node_modules/quill/blots/break.js"),i=s("./node_modules/quill/blots/inline.js"),l=s("./node_modules/quill/blots/text.js");class a extends r.BlockBlot{cache={};delta(){return null==this.cache.delta&&(this.cache.delta=u(this)),this.cache.delta}deleteAt(e,t){super.deleteAt(e,t),this.cache={}}formatAt(e,t,s,n){t<=0||(this.scroll.query(s,r.Scope.BLOCK)?e+t===this.length()&&this.format(s,n):super.formatAt(e,Math.min(t,this.length()-e-1),s,n),this.cache={})}insertAt(e,t,s){if(null!=s)return super.insertAt(e,t,s),void(this.cache={});if(0===t.length)return;const r=t.split("\n"),n=r.shift();n.length>0&&(e<this.length()-1||null==this.children.tail?super.insertAt(Math.min(e,this.length()-1),n):this.children.tail.insertAt(this.children.tail.length(),n),this.cache={});let o=this;r.reduce(((e,t)=>(o=o.split(e,!0),o.insertAt(0,t),t.length)),e+n.length)}insertBefore(e,t){const{head:s}=this.children;super.insertBefore(e,t),s instanceof o.default&&s.remove(),this.cache={}}length(){return null==this.cache.length&&(this.cache.length=super.length()+1),this.cache.length}moveChildren(e,t){super.moveChildren(e,t),this.cache={}}optimize(e){super.optimize(e),this.cache={}}path(e){return super.path(e,!0)}removeChild(e){super.removeChild(e),this.cache={}}split(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t&&(0===e||e>=this.length()-1)){const t=this.clone();return 0===e?(this.parent.insertBefore(t,this),this):(this.parent.insertBefore(t,this.next),t)}const s=super.split(e,t);return this.cache={},s}}a.blotName="block",a.tagName="P",a.defaultChild=o.default,a.allowedChildren=[o.default,i.default,r.EmbedBlot,l.default];class c extends r.EmbedBlot{attach(){super.attach(),this.attributes=new r.AttributorStore(this.domNode)}delta(){return(new n).insert(this.value(),{...this.formats(),...this.attributes.values()})}format(e,t){const s=this.scroll.query(e,r.Scope.BLOCK_ATTRIBUTE);null!=s&&this.attributes.attribute(s,t)}formatAt(e,t,s,r){this.format(s,r)}insertAt(e,t,s){if(null!=s)return void super.insertAt(e,t,s);const r=t.split("\n"),n=r.pop(),o=r.map((e=>{const t=this.scroll.create(a.blotName);return t.insertAt(0,e),t})),i=this.split(e);o.forEach((e=>{this.parent.insertBefore(e,i)})),n&&this.parent.insertBefore(this.scroll.create("text",n),i)}}function u(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e.descendants(r.LeafBlot).reduce(((e,s)=>0===s.length()?e:e.insert(s.value(),d(s,{},t))),new n).insert("\n",d(e))}function d(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return null==e?t:("formats"in e&&"function"==typeof e.formats&&(t={...t,...e.formats()},s&&delete t["code-token"]),null==e.parent||"scroll"===e.parent.statics.blotName||e.parent.statics.scope!==e.statics.scope?t:d(e.parent,t,s))}c.scope=r.Scope.BLOCK_BLOT},"./node_modules/quill/blots/break.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");class n extends r.EmbedBlot{static value(){}optimize(){(this.prev||this.next)&&this.remove()}length(){return 0}value(){return""}}n.blotName="break",n.tagName="BR";const o=n},"./node_modules/quill/blots/container.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");class n extends r.ContainerBlot{}const o=n},"./node_modules/quill/blots/cursor.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/blots/text.js");class o extends r.EmbedBlot{static blotName="cursor";static className="ql-cursor";static tagName="span";static CONTENTS="\ufeff";static value(){}constructor(e,t,s){super(e,t),this.selection=s,this.textNode=document.createTextNode(o.CONTENTS),this.domNode.appendChild(this.textNode),this.savedLength=0}detach(){null!=this.parent&&this.parent.removeChild(this)}format(e,t){if(0!==this.savedLength)return void super.format(e,t);let s=this,n=0;for(;null!=s&&s.statics.scope!==r.Scope.BLOCK_BLOT;)n+=s.offset(s.parent),s=s.parent;null!=s&&(this.savedLength=o.CONTENTS.length,s.optimize(),s.formatAt(n,o.CONTENTS.length,e,t),this.savedLength=0)}index(e,t){return e===this.textNode?0:super.index(e,t)}length(){return this.savedLength}position(){return[this.textNode,this.textNode.data.length]}remove(){super.remove(),this.parent=null}restore(){if(this.selection.composing||null==this.parent)return null;const e=this.selection.getNativeRange();for(;null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);const t=this.prev instanceof n.default?this.prev:null,s=t?t.length():0,r=this.next instanceof n.default?this.next:null,i=r?r.text:"",{textNode:l}=this,a=l.data.split(o.CONTENTS).join("");let c;if(l.data=o.CONTENTS,t)c=t,(a||r)&&(t.insertAt(t.length(),a+i),r&&r.remove());else if(r)c=r,r.insertAt(0,a);else{const e=document.createTextNode(a);c=this.scroll.create(e),this.parent.insertBefore(c,this)}if(this.remove(),e){const n=(e,n)=>t&&e===t.domNode?n:e===l?s+n-1:r&&e===r.domNode?s+a.length+n:null,o=n(e.start.node,e.start.offset),i=n(e.end.node,e.end.offset);if(null!==o&&null!==i)return{startNode:c.domNode,startOffset:o,endNode:c.domNode,endOffset:i}}return null}update(e,t){if(e.some((e=>"characterData"===e.type&&e.target===this.textNode))){const e=this.restore();e&&(t.range=e)}}optimize(e){super.optimize(e);let{parent:t}=this;for(;t;){if("A"===t.domNode.tagName){this.savedLength=o.CONTENTS.length,t.isolate(this.offset(t),this.length()).unwrap(),this.savedLength=0;break}t=t.parent}}value(){return""}}const i=o},"./node_modules/quill/blots/embed.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/blots/text.js");const o="\ufeff";class i extends r.EmbedBlot{constructor(e,t){super(e,t),this.contentNode=document.createElement("span"),this.contentNode.setAttribute("contenteditable","false"),Array.from(this.domNode.childNodes).forEach((e=>{this.contentNode.appendChild(e)})),this.leftGuard=document.createTextNode(o),this.rightGuard=document.createTextNode(o),this.domNode.appendChild(this.leftGuard),this.domNode.appendChild(this.contentNode),this.domNode.appendChild(this.rightGuard)}index(e,t){return e===this.leftGuard?0:e===this.rightGuard?1:super.index(e,t)}restore(e){let t,s=null;const r=e.data.split(o).join("");if(e===this.leftGuard)if(this.prev instanceof n.default){const e=this.prev.length();this.prev.insertAt(e,r),s={startNode:this.prev.domNode,startOffset:e+r.length}}else t=document.createTextNode(r),this.parent.insertBefore(this.scroll.create(t),this),s={startNode:t,startOffset:r.length};else e===this.rightGuard&&(this.next instanceof n.default?(this.next.insertAt(0,r),s={startNode:this.next.domNode,startOffset:r.length}):(t=document.createTextNode(r),this.parent.insertBefore(this.scroll.create(t),this.next),s={startNode:t,startOffset:r.length}));return e.data=o,s}update(e,t){e.forEach((e=>{if("characterData"===e.type&&(e.target===this.leftGuard||e.target===this.rightGuard)){const s=this.restore(e.target);s&&(t.range=s)}}))}}const l=i},"./node_modules/quill/blots/inline.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/blots/break.js"),o=s("./node_modules/quill/blots/text.js");class i extends r.InlineBlot{static allowedChildren=[i,n.default,r.EmbedBlot,o.default];static order=["cursor","inline","link","underline","strike","italic","bold","script","code"];static compare(e,t){const s=i.order.indexOf(e),r=i.order.indexOf(t);return s>=0||r>=0?s-r:e===t?0:e<t?-1:1}formatAt(e,t,s,n){if(i.compare(this.statics.blotName,s)<0&&this.scroll.query(s,r.Scope.BLOT)){const r=this.isolate(e,t);n&&r.wrap(s,n)}else super.formatAt(e,t,s,n)}optimize(e){if(super.optimize(e),this.parent instanceof i&&i.compare(this.statics.blotName,this.parent.statics.blotName)>0){const e=this.parent.isolate(this.offset(),this.length());this.moveChildren(e),e.wrap(this)}}}const l=i},"./node_modules/quill/blots/scroll.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill-delta/dist/Delta.js"),o=s("./node_modules/quill/core/emitter.js"),i=s("./node_modules/quill/blots/block.js"),l=s("./node_modules/quill/blots/break.js"),a=s("./node_modules/quill/blots/container.js");function c(e){return e instanceof i.default||e instanceof i.BlockEmbed}function u(e){return"function"==typeof e.updateContent}class d extends r.ScrollBlot{static blotName="scroll";static className="ql-editor";static tagName="DIV";static defaultChild=i.default;static allowedChildren=[i.default,i.BlockEmbed,a.default];constructor(e,t,s){let{emitter:r}=s;super(e,t),this.emitter=r,this.batch=!1,this.optimize(),this.enable(),this.domNode.addEventListener("dragstart",(e=>this.handleDragStart(e)))}batchStart(){Array.isArray(this.batch)||(this.batch=[])}batchEnd(){if(!this.batch)return;const e=this.batch;this.batch=!1,this.update(e)}emitMount(e){this.emitter.emit(o.default.events.SCROLL_BLOT_MOUNT,e)}emitUnmount(e){this.emitter.emit(o.default.events.SCROLL_BLOT_UNMOUNT,e)}emitEmbedUpdate(e,t){this.emitter.emit(o.default.events.SCROLL_EMBED_UPDATE,e,t)}deleteAt(e,t){const[s,r]=this.line(e),[n]=this.line(e+t);if(super.deleteAt(e,t),null!=n&&s!==n&&r>0){if(s instanceof i.BlockEmbed||n instanceof i.BlockEmbed)return void this.optimize();const e=n.children.head instanceof l.default?null:n.children.head;s.moveChildren(n,e),s.remove()}this.optimize()}enable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.domNode.setAttribute("contenteditable",e?"true":"false")}formatAt(e,t,s,r){super.formatAt(e,t,s,r),this.optimize()}insertAt(e,t,s){if(e>=this.length())if(null==s||null==this.scroll.query(t,r.Scope.BLOCK)){const e=this.scroll.create(this.statics.defaultChild.blotName);this.appendChild(e),null==s&&t.endsWith("\n")?e.insertAt(0,t.slice(0,-1),s):e.insertAt(0,t,s)}else{const e=this.scroll.create(t,s);this.appendChild(e)}else super.insertAt(e,t,s);this.optimize()}insertBefore(e,t){if(e.statics.scope===r.Scope.INLINE_BLOT){const s=this.scroll.create(this.statics.defaultChild.blotName);s.appendChild(e),super.insertBefore(s,t)}else super.insertBefore(e,t)}insertContents(e,t){const s=this.deltaToRenderBlocks(t.concat((new n).insert("\n"))),r=s.pop();if(null==r)return;this.batchStart();const o=s.shift();if(o){const t="block"===o.type&&(0===o.delta.length()||!this.descendant(i.BlockEmbed,e)[0]&&e<this.length()),s="block"===o.type?o.delta:(new n).insert({[o.key]:o.value});h(this,e,s);const r="block"===o.type?1:0,l=e+s.length()+r;t&&this.insertAt(l-1,"\n");const a=(0,i.bubbleFormats)(this.line(e)[0]),c=n.AttributeMap.diff(a,o.attributes)||{};Object.keys(c).forEach((e=>{this.formatAt(l-1,1,e,c[e])})),e=l}let[l,a]=this.children.find(e);if(s.length&&(l&&(l=l.split(a),a=0),s.forEach((e=>{if("block"===e.type){h(this.createBlock(e.attributes,l||void 0),0,e.delta)}else{const t=this.create(e.key,e.value);this.insertBefore(t,l||void 0),Object.keys(e.attributes).forEach((s=>{t.format(s,e.attributes[s])}))}}))),"block"===r.type&&r.delta.length()){h(this,l?l.offset(l.scroll)+a:this.length(),r.delta)}this.batchEnd(),this.optimize()}isEnabled(){return"true"===this.domNode.getAttribute("contenteditable")}leaf(e){const t=this.path(e).pop();if(!t)return[null,-1];const[s,n]=t;return s instanceof r.LeafBlot?[s,n]:[null,-1]}line(e){return e===this.length()?this.line(e-1):this.descendant(c,e)}lines(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;const s=(e,t,n)=>{let o=[],i=n;return e.children.forEachAt(t,n,((e,t,n)=>{c(e)?o.push(e):e instanceof r.ContainerBlot&&(o=o.concat(s(e,t,i))),i-=n})),o};return s(this,e,t)}optimize(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.batch||(super.optimize(e,t),e.length>0&&this.emitter.emit(o.default.events.SCROLL_OPTIMIZE,e,t))}path(e){return super.path(e).slice(1)}remove(){}update(e){if(this.batch)return void(Array.isArray(e)&&(this.batch=this.batch.concat(e)));let t=o.default.sources.USER;"string"==typeof e&&(t=e),Array.isArray(e)||(e=this.observer.takeRecords()),(e=e.filter((e=>{let{target:t}=e;const s=this.find(t,!0);return s&&!u(s)}))).length>0&&this.emitter.emit(o.default.events.SCROLL_BEFORE_UPDATE,t,e),super.update(e.concat([])),e.length>0&&this.emitter.emit(o.default.events.SCROLL_UPDATE,t,e)}updateEmbedAt(e,t,s){const[r]=this.descendant((e=>e instanceof i.BlockEmbed),e);r&&r.statics.blotName===t&&u(r)&&r.updateContent(s)}handleDragStart(e){e.preventDefault()}deltaToRenderBlocks(e){const t=[];let s=new n;return e.forEach((e=>{const o=e?.insert;if(o)if("string"==typeof o){const r=o.split("\n");r.slice(0,-1).forEach((r=>{s.insert(r,e.attributes),t.push({type:"block",delta:s,attributes:e.attributes??{}}),s=new n}));const i=r[r.length-1];i&&s.insert(i,e.attributes)}else{const i=Object.keys(o)[0];if(!i)return;this.query(i,r.Scope.INLINE)?s.push(e):(s.length()&&t.push({type:"block",delta:s,attributes:{}}),s=new n,t.push({type:"blockEmbed",key:i,value:o[i],attributes:e.attributes??{}}))}})),s.length()&&t.push({type:"block",delta:s,attributes:{}}),t}createBlock(e,t){let s;const n={};Object.entries(e).forEach((e=>{let[t,o]=e;null!=this.query(t,r.Scope.BLOCK&r.Scope.BLOT)?s=t:n[t]=o}));const o=this.create(s||this.statics.defaultChild.blotName,s?e[s]:void 0);this.insertBefore(o,t||void 0);const i=o.length();return Object.entries(n).forEach((e=>{let[t,s]=e;o.formatAt(0,i,t,s)})),o}}function h(e,t,s){s.reduce(((t,s)=>{const o=n.Op.length(s);let l=s.attributes||{};if(null!=s.insert)if("string"==typeof s.insert){const o=s.insert;e.insertAt(t,o);const[a]=e.descendant(r.LeafBlot,t),c=(0,i.bubbleFormats)(a);l=n.AttributeMap.diff(c,l)||{}}else if("object"==typeof s.insert){const o=Object.keys(s.insert)[0];if(null==o)return t;e.insertAt(t,o,s.insert[o]);if(null!=e.scroll.query(o,r.Scope.INLINE)){const[s]=e.descendant(r.LeafBlot,t),o=(0,i.bubbleFormats)(s);l=n.AttributeMap.diff(o,l)||{}}}return Object.keys(l).forEach((s=>{e.formatAt(t,o,s,l[s])})),t+o}),t)}const m=d},"./node_modules/quill/blots/text.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n,escapeText:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");class n extends r.TextBlot{}function o(e){return e.replace(/[&<>"']/g,(e=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}[e])))}},"./node_modules/quill/core.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{AttributeMap:()=>g.AttributeMap,Delta:()=>g,Module:()=>v.default,Op:()=>g.Op,OpIterator:()=>g.OpIterator,Parchment:()=>r.Parchment,Range:()=>r.Range,default:()=>j});var r=s("./node_modules/quill/core/quill.js"),n=s("./node_modules/quill/blots/block.js"),o=s("./node_modules/quill/blots/break.js"),i=s("./node_modules/quill/blots/container.js"),l=s("./node_modules/quill/blots/cursor.js"),a=s("./node_modules/quill/blots/embed.js"),c=s("./node_modules/quill/blots/inline.js"),u=s("./node_modules/quill/blots/scroll.js"),d=s("./node_modules/quill/blots/text.js"),h=s("./node_modules/quill/modules/clipboard.js"),m=s("./node_modules/quill/modules/history.js"),f=s("./node_modules/quill/modules/keyboard.js"),p=s("./node_modules/quill/modules/uploader.js"),g=s("./node_modules/quill-delta/dist/Delta.js"),b=s("./node_modules/quill/modules/input.js"),y=s("./node_modules/quill/modules/uiNode.js"),v=s("./node_modules/quill/core/module.js");r.default.register({"blots/block":n.default,"blots/block/embed":n.BlockEmbed,"blots/break":o.default,"blots/container":i.default,"blots/cursor":l.default,"blots/embed":a.default,"blots/inline":c.default,"blots/scroll":u.default,"blots/text":d.default,"modules/clipboard":h.default,"modules/history":m.default,"modules/keyboard":f.default,"modules/uploader":p.default,"modules/input":b.default,"modules/uiNode":y.default});const j=r.default},"./node_modules/quill/core/composition.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/embed.js"),n=s("./node_modules/quill/core/emitter.js");const o=class{isComposing=!1;constructor(e,t){this.scroll=e,this.emitter=t,this.setupListeners()}setupListeners(){this.scroll.domNode.addEventListener("compositionstart",(e=>{this.isComposing||this.handleCompositionStart(e)})),this.scroll.domNode.addEventListener("compositionend",(e=>{this.isComposing&&queueMicrotask((()=>{this.handleCompositionEnd(e)}))}))}handleCompositionStart(e){const t=e.target instanceof Node?this.scroll.find(e.target,!0):null;!t||t instanceof r.default||(this.emitter.emit(n.default.events.COMPOSITION_BEFORE_START,e),this.scroll.batchStart(),this.emitter.emit(n.default.events.COMPOSITION_START,e),this.isComposing=!0)}handleCompositionEnd(e){this.emitter.emit(n.default.events.COMPOSITION_BEFORE_END,e),this.scroll.batchEnd(),this.emitter.emit(n.default.events.COMPOSITION_END,e),this.isComposing=!1}}},"./node_modules/quill/core/editor.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>j});var r=s("./node_modules/lodash-es/merge.js"),n=s("./node_modules/lodash-es/cloneDeep.js"),o=s("./node_modules/lodash-es/isEqual.js"),i=s("./node_modules/parchment/dist/parchment.js"),l=s("./node_modules/quill-delta/dist/Delta.js"),a=s("./node_modules/quill/blots/block.js"),c=s("./node_modules/quill/blots/break.js"),u=s("./node_modules/quill/blots/cursor.js"),d=s("./node_modules/quill/blots/text.js"),h=s("./node_modules/quill/core/selection.js");const m=/^[ -~]*$/;function f(e,t,s){if(0===e.length){const[e]=b(s.pop());return t<=0?`</li></${e}>`:`</li></${e}>${f([],t-1,s)}`}const[{child:r,offset:n,length:o,indent:i,type:l},...a]=e,[c,u]=b(l);if(i>t)return s.push(l),i===t+1?`<${c}><li${u}>${p(r,n,o)}${f(a,i,s)}`:`<${c}><li>${f(e,t+1,s)}`;const d=s[s.length-1];if(i===t&&l===d)return`</li><li${u}>${p(r,n,o)}${f(a,i,s)}`;const[h]=b(s.pop());return`</li></${h}>${f(e,t-1,s)}`}function p(e,t,s){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if("html"in e&&"function"==typeof e.html)return e.html(t,s);if(e instanceof d.default)return(0,d.escapeText)(e.value().slice(t,t+s));if(e instanceof i.ParentBlot){if("list-container"===e.statics.blotName){const r=[];return e.children.forEachAt(t,s,((e,t,s)=>{const n="formats"in e&&"function"==typeof e.formats?e.formats():{};r.push({child:e,offset:t,length:s,indent:n.indent||0,type:n.list})})),f(r,-1,[])}const n=[];if(e.children.forEachAt(t,s,((e,t,s)=>{n.push(p(e,t,s))})),r||"list"===e.statics.blotName)return n.join("");const{outerHTML:o,innerHTML:i}=e.domNode,[l,a]=o.split(`>${i}<`);return"<table"===l?`<table style="border: 1px solid #000;">${n.join("")}<${a}`:`${l}>${n.join("")}<${a}`}return e.domNode instanceof Element?e.domNode.outerHTML:""}function g(e,t){return Object.keys(t).reduce(((s,r)=>{if(null==e[r])return s;const n=t[r];return n===e[r]?s[r]=n:Array.isArray(n)?n.indexOf(e[r])<0?s[r]=n.concat([e[r]]):s[r]=n:s[r]=[n,e[r]],s}),{})}function b(e){const t="ordered"===e?"ol":"ul";switch(e){case"checked":return[t,' data-list="checked"'];case"unchecked":return[t,' data-list="unchecked"'];default:return[t,""]}}function y(e){return e.reduce(((e,t)=>{if("string"==typeof t.insert){const s=t.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return e.insert(s,t.attributes)}return e.push(t)}),new l)}function v(e,t){let{index:s,length:r}=e;return new h.Range(s+t,r)}const j=class{constructor(e){this.scroll=e,this.delta=this.getDelta()}applyDelta(e){this.scroll.update();let t=this.scroll.length();this.scroll.batchStart();const s=y(e),n=new l;return function(e){const t=[];return e.forEach((e=>{if("string"==typeof e.insert){e.insert.split("\n").forEach(((s,r)=>{r&&t.push({insert:"\n",attributes:e.attributes}),s&&t.push({insert:s,attributes:e.attributes})}))}else t.push(e)})),t}(s.ops.slice()).reduce(((e,s)=>{const o=l.Op.length(s);let c=s.attributes||{},u=!1,h=!1;if(null!=s.insert){if(n.retain(o),"string"==typeof s.insert){const n=s.insert;h=!n.endsWith("\n")&&(t<=e||!!this.scroll.descendant(a.BlockEmbed,e)[0]),this.scroll.insertAt(e,n);const[o,u]=this.scroll.line(e);let d=(0,r.default)({},(0,a.bubbleFormats)(o));if(o instanceof a.default){const[e]=o.descendant(i.LeafBlot,u);e&&(d=(0,r.default)(d,(0,a.bubbleFormats)(e)))}c=l.AttributeMap.diff(d,c)||{}}else if("object"==typeof s.insert){const n=Object.keys(s.insert)[0];if(null==n)return e;const o=null!=this.scroll.query(n,i.Scope.INLINE);if(o)(t<=e||this.scroll.descendant(a.BlockEmbed,e)[0])&&(h=!0);else if(e>0){const[t,s]=this.scroll.descendant(i.LeafBlot,e-1);if(t instanceof d.default){"\n"!==t.value()[s]&&(u=!0)}else t instanceof i.EmbedBlot&&t.statics.scope===i.Scope.INLINE_BLOT&&(u=!0)}if(this.scroll.insertAt(e,n,s.insert[n]),o){const[t]=this.scroll.descendant(i.LeafBlot,e);if(t){const e=(0,r.default)({},(0,a.bubbleFormats)(t));c=l.AttributeMap.diff(e,c)||{}}}}t+=o}else if(n.push(s),null!==s.retain&&"object"==typeof s.retain){const t=Object.keys(s.retain)[0];if(null==t)return e;this.scroll.updateEmbedAt(e,t,s.retain[t])}Object.keys(c).forEach((t=>{this.scroll.formatAt(e,o,t,c[t])}));const m=u?1:0,f=h?1:0;return t+=m+f,n.retain(m),n.delete(f),e+o+m+f}),0),n.reduce(((e,t)=>"number"==typeof t.delete?(this.scroll.deleteAt(e,t.delete),e):e+l.Op.length(t)),0),this.scroll.batchEnd(),this.scroll.optimize(),this.update(s)}deleteText(e,t){return this.scroll.deleteAt(e,t),this.update((new l).retain(e).delete(t))}formatLine(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.scroll.update(),Object.keys(s).forEach((r=>{this.scroll.lines(e,Math.max(t,1)).forEach((e=>{e.format(r,s[r])}))})),this.scroll.optimize();const r=(new l).retain(e).retain(t,(0,n.default)(s));return this.update(r)}formatText(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object.keys(s).forEach((r=>{this.scroll.formatAt(e,t,r,s[r])}));const r=(new l).retain(e).retain(t,(0,n.default)(s));return this.update(r)}getContents(e,t){return this.delta.slice(e,e+t)}getDelta(){return this.scroll.lines().reduce(((e,t)=>e.concat(t.delta())),new l)}getFormat(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=[],r=[];0===t?this.scroll.path(e).forEach((e=>{const[t]=e;t instanceof a.default?s.push(t):t instanceof i.LeafBlot&&r.push(t)})):(s=this.scroll.lines(e,t),r=this.scroll.descendants(i.LeafBlot,e,t));const[n,o]=[s,r].map((e=>{const t=e.shift();if(null==t)return{};let s=(0,a.bubbleFormats)(t);for(;Object.keys(s).length>0;){const t=e.shift();if(null==t)return s;s=g((0,a.bubbleFormats)(t),s)}return s}));return{...n,...o}}getHTML(e,t){const[s,r]=this.scroll.line(e);if(s){const n=s.length();return!(s.length()>=r+t)||0===r&&t===n?p(this.scroll,e,t,!0):p(s,r,t,!0)}return""}getText(e,t){return this.getContents(e,t).filter((e=>"string"==typeof e.insert)).map((e=>e.insert)).join("")}insertContents(e,t){const s=y(t),r=(new l).retain(e).concat(s);return this.scroll.insertContents(e,s),this.update(r)}insertEmbed(e,t,s){return this.scroll.insertAt(e,t,s),this.update((new l).retain(e).insert({[t]:s}))}insertText(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t=t.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(e,t),Object.keys(s).forEach((r=>{this.scroll.formatAt(e,t.length,r,s[r])})),this.update((new l).retain(e).insert(t,(0,n.default)(s)))}isBlank(){if(0===this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;const e=this.scroll.children.head;if(e?.statics.blotName!==a.default.blotName)return!1;const t=e;return!(t.children.length>1)&&t.children.head instanceof c.default}removeFormat(e,t){const s=this.getText(e,t),[r,n]=this.scroll.line(e+t);let o=0,i=new l;null!=r&&(o=r.length()-n,i=r.delta().slice(n,n+o-1).insert("\n"));const a=this.getContents(e,t+o).diff((new l).insert(s).concat(i)),c=(new l).retain(e).concat(a);return this.applyDelta(c)}update(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;const r=this.delta;if(1===t.length&&"characterData"===t[0].type&&t[0].target.data.match(m)&&this.scroll.find(t[0].target)){const n=this.scroll.find(t[0].target),o=(0,a.bubbleFormats)(n),i=n.offset(this.scroll),c=t[0].oldValue.replace(u.default.CONTENTS,""),d=(new l).insert(c),h=(new l).insert(n.value()),m=s&&{oldRange:v(s.oldRange,-i),newRange:v(s.newRange,-i)};e=(new l).retain(i).concat(d.diff(h,m)).reduce(((e,t)=>t.insert?e.insert(t.insert,o):e.push(t)),new l),this.delta=r.compose(e)}else this.delta=this.getDelta(),e&&(0,o.default)(r.compose(e),this.delta)||(e=r.diff(this.delta,s));return e}}},"./node_modules/quill/core/emitter.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/quill/node_modules/eventemitter3/index.mjs"),n=s("./node_modules/quill/core/instances.js");const o=(0,s("./node_modules/quill/core/logger.js").default)("quill:events");["selectionchange","mousedown","mouseup","click"].forEach((e=>{document.addEventListener(e,(function(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];Array.from(document.querySelectorAll(".ql-container")).forEach((e=>{const s=n.default.get(e);s&&s.emitter&&s.emitter.handleDOM(...t)}))}))}));class i extends r.EventEmitter{static events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_BLOT_MOUNT:"scroll-blot-mount",SCROLL_BLOT_UNMOUNT:"scroll-blot-unmount",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SCROLL_EMBED_UPDATE:"scroll-embed-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change",COMPOSITION_BEFORE_START:"composition-before-start",COMPOSITION_START:"composition-start",COMPOSITION_BEFORE_END:"composition-before-end",COMPOSITION_END:"composition-end"};static sources={API:"api",SILENT:"silent",USER:"user"};constructor(){super(),this.domListeners={},this.on("error",o.error)}emit(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return o.log.call(o,...t),super.emit(...t)}handleDOM(e){for(var t=arguments.length,s=new Array(t>1?t-1:0),r=1;r<t;r++)s[r-1]=arguments[r];(this.domListeners[e.type]||[]).forEach((t=>{let{node:r,handler:n}=t;(e.target===r||r.contains(e.target))&&n(e,...s)}))}listenDOM(e,t,s){this.domListeners[e]||(this.domListeners[e]=[]),this.domListeners[e].push({node:t,handler:s})}}const l=i},"./node_modules/quill/core/instances.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=new WeakMap},"./node_modules/quill/core/logger.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});const r=["error","warn","log","info"];let n="warn";function o(e){if(n&&r.indexOf(e)<=r.indexOf(n))for(var t=arguments.length,s=new Array(t>1?t-1:0),o=1;o<t;o++)s[o-1]=arguments[o]}function i(e){return r.reduce(((t,s)=>(t[s]=o.bind(console,s,e),t)),{})}i.level=e=>{n=e},o.level=i.level;const l=i},"./node_modules/quill/core/module.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=class{static DEFAULTS={};constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.quill=e,this.options=t}}},"./node_modules/quill/core/quill.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Parchment:()=>n,Range:()=>d.Range,default:()=>y,expandConfig:()=>w,globalRegistry:()=>b,overload:()=>A});var r=s("./node_modules/lodash-es/merge.js"),n=s("./node_modules/parchment/dist/parchment.js"),o=s("./node_modules/quill-delta/dist/Delta.js"),i=s("./node_modules/quill/core/editor.js"),l=s("./node_modules/quill/core/emitter.js"),a=s("./node_modules/quill/core/instances.js"),c=s("./node_modules/quill/core/logger.js"),u=s("./node_modules/quill/core/module.js"),d=s("./node_modules/quill/core/selection.js"),h=s("./node_modules/quill/core/composition.js"),m=s("./node_modules/quill/core/theme.js"),f=s("./node_modules/quill/core/utils/scrollRectIntoView.js"),p=s("./node_modules/quill/core/utils/createRegistryWithFormats.js");const g=(0,c.default)("quill"),b=new n.Registry;n.ParentBlot.uiClass="ql-ui";class y{static DEFAULTS={bounds:null,modules:{clipboard:!0,keyboard:!0,history:!0,uploader:!0},placeholder:"",readOnly:!1,registry:b,theme:"default"};static events=l.default.events;static sources=l.default.sources;static version="2.0.2";static imports={delta:o,parchment:n,"core/module":u.default,"core/theme":m.default};static debug(e){!0===e&&(e="log"),c.default.level(e)}static find(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return a.default.get(e)||b.find(e,t)}static import(e){return null==this.imports[e]&&g.error(`Cannot import ${e}. Are you sure it was registered?`),this.imports[e]}static register(){if("string"!=typeof(arguments.length<=0?void 0:arguments[0])){const e=arguments.length<=0?void 0:arguments[0],t=!!(arguments.length<=1?void 0:arguments[1]),s="attrName"in e?e.attrName:e.blotName;"string"==typeof s?this.register(`formats/${s}`,e,t):Object.keys(e).forEach((s=>{this.register(s,e[s],t)}))}else{const e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],s=!!(arguments.length<=2?void 0:arguments[2]);null==this.imports[e]||s||g.warn(`Overwriting ${e} with`,t),this.imports[e]=t,(e.startsWith("blots/")||e.startsWith("formats/"))&&t&&"boolean"!=typeof t&&"abstract"!==t.blotName&&b.register(t),"function"==typeof t.register&&t.register(b)}}constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.options=w(e,t),this.container=this.options.container,null==this.container)return void g.error("Invalid Quill container",e);this.options.debug&&y.debug(this.options.debug);const s=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",a.default.set(this.container,this),this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.emitter=new l.default;const r=n.ScrollBlot.blotName,c=this.options.registry.query(r);if(!c||!("blotName"in c))throw new Error(`Cannot initialize Quill without "${r}" blot`);if(this.scroll=new c(this.options.registry,this.root,{emitter:this.emitter}),this.editor=new i.default(this.scroll),this.selection=new d.default(this.scroll,this.emitter),this.composition=new h.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.uploader=this.theme.addModule("uploader"),this.theme.addModule("input"),this.theme.addModule("uiNode"),this.theme.init(),this.emitter.on(l.default.events.EDITOR_CHANGE,(e=>{e===l.default.events.TEXT_CHANGE&&this.root.classList.toggle("ql-blank",this.editor.isBlank())})),this.emitter.on(l.default.events.SCROLL_UPDATE,((e,t)=>{const s=this.selection.lastRange,[r]=this.selection.getRange(),n=s&&r?{oldRange:s,newRange:r}:void 0;E.call(this,(()=>this.editor.update(null,t,n)),e)})),this.emitter.on(l.default.events.SCROLL_EMBED_UPDATE,((e,t)=>{const s=this.selection.lastRange,[r]=this.selection.getRange(),n=s&&r?{oldRange:s,newRange:r}:void 0;E.call(this,(()=>{const s=(new o).retain(e.offset(this)).retain({[e.statics.blotName]:t});return this.editor.update(s,[],n)}),y.sources.USER)})),s){const e=this.clipboard.convert({html:`${s}<p><br></p>`,text:"\n"});this.setContents(e)}this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable(),this.allowReadOnlyEdits=!1}addContainer(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof e){const t=e;(e=document.createElement("div")).classList.add(t)}return this.container.insertBefore(e,t),e}blur(){this.selection.setRange(null)}deleteText(e,t,s){return[e,t,,s]=A(e,t,s),E.call(this,(()=>this.editor.deleteText(e,t)),s,e,-1*t)}disable(){this.enable(!1)}editReadOnly(e){this.allowReadOnlyEdits=!0;const t=e();return this.allowReadOnlyEdits=!1,t}enable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.scroll.enable(e),this.container.classList.toggle("ql-disabled",!e)}focus(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.selection.focus(),e.preventScroll||this.scrollSelectionIntoView()}format(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default.sources.API;return E.call(this,(()=>{const s=this.getSelection(!0);let r=new o;if(null==s)return r;if(this.scroll.query(e,n.Scope.BLOCK))r=this.editor.formatLine(s.index,s.length,{[e]:t});else{if(0===s.length)return this.selection.format(e,t),r;r=this.editor.formatText(s.index,s.length,{[e]:t})}return this.setSelection(s,l.default.sources.SILENT),r}),s)}formatLine(e,t,s,r,n){let o;return[e,t,o,n]=A(e,t,s,r,n),E.call(this,(()=>this.editor.formatLine(e,t,o)),n,e,0)}formatText(e,t,s,r,n){let o;return[e,t,o,n]=A(e,t,s,r,n),E.call(this,(()=>this.editor.formatText(e,t,o)),n,e,0)}getBounds(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=null;if(s="number"==typeof e?this.selection.getBounds(e,t):this.selection.getBounds(e.index,e.length),!s)return null;const r=this.container.getBoundingClientRect();return{bottom:s.bottom-r.top,height:s.height,left:s.left-r.left,right:s.right-r.left,top:s.top-r.top,width:s.width}}getContents(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-e;return[e,t]=A(e,t),this.editor.getContents(e,t)}getFormat(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getSelection(!0),t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return"number"==typeof e?this.editor.getFormat(e,t):this.editor.getFormat(e.index,e.length)}getIndex(e){return e.offset(this.scroll)}getLength(){return this.scroll.length()}getLeaf(e){return this.scroll.leaf(e)}getLine(e){return this.scroll.line(e)}getLines(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;return"number"!=typeof e?this.scroll.lines(e.index,e.length):this.scroll.lines(e,t)}getModule(e){return this.theme.modules[e]}getSelection(){return arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&this.focus(),this.update(),this.selection.getRange()[0]}getSemanticHTML(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return"number"==typeof e&&(t=t??this.getLength()-e),[e,t]=A(e,t),this.editor.getHTML(e,t)}getText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return"number"==typeof e&&(t=t??this.getLength()-e),[e,t]=A(e,t),this.editor.getText(e,t)}hasFocus(){return this.selection.hasFocus()}insertEmbed(e,t,s){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:y.sources.API;return E.call(this,(()=>this.editor.insertEmbed(e,t,s)),r,e)}insertText(e,t,s,r,n){let o;return[e,,o,n]=A(e,0,s,r,n),E.call(this,(()=>this.editor.insertText(e,t,o)),n,e,t.length)}isEnabled(){return this.scroll.isEnabled()}off(){return this.emitter.off(...arguments)}on(){return this.emitter.on(...arguments)}once(){return this.emitter.once(...arguments)}removeFormat(e,t,s){return[e,t,,s]=A(e,t,s),E.call(this,(()=>this.editor.removeFormat(e,t)),s,e)}scrollRectIntoView(e){(0,f.default)(this.root,e)}scrollIntoView(){this.scrollSelectionIntoView()}scrollSelectionIntoView(){const e=this.selection.lastRange,t=e&&this.selection.getBounds(e.index,e.length);t&&this.scrollRectIntoView(t)}setContents(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.default.sources.API;return E.call(this,(()=>{e=new o(e);const t=this.getLength(),s=this.editor.deleteText(0,t),r=this.editor.insertContents(0,e),n=this.editor.deleteText(this.getLength()-1,1);return s.compose(r).compose(n)}),t)}setSelection(e,t,s){null==e?this.selection.setRange(null,t||y.sources.API):([e,t,,s]=A(e,t,s),this.selection.setRange(new d.Range(Math.max(0,e),t),s),s!==l.default.sources.SILENT&&this.scrollSelectionIntoView())}setText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.default.sources.API;const s=(new o).insert(e);return this.setContents(s,t)}update(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l.default.sources.USER;const t=this.scroll.update(e);return this.selection.update(e),t}updateContents(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.default.sources.API;return E.call(this,(()=>(e=new o(e),this.editor.applyDelta(e))),t,!0)}}function v(e){return"string"==typeof e?document.querySelector(e):e}function j(e){return Object.entries(e??{}).reduce(((e,t)=>{let[s,r]=t;return{...e,[s]:!0===r?{}:r}}),{})}function _(e){return Object.fromEntries(Object.entries(e).filter((e=>void 0!==e[1])))}function w(e,t){const s=v(e);if(!s)throw new Error("Invalid Quill container");const n=!t.theme||t.theme===y.DEFAULTS.theme?m.default:y.import(`themes/${t.theme}`);if(!n)throw new Error(`Invalid theme ${t.theme}. Did you register it?`);const{modules:o,...i}=y.DEFAULTS,{modules:l,...a}=n.DEFAULTS;let c=j(t.modules);null!=c&&c.toolbar&&c.toolbar.constructor!==Object&&(c={...c,toolbar:{container:c.toolbar}});const u=(0,r.default)({},j(o),j(l),c),d={...i,..._(a),..._(t)};let h=t.registry;return h?t.formats&&g.warn('Ignoring "formats" option because "registry" is specified'):h=t.formats?(0,p.default)(t.formats,d.registry,g):d.registry,{...d,registry:h,container:s,theme:n,modules:Object.entries(u).reduce(((e,t)=>{let[s,n]=t;if(!n)return e;const o=y.import(`modules/${s}`);return null==o?(g.error(`Cannot load ${s} module. Are you sure you registered it?`),e):{...e,[s]:(0,r.default)({},o.DEFAULTS||{},n)}}),{}),bounds:v(d.bounds)}}function E(e,t,s,r){if(!this.isEnabled()&&t===l.default.sources.USER&&!this.allowReadOnlyEdits)return new o;let n=null==s?null:this.getSelection();const i=this.editor.delta,a=e();if(null!=n&&(!0===s&&(s=n.index),null==r?n=S(n,a,t):0!==r&&(n=S(n,s,r,t)),this.setSelection(n,l.default.sources.SILENT)),a.length()>0){const e=[l.default.events.TEXT_CHANGE,a,i,t];this.emitter.emit(l.default.events.EDITOR_CHANGE,...e),t!==l.default.sources.SILENT&&this.emitter.emit(...e)}return a}function A(e,t,s,r,n){let o={};return"number"==typeof e.index&&"number"==typeof e.length?"number"!=typeof t?(n=r,r=s,s=t,t=e.length,e=e.index):(t=e.length,e=e.index):"number"!=typeof t&&(n=r,r=s,s=t,t=0),"object"==typeof s?(o=s,n=r):"string"==typeof s&&(null!=r?o[s]=r:n=s),[e,t,o,n=n||l.default.sources.API]}function S(e,t,s,r){const n="number"==typeof s?s:0;if(null==e)return null;let o,i;return t&&"function"==typeof t.transformPosition?[o,i]=[e.index,e.index+e.length].map((e=>t.transformPosition(e,r!==l.default.sources.USER))):[o,i]=[e.index,e.index+e.length].map((e=>e<t||e===t&&r===l.default.sources.USER?e:n>=0?e+n:Math.max(t,e+n))),new d.Range(o,i-o)}},"./node_modules/quill/core/selection.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Range:()=>a,default:()=>u});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/lodash-es/isEqual.js"),o=s("./node_modules/lodash-es/cloneDeep.js"),i=s("./node_modules/quill/core/emitter.js");const l=(0,s("./node_modules/quill/core/logger.js").default)("quill:selection");class a{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.index=e,this.length=t}}function c(e,t){try{t.parentNode}catch(s){return!1}return e.contains(t)}const u=class{constructor(e,t){this.emitter=t,this.scroll=e,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=this.scroll.create("cursor",this),this.savedRange=new a(0,0),this.lastRange=this.savedRange,this.lastNative=null,this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,(()=>{this.mouseDown||this.composing||setTimeout(this.update.bind(this,i.default.sources.USER),1)})),this.emitter.on(i.default.events.SCROLL_BEFORE_UPDATE,(()=>{if(!this.hasFocus())return;const e=this.getNativeRange();null!=e&&e.start.node!==this.cursor.textNode&&this.emitter.once(i.default.events.SCROLL_UPDATE,((t,s)=>{try{this.root.contains(e.start.node)&&this.root.contains(e.end.node)&&this.setNativeRange(e.start.node,e.start.offset,e.end.node,e.end.offset);const r=s.some((e=>"characterData"===e.type||"childList"===e.type||"attributes"===e.type&&e.target===this.root));this.update(r?i.default.sources.SILENT:t)}catch(r){}}))})),this.emitter.on(i.default.events.SCROLL_OPTIMIZE,((e,t)=>{if(t.range){const{startNode:e,startOffset:s,endNode:r,endOffset:n}=t.range;this.setNativeRange(e,s,r,n),this.update(i.default.sources.SILENT)}})),this.update(i.default.sources.SILENT)}handleComposition(){this.emitter.on(i.default.events.COMPOSITION_BEFORE_START,(()=>{this.composing=!0})),this.emitter.on(i.default.events.COMPOSITION_END,(()=>{if(this.composing=!1,this.cursor.parent){const e=this.cursor.restore();if(!e)return;setTimeout((()=>{this.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)}),1)}}))}handleDragging(){this.emitter.listenDOM("mousedown",document.body,(()=>{this.mouseDown=!0})),this.emitter.listenDOM("mouseup",document.body,(()=>{this.mouseDown=!1,this.update(i.default.sources.USER)}))}focus(){this.hasFocus()||(this.root.focus({preventScroll:!0}),this.setRange(this.savedRange))}format(e,t){this.scroll.update();const s=this.getNativeRange();if(null!=s&&s.native.collapsed&&!this.scroll.query(e,r.Scope.BLOCK)){if(s.start.node!==this.cursor.textNode){const e=this.scroll.find(s.start.node,!1);if(null==e)return;if(e instanceof r.LeafBlot){const t=e.split(s.start.offset);e.parent.insertBefore(this.cursor,t)}else e.insertBefore(this.cursor,s.start.node);this.cursor.attach()}this.cursor.format(e,t),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}getBounds(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const s=this.scroll.length();let r;e=Math.min(e,s-1),t=Math.min(e+t,s-1)-e;let[n,o]=this.scroll.leaf(e);if(null==n)return null;if(t>0&&o===n.length()){const[t]=this.scroll.leaf(e+1);if(t){const[s]=this.scroll.line(e),[r]=this.scroll.line(e+1);s===r&&(n=t,o=0)}}[r,o]=n.position(o,!0);const i=document.createRange();if(t>0)return i.setStart(r,o),[n,o]=this.scroll.leaf(e+t),null==n?null:([r,o]=n.position(o,!0),i.setEnd(r,o),i.getBoundingClientRect());let l,a="left";if(r instanceof Text){if(!r.data.length)return null;o<r.data.length?(i.setStart(r,o),i.setEnd(r,o+1)):(i.setStart(r,o-1),i.setEnd(r,o),a="right"),l=i.getBoundingClientRect()}else{if(!(n.domNode instanceof Element))return null;l=n.domNode.getBoundingClientRect(),o>0&&(a="right")}return{bottom:l.top+l.height,height:l.height,left:l[a],right:l[a],top:l.top,width:0}}getNativeRange(){const e=document.getSelection();if(null==e||e.rangeCount<=0)return null;const t=e.getRangeAt(0);if(null==t)return null;const s=this.normalizeNative(t);return l.info("getNativeRange",s),s}getRange(){const e=this.scroll.domNode;if("isConnected"in e&&!e.isConnected)return[null,null];const t=this.getNativeRange();if(null==t)return[null,null];return[this.normalizedToRange(t),t]}hasFocus(){return document.activeElement===this.root||null!=document.activeElement&&c(this.root,document.activeElement)}normalizedToRange(e){const t=[[e.start.node,e.start.offset]];e.native.collapsed||t.push([e.end.node,e.end.offset]);const s=t.map((e=>{const[t,s]=e,n=this.scroll.find(t,!0),o=n.offset(this.scroll);return 0===s?o:n instanceof r.LeafBlot?o+n.index(t,s):o+n.length()})),n=Math.min(Math.max(...s),this.scroll.length()-1),o=Math.min(n,...s);return new a(o,n-o)}normalizeNative(e){if(!c(this.root,e.startContainer)||!e.collapsed&&!c(this.root,e.endContainer))return null;const t={start:{node:e.startContainer,offset:e.startOffset},end:{node:e.endContainer,offset:e.endOffset},native:e};return[t.start,t.end].forEach((e=>{let{node:t,offset:s}=e;for(;!(t instanceof Text)&&t.childNodes.length>0;)if(t.childNodes.length>s)t=t.childNodes[s],s=0;else{if(t.childNodes.length!==s)break;t=t.lastChild,s=t instanceof Text?t.data.length:t.childNodes.length>0?t.childNodes.length:t.childNodes.length+1}e.node=t,e.offset=s})),t}rangeToNative(e){const t=this.scroll.length(),s=(e,s)=>{e=Math.min(t-1,e);const[r,n]=this.scroll.leaf(e);return r?r.position(n,s):[null,-1]};return[...s(e.index,!1),...s(e.index+e.length,!0)]}setNativeRange(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t,n=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(l.info("setNativeRange",e,t,s,r),null!=e&&(null==this.root.parentNode||null==e.parentNode||null==s.parentNode))return;const o=document.getSelection();if(null!=o)if(null!=e){this.hasFocus()||this.root.focus({preventScroll:!0});const{native:i}=this.getNativeRange()||{};if(null==i||n||e!==i.startContainer||t!==i.startOffset||s!==i.endContainer||r!==i.endOffset){e instanceof Element&&"BR"===e.tagName&&(t=Array.from(e.parentNode.childNodes).indexOf(e),e=e.parentNode),s instanceof Element&&"BR"===s.tagName&&(r=Array.from(s.parentNode.childNodes).indexOf(s),s=s.parentNode);const n=document.createRange();n.setStart(e,t),n.setEnd(s,r),o.removeAllRanges(),o.addRange(n)}}else o.removeAllRanges(),this.root.blur()}setRange(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.default.sources.API;if("string"==typeof t&&(s=t,t=!1),l.info("setRange",e),null!=e){const s=this.rangeToNative(e);this.setNativeRange(...s,t)}else this.setNativeRange(null);this.update(s)}update(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.default.sources.USER;const t=this.lastRange,[s,r]=this.getRange();if(this.lastRange=s,this.lastNative=r,null!=this.lastRange&&(this.savedRange=this.lastRange),!(0,n.default)(t,this.lastRange)){if(!this.composing&&null!=r&&r.native.collapsed&&r.start.node!==this.cursor.textNode){const e=this.cursor.restore();e&&this.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)}const s=[i.default.events.SELECTION_CHANGE,(0,o.default)(this.lastRange),(0,o.default)(t),e];this.emitter.emit(i.default.events.EDITOR_CHANGE,...s),e!==i.default.sources.SILENT&&this.emitter.emit(...s)}}}},"./node_modules/quill/core/theme.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});class r{static DEFAULTS={modules:{}};static themes={default:r};modules={};constructor(e,t){this.quill=e,this.options=t}init(){Object.keys(this.options.modules).forEach((e=>{null==this.modules[e]&&this.addModule(e)}))}addModule(e){const t=this.quill.constructor.import(`modules/${e}`);return this.modules[e]=new t(this.quill,this.options.modules[e]||{}),this.modules[e]}}const n=r},"./node_modules/quill/core/utils/createRegistryWithFormats.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");const n=["block","break","cursor","inline","scroll","text"],o=(e,t,s)=>{const o=new r.Registry;return n.forEach((e=>{const s=t.query(e);s&&o.register(s)})),e.forEach((e=>{let r=t.query(e);r||s.error(`Cannot register "${e}" specified in "formats" config. Are you sure it was registered?`);let n=0;for(;r;)if(o.register(r),r="blotName"in r?r.requiredContainer??null:null,n+=1,n>100){s.error(`Cycle detected in registering blot requiredContainer: "${e}"`);break}})),o}},"./node_modules/quill/core/utils/scrollRectIntoView.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});const r=e=>{const t=e.getBoundingClientRect(),s="offsetWidth"in e&&Math.abs(t.width)/e.offsetWidth||1,r="offsetHeight"in e&&Math.abs(t.height)/e.offsetHeight||1;return{top:t.top,right:t.left+e.clientWidth*s,bottom:t.top+e.clientHeight*r,left:t.left}},n=e=>{const t=parseInt(e,10);return Number.isNaN(t)?0:t},o=(e,t,s,r,n,o)=>e<s&&t>r?0:e<s?-(s-e+n):t>r?t-e>r-s?e+n-s:t-r+o:0,i=(e,t)=>{const s=e.ownerDocument;let i=t,l=e;for(;l;){const e=l===s.body,t=e?{top:0,right:window.visualViewport?.width??s.documentElement.clientWidth,bottom:window.visualViewport?.height??s.documentElement.clientHeight,left:0}:r(l),c=getComputedStyle(l),u=o(i.left,i.right,t.left,t.right,n(c.scrollPaddingLeft),n(c.scrollPaddingRight)),d=o(i.top,i.bottom,t.top,t.bottom,n(c.scrollPaddingTop),n(c.scrollPaddingBottom));if(u||d)if(e)s.defaultView?.scrollBy(u,d);else{const{scrollLeft:e,scrollTop:t}=l;d&&(l.scrollTop+=d),u&&(l.scrollLeft+=u);const s=l.scrollLeft-e,r=l.scrollTop-t;i={left:i.left-s,top:i.top-r,right:i.right-s,bottom:i.bottom-r}}l=e||"fixed"===c.position?null:(a=l).parentElement||a.getRootNode().host||null}var a}},"./node_modules/quill/formats/align.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{AlignAttribute:()=>o,AlignClass:()=>i,AlignStyle:()=>l});var r=s("./node_modules/parchment/dist/parchment.js");const n={scope:r.Scope.BLOCK,whitelist:["right","center","justify"]},o=new r.Attributor("align","align",n),i=new r.ClassAttributor("align","ql-align",n),l=new r.StyleAttributor("align","text-align",n)},"./node_modules/quill/formats/background.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{BackgroundClass:()=>o,BackgroundStyle:()=>i});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/formats/color.js");const o=new r.ClassAttributor("background","ql-bg",{scope:r.Scope.INLINE}),i=new n.ColorAttributor("background","background-color",{scope:r.Scope.INLINE})},"./node_modules/quill/formats/blockquote.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/block.js");class n extends r.default{static blotName="blockquote";static tagName="blockquote"}const o=n},"./node_modules/quill/formats/bold.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/inline.js");class n extends r.default{static blotName="bold";static tagName=["STRONG","B"];static create(){return super.create()}static formats(){return!0}optimize(e){super.optimize(e),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}const o=n},"./node_modules/quill/formats/code.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Code:()=>h,CodeBlockContainer:()=>u,default:()=>d});var r=s("./node_modules/quill/blots/block.js"),n=s("./node_modules/quill/blots/break.js"),o=s("./node_modules/quill/blots/cursor.js"),i=s("./node_modules/quill/blots/inline.js"),l=s("./node_modules/quill/blots/text.js"),a=s("./node_modules/quill/blots/container.js"),c=s("./node_modules/quill/core/quill.js");class u extends a.default{static create(e){const t=super.create(e);return t.setAttribute("spellcheck","false"),t}code(e,t){return this.children.map((e=>e.length()<=1?"":e.domNode.innerText)).join("\n").slice(e,e+t)}html(e,t){return`<pre>\n${(0,l.escapeText)(this.code(e,t))}\n</pre>`}}class d extends r.default{static TAB="  ";static register(){c.default.register(u)}}class h extends i.default{}h.blotName="code",h.tagName="CODE",d.blotName="code-block",d.className="ql-code-block",d.tagName="DIV",u.blotName="code-block-container",u.className="ql-code-block-container",u.tagName="DIV",u.allowedChildren=[d],d.allowedChildren=[l.default,n.default,o.default],d.requiredContainer=u},"./node_modules/quill/formats/color.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{ColorAttributor:()=>n,ColorClass:()=>o,ColorStyle:()=>i});var r=s("./node_modules/parchment/dist/parchment.js");class n extends r.StyleAttributor{value(e){let t=super.value(e);if(!t.startsWith("rgb("))return t;t=t.replace(/^[^\d]+/,"").replace(/[^\d]+$/,"");return`#${t.split(",").map((e=>`00${parseInt(e,10).toString(16)}`.slice(-2))).join("")}`}}const o=new r.ClassAttributor("color","ql-color",{scope:r.Scope.INLINE}),i=new n("color","color",{scope:r.Scope.INLINE})},"./node_modules/quill/formats/direction.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{DirectionAttribute:()=>o,DirectionClass:()=>i,DirectionStyle:()=>l});var r=s("./node_modules/parchment/dist/parchment.js");const n={scope:r.Scope.BLOCK,whitelist:["rtl"]},o=new r.Attributor("direction","dir",n),i=new r.ClassAttributor("direction","ql-direction",n),l=new r.StyleAttributor("direction","direction",n)},"./node_modules/quill/formats/font.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{FontClass:()=>o,FontStyle:()=>l});var r=s("./node_modules/parchment/dist/parchment.js");const n={scope:r.Scope.INLINE,whitelist:["serif","monospace"]},o=new r.ClassAttributor("font","ql-font",n);class i extends r.StyleAttributor{value(e){return super.value(e).replace(/["']/g,"")}}const l=new i("font","font-family",n)},"./node_modules/quill/formats/formula.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/embed.js");class n extends r.default{static blotName="formula";static className="ql-formula";static tagName="SPAN";static create(e){if(null==window.katex)throw new Error("Formula module requires KaTeX.");const t=super.create(e);return"string"==typeof e&&(window.katex.render(e,t,{throwOnError:!1,errorColor:"#f00"}),t.setAttribute("data-value",e)),t}static value(e){return e.getAttribute("data-value")}html(){const{formula:e}=this.value();return`<span>${e}</span>`}}const o=n},"./node_modules/quill/formats/header.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/block.js");class n extends r.default{static blotName="header";static tagName=["H1","H2","H3","H4","H5","H6"];static formats(e){return this.tagName.indexOf(e.tagName)+1}}const o=n},"./node_modules/quill/formats/image.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/formats/link.js");const o=["alt","height","width"];class i extends r.EmbedBlot{static blotName="image";static tagName="IMG";static create(e){const t=super.create(e);return"string"==typeof e&&t.setAttribute("src",this.sanitize(e)),t}static formats(e){return o.reduce(((t,s)=>(e.hasAttribute(s)&&(t[s]=e.getAttribute(s)),t)),{})}static match(e){return/\.(jpe?g|gif|png)$/.test(e)||/^data:image\/.+;base64/.test(e)}static sanitize(e){return(0,n.sanitize)(e,["http","https","data"])?e:"//:0"}static value(e){return e.getAttribute("src")}format(e,t){o.indexOf(e)>-1?t?this.domNode.setAttribute(e,t):this.domNode.removeAttribute(e):super.format(e,t)}}const l=i},"./node_modules/quill/formats/indent.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");class n extends r.ClassAttributor{add(e,t){let s=0;if("+1"===t||"-1"===t){const r=this.value(e)||0;s="+1"===t?r+1:r-1}else"number"==typeof t&&(s=t);return 0===s?(this.remove(e),!0):super.add(e,s.toString())}canAdd(e,t){return super.canAdd(e,t)||super.canAdd(e,parseInt(t,10))}value(e){return parseInt(super.value(e),10)||void 0}}const o=new n("indent","ql-indent",{scope:r.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]})},"./node_modules/quill/formats/italic.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/formats/bold.js");class n extends r.default{static blotName="italic";static tagName=["EM","I"]}const o=n},"./node_modules/quill/formats/link.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n,sanitize:()=>o});var r=s("./node_modules/quill/blots/inline.js");class n extends r.default{static blotName="link";static tagName="A";static SANITIZED_URL="about:blank";static PROTOCOL_WHITELIST=["http","https","mailto","tel","sms"];static create(e){const t=super.create(e);return t.setAttribute("href",this.sanitize(e)),t.setAttribute("rel","noopener noreferrer"),t.setAttribute("target","_blank"),t}static formats(e){return e.getAttribute("href")}static sanitize(e){return o(e,this.PROTOCOL_WHITELIST)?e:this.SANITIZED_URL}format(e,t){e===this.statics.blotName&&t?this.domNode.setAttribute("href",this.constructor.sanitize(t)):super.format(e,t)}}function o(e,t){const s=document.createElement("a");s.href=e;const r=s.href.slice(0,s.href.indexOf(":"));return t.indexOf(r)>-1}},"./node_modules/quill/formats/list.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{ListContainer:()=>i,default:()=>l});var r=s("./node_modules/quill/blots/block.js"),n=s("./node_modules/quill/blots/container.js"),o=s("./node_modules/quill/core/quill.js");class i extends n.default{}i.blotName="list-container",i.tagName="OL";class l extends r.default{static create(e){const t=super.create();return t.setAttribute("data-list",e),t}static formats(e){return e.getAttribute("data-list")||void 0}static register(){o.default.register(i)}constructor(e,t){super(e,t);const s=t.ownerDocument.createElement("span"),r=s=>{if(!e.isEnabled())return;const r=this.statics.formats(t,e);"checked"===r?(this.format("list","unchecked"),s.preventDefault()):"unchecked"===r&&(this.format("list","checked"),s.preventDefault())};s.addEventListener("mousedown",r),s.addEventListener("touchstart",r),this.attachUI(s)}format(e,t){e===this.statics.blotName&&t?this.domNode.setAttribute("data-list",t):super.format(e,t)}}l.blotName="list",l.tagName="LI",i.allowedChildren=[l],l.requiredContainer=i},"./node_modules/quill/formats/script.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/inline.js");class n extends r.default{static blotName="script";static tagName=["SUB","SUP"];static create(e){return"super"===e?document.createElement("sup"):"sub"===e?document.createElement("sub"):super.create(e)}static formats(e){return"SUB"===e.tagName?"sub":"SUP"===e.tagName?"super":void 0}}const o=n},"./node_modules/quill/formats/size.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{SizeClass:()=>n,SizeStyle:()=>o});var r=s("./node_modules/parchment/dist/parchment.js");const n=new r.ClassAttributor("size","ql-size",{scope:r.Scope.INLINE,whitelist:["small","large","huge"]}),o=new r.StyleAttributor("size","font-size",{scope:r.Scope.INLINE,whitelist:["10px","18px","32px"]})},"./node_modules/quill/formats/strike.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/formats/bold.js");class n extends r.default{static blotName="strike";static tagName=["S","STRIKE"]}const o=n},"./node_modules/quill/formats/table.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{TableBody:()=>l,TableCell:()=>o,TableContainer:()=>a,TableRow:()=>i,tableId:()=>c});var r=s("./node_modules/quill/blots/block.js"),n=s("./node_modules/quill/blots/container.js");class o extends r.default{static blotName="table";static tagName="TD";static create(e){const t=super.create();return e?t.setAttribute("data-row",e):t.setAttribute("data-row",c()),t}static formats(e){if(e.hasAttribute("data-row"))return e.getAttribute("data-row")}cellOffset(){return this.parent?this.parent.children.indexOf(this):-1}format(e,t){e===o.blotName&&t?this.domNode.setAttribute("data-row",t):super.format(e,t)}row(){return this.parent}rowOffset(){return this.row()?this.row().rowOffset():-1}table(){return this.row()&&this.row().table()}}class i extends n.default{static blotName="table-row";static tagName="TR";checkMerge(){if(super.checkMerge()&&null!=this.next.children.head){const e=this.children.head.formats(),t=this.children.tail.formats(),s=this.next.children.head.formats(),r=this.next.children.tail.formats();return e.table===t.table&&e.table===s.table&&e.table===r.table}return!1}optimize(e){super.optimize(e),this.children.forEach((e=>{if(null==e.next)return;const t=e.formats(),s=e.next.formats();if(t.table!==s.table){const t=this.splitAfter(e);t&&t.optimize(),this.prev&&this.prev.optimize()}}))}rowOffset(){return this.parent?this.parent.children.indexOf(this):-1}table(){return this.parent&&this.parent.parent}}class l extends n.default{static blotName="table-body";static tagName="TBODY"}class a extends n.default{static blotName="table-container";static tagName="TABLE";balanceCells(){const e=this.descendants(i),t=e.reduce(((e,t)=>Math.max(t.children.length,e)),0);e.forEach((e=>{new Array(t-e.children.length).fill(0).forEach((()=>{let t;null!=e.children.head&&(t=o.formats(e.children.head.domNode));const s=this.scroll.create(o.blotName,t);e.appendChild(s),s.optimize()}))}))}cells(e){return this.rows().map((t=>t.children.at(e)))}deleteColumn(e){const[t]=this.descendant(l);null!=t&&null!=t.children.head&&t.children.forEach((t=>{const s=t.children.at(e);null!=s&&s.remove()}))}insertColumn(e){const[t]=this.descendant(l);null!=t&&null!=t.children.head&&t.children.forEach((t=>{const s=t.children.at(e),r=o.formats(t.children.head.domNode),n=this.scroll.create(o.blotName,r);t.insertBefore(n,s)}))}insertRow(e){const[t]=this.descendant(l);if(null==t||null==t.children.head)return;const s=c(),r=this.scroll.create(i.blotName);t.children.head.children.forEach((()=>{const e=this.scroll.create(o.blotName,s);r.appendChild(e)}));const n=t.children.at(e);t.insertBefore(r,n)}rows(){const e=this.children.head;return null==e?[]:e.children.map((e=>e))}}function c(){return`row-${Math.random().toString(36).slice(2,6)}`}a.allowedChildren=[l],l.requiredContainer=a,l.allowedChildren=[i],i.requiredContainer=l,i.allowedChildren=[o],o.requiredContainer=i},"./node_modules/quill/formats/underline.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/blots/inline.js");class n extends r.default{static blotName="underline";static tagName="U"}const o=n},"./node_modules/quill/formats/video.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/quill/blots/block.js"),n=s("./node_modules/quill/formats/link.js");const o=["height","width"];class i extends r.BlockEmbed{static blotName="video";static className="ql-video";static tagName="IFRAME";static create(e){const t=super.create(e);return t.setAttribute("frameborder","0"),t.setAttribute("allowfullscreen","true"),t.setAttribute("src",this.sanitize(e)),t}static formats(e){return o.reduce(((t,s)=>(e.hasAttribute(s)&&(t[s]=e.getAttribute(s)),t)),{})}static sanitize(e){return n.default.sanitize(e)}static value(e){return e.getAttribute("src")}format(e,t){o.indexOf(e)>-1?t?this.domNode.setAttribute(e,t):this.domNode.removeAttribute(e):super.format(e,t)}html(){const{video:e}=this.value();return`<a href="${e}">${e}</a>`}}const l=i},"./node_modules/quill/modules/clipboard.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>w,matchAttributor:()=>q,matchBlot:()=>T,matchNewline:()=>L,matchText:()=>C,traverse:()=>O});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill-delta/dist/Delta.js"),o=s("./node_modules/quill/blots/block.js"),i=s("./node_modules/quill/core/logger.js"),l=s("./node_modules/quill/core/module.js"),a=s("./node_modules/quill/core/quill.js"),c=s("./node_modules/quill/formats/align.js"),u=s("./node_modules/quill/formats/background.js"),d=s("./node_modules/quill/formats/code.js"),h=s("./node_modules/quill/formats/color.js"),m=s("./node_modules/quill/formats/direction.js"),f=s("./node_modules/quill/formats/font.js"),p=s("./node_modules/quill/formats/size.js"),g=s("./node_modules/quill/modules/keyboard.js"),b=s("./node_modules/quill/modules/normalizeExternalHTML/index.js");const y=(0,i.default)("quill:clipboard"),v=[[Node.TEXT_NODE,C],[Node.TEXT_NODE,L],["br",function(e,t){A(t,"\n")||t.insert("\n");return t}],[Node.ELEMENT_NODE,L],[Node.ELEMENT_NODE,T],[Node.ELEMENT_NODE,q],[Node.ELEMENT_NODE,function(e,t,s){const r={},o=e.style||{};"italic"===o.fontStyle&&(r.italic=!0);"underline"===o.textDecoration&&(r.underline=!0);"line-through"===o.textDecoration&&(r.strike=!0);(o.fontWeight?.startsWith("bold")||parseInt(o.fontWeight,10)>=700)&&(r.bold=!0);if(t=Object.entries(r).reduce(((e,t)=>{let[r,n]=t;return E(e,r,n,s)}),t),parseFloat(o.textIndent||0)>0)return(new n).insert("\t").concat(t);return t}],["li",function(e,t,s){const r=s.query(e);if(null==r||"list"!==r.blotName||!A(t,"\n"))return t;let o=-1,i=e.parentNode;for(;null!=i;)["OL","UL"].includes(i.tagName)&&(o+=1),i=i.parentNode;return o<=0?t:t.reduce(((e,t)=>t.insert?t.attributes&&"number"==typeof t.attributes.indent?e.push(t):e.insert(t.insert,{indent:o,...t.attributes||{}}):e),new n)}],["ol, ul",function(e,t,s){const r=e;let n="OL"===r.tagName?"ordered":"bullet";const o=r.getAttribute("data-checked");o&&(n="true"===o?"checked":"unchecked");return E(t,"list",n,s)}],["pre",function(e,t,s){const r=s.query("code-block"),n=!r||!("formats"in r)||"function"!=typeof r.formats||r.formats(e,s);return E(t,"code-block",n,s)}],["tr",function(e,t,s){const r="TABLE"===e.parentElement?.tagName?e.parentElement:e.parentElement?.parentElement;if(null!=r){return E(t,"table",Array.from(r.querySelectorAll("tr")).indexOf(e)+1,s)}return t}],["b",N("bold")],["i",N("italic")],["strike",N("strike")],["style",function(){return new n}]],j=[c.AlignAttribute,m.DirectionAttribute].reduce(((e,t)=>(e[t.keyName]=t,e)),{}),_=[c.AlignStyle,u.BackgroundStyle,h.ColorStyle,m.DirectionStyle,f.FontStyle,p.SizeStyle].reduce(((e,t)=>(e[t.keyName]=t,e)),{});class w extends l.default{static DEFAULTS={matchers:[]};constructor(e,t){super(e,t),this.quill.root.addEventListener("copy",(e=>this.onCaptureCopy(e,!1))),this.quill.root.addEventListener("cut",(e=>this.onCaptureCopy(e,!0))),this.quill.root.addEventListener("paste",this.onCapturePaste.bind(this)),this.matchers=[],v.concat(this.options.matchers??[]).forEach((e=>{let[t,s]=e;this.addMatcher(t,s)}))}addMatcher(e,t){this.matchers.push([e,t])}convert(e){let{html:t,text:s}=e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r[d.default.blotName])return(new n).insert(s||"",{[d.default.blotName]:r[d.default.blotName]});if(!t)return(new n).insert(s||"",r);const o=this.convertHTML(t);return A(o,"\n")&&(null==o.ops[o.ops.length-1].attributes||r.table)?o.compose((new n).retain(o.length()-1).delete(1)):o}normalizeHTML(e){(0,b.default)(e)}convertHTML(e){const t=(new DOMParser).parseFromString(e,"text/html");this.normalizeHTML(t);const s=t.body,r=new WeakMap,[n,o]=this.prepareMatching(s,r);return O(this.quill.scroll,s,n,o,r)}dangerouslyPasteHTML(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default.sources.API;if("string"==typeof e){const s=this.convert({html:e,text:""});this.quill.setContents(s,t),this.quill.setSelection(0,a.default.sources.SILENT)}else{const r=this.convert({html:t,text:""});this.quill.updateContents((new n).retain(e).concat(r),s),this.quill.setSelection(e+r.length(),a.default.sources.SILENT)}}onCaptureCopy(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e.defaultPrevented)return;e.preventDefault();const[s]=this.quill.selection.getRange();if(null==s)return;const{html:r,text:n}=this.onCopy(s,t);e.clipboardData?.setData("text/plain",n),e.clipboardData?.setData("text/html",r),t&&(0,g.deleteRange)({range:s,quill:this.quill})}normalizeURIList(e){return e.split(/\r?\n/).filter((e=>"#"!==e[0])).join("\n")}onCapturePaste(e){if(e.defaultPrevented||!this.quill.isEnabled())return;e.preventDefault();const t=this.quill.getSelection(!0);if(null==t)return;const s=e.clipboardData?.getData("text/html");let r=e.clipboardData?.getData("text/plain");if(!s&&!r){const t=e.clipboardData?.getData("text/uri-list");t&&(r=this.normalizeURIList(t))}const n=Array.from(e.clipboardData?.files||[]);if(!s&&n.length>0)this.quill.uploader.upload(t,n);else{if(s&&n.length>0){const e=(new DOMParser).parseFromString(s,"text/html");if(1===e.body.childElementCount&&"IMG"===e.body.firstElementChild?.tagName)return void this.quill.uploader.upload(t,n)}this.onPaste(t,{html:s,text:r})}}onCopy(e){const t=this.quill.getText(e);return{html:this.quill.getSemanticHTML(e),text:t}}onPaste(e,t){let{text:s,html:r}=t;const o=this.quill.getFormat(e.index),i=this.convert({text:s,html:r},o);y.log("onPaste",i,{text:s,html:r});const l=(new n).retain(e.index).delete(e.length).concat(i);this.quill.updateContents(l,a.default.sources.USER),this.quill.setSelection(l.length()-e.length,a.default.sources.SILENT),this.quill.scrollSelectionIntoView()}prepareMatching(e,t){const s=[],r=[];return this.matchers.forEach((n=>{const[o,i]=n;switch(o){case Node.TEXT_NODE:r.push(i);break;case Node.ELEMENT_NODE:s.push(i);break;default:Array.from(e.querySelectorAll(o)).forEach((e=>{if(t.has(e)){const s=t.get(e);s?.push(i)}else t.set(e,[i])}))}})),[s,r]}}function E(e,t,s,r){return r.query(t)?e.reduce(((e,r)=>{if(!r.insert)return e;if(r.attributes&&r.attributes[t])return e.push(r);const n=s?{[t]:s}:{};return e.insert(r.insert,{...n,...r.attributes})}),new n):e}function A(e,t){let s="";for(let r=e.ops.length-1;r>=0&&s.length<t.length;--r){const t=e.ops[r];if("string"!=typeof t.insert)break;s=t.insert+s}return s.slice(-1*t.length)===t}function S(e,t){if(!(e instanceof Element))return!1;const s=t.query(e);return!(s&&s.prototype instanceof r.EmbedBlot)&&["address","article","blockquote","canvas","dd","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","iframe","li","main","nav","ol","output","p","pre","section","table","td","tr","ul","video"].includes(e.tagName.toLowerCase())}const k=new WeakMap;function x(e){return null!=e&&(k.has(e)||("PRE"===e.tagName?k.set(e,!0):k.set(e,x(e.parentNode))),k.get(e))}function O(e,t,s,r,o){return t.nodeType===t.TEXT_NODE?r.reduce(((s,r)=>r(t,s,e)),new n):t.nodeType===t.ELEMENT_NODE?Array.from(t.childNodes||[]).reduce(((n,i)=>{let l=O(e,i,s,r,o);return i.nodeType===t.ELEMENT_NODE&&(l=s.reduce(((t,s)=>s(i,t,e)),l),l=(o.get(i)||[]).reduce(((t,s)=>s(i,t,e)),l)),n.concat(l)}),new n):new n}function N(e){return(t,s,r)=>E(s,e,!0,r)}function q(e,t,s){const n=r.Attributor.keys(e),o=r.ClassAttributor.keys(e),i=r.StyleAttributor.keys(e),l={};return n.concat(o).concat(i).forEach((t=>{let n=s.query(t,r.Scope.ATTRIBUTE);null!=n&&(l[n.attrName]=n.value(e),l[n.attrName])||(n=j[t],null==n||n.attrName!==t&&n.keyName!==t||(l[n.attrName]=n.value(e)||void 0),n=_[t],null==n||n.attrName!==t&&n.keyName!==t||(n=_[t],l[n.attrName]=n.value(e)||void 0))})),Object.entries(l).reduce(((e,t)=>{let[r,n]=t;return E(e,r,n,s)}),t)}function T(e,t,s){const o=s.query(e);if(null==o)return t;if(o.prototype instanceof r.EmbedBlot){const t={},r=o.value(e);if(null!=r)return t[o.blotName]=r,(new n).insert(t,o.formats(e,s))}else if(o.prototype instanceof r.BlockBlot&&!A(t,"\n")&&t.insert("\n"),"blotName"in o&&"formats"in o&&"function"==typeof o.formats)return E(t,o.blotName,o.formats(e,s),s);return t}function L(e,t,s){if(!A(t,"\n")){if(S(e,s)&&(e.childNodes.length>0||e instanceof HTMLParagraphElement))return t.insert("\n");if(t.length()>0&&e.nextSibling){let r=e.nextSibling;for(;null!=r;){if(S(r,s))return t.insert("\n");const e=s.query(r);if(e&&e.prototype instanceof o.BlockEmbed)return t.insert("\n");r=r.firstChild}}}return t}function C(e,t,s){let r=e.data;if("O:P"===e.parentElement?.tagName)return t.insert(r.trim());if(!x(e)){if(0===r.trim().length&&r.includes("\n")&&!function(e,t){return e.previousElementSibling&&e.nextElementSibling&&!S(e.previousElementSibling,t)&&!S(e.nextElementSibling,t)}(e,s))return t;const n=(e,t)=>{const s=t.replace(/[^\u00a0]/g,"");return s.length<1&&e?" ":s};r=r.replace(/\r\n/g," ").replace(/\n/g," "),r=r.replace(/\s\s+/g,n.bind(n,!0)),(null==e.previousSibling&&null!=e.parentElement&&S(e.parentElement,s)||e.previousSibling instanceof Element&&S(e.previousSibling,s))&&(r=r.replace(/^\s+/,n.bind(n,!1))),(null==e.nextSibling&&null!=e.parentElement&&S(e.parentElement,s)||e.nextSibling instanceof Element&&S(e.nextSibling,s))&&(r=r.replace(/\s+$/,n.bind(n,!1)))}return t.insert(r)}},"./node_modules/quill/modules/history.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i,getLastChangeIndex:()=>a});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/core/module.js"),o=s("./node_modules/quill/core/quill.js");class i extends n.default{static DEFAULTS={delay:1e3,maxStack:100,userOnly:!1};lastRecorded=0;ignoreChange=!1;stack={undo:[],redo:[]};currentRange=null;constructor(e,t){super(e,t),this.quill.on(o.default.events.EDITOR_CHANGE,((e,t,s,r)=>{e===o.default.events.SELECTION_CHANGE?t&&r!==o.default.sources.SILENT&&(this.currentRange=t):e===o.default.events.TEXT_CHANGE&&(this.ignoreChange||(this.options.userOnly&&r!==o.default.sources.USER?this.transform(t):this.record(t,s)),this.currentRange=c(this.currentRange,t))})),this.quill.keyboard.addBinding({key:"z",shortKey:!0},this.undo.bind(this)),this.quill.keyboard.addBinding({key:["z","Z"],shortKey:!0,shiftKey:!0},this.redo.bind(this)),/Win/i.test(navigator.platform)&&this.quill.keyboard.addBinding({key:"y",shortKey:!0},this.redo.bind(this)),this.quill.root.addEventListener("beforeinput",(e=>{"historyUndo"===e.inputType?(this.undo(),e.preventDefault()):"historyRedo"===e.inputType&&(this.redo(),e.preventDefault())}))}change(e,t){if(0===this.stack[e].length)return;const s=this.stack[e].pop();if(!s)return;const r=this.quill.getContents(),n=s.delta.invert(r);this.stack[t].push({delta:n,range:c(s.range,n)}),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(s.delta,o.default.sources.USER),this.ignoreChange=!1,this.restoreSelection(s)}clear(){this.stack={undo:[],redo:[]}}cutoff(){this.lastRecorded=0}record(e,t){if(0===e.ops.length)return;this.stack.redo=[];let s=e.invert(t),r=this.currentRange;const n=Date.now();if(this.lastRecorded+this.options.delay>n&&this.stack.undo.length>0){const e=this.stack.undo.pop();e&&(s=s.compose(e.delta),r=e.range)}else this.lastRecorded=n;0!==s.length()&&(this.stack.undo.push({delta:s,range:r}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift())}redo(){this.change("redo","undo")}transform(e){l(this.stack.undo,e),l(this.stack.redo,e)}undo(){this.change("undo","redo")}restoreSelection(e){if(e.range)this.quill.setSelection(e.range,o.default.sources.USER);else{const t=a(this.quill.scroll,e.delta);this.quill.setSelection(t,o.default.sources.USER)}}}function l(e,t){let s=t;for(let r=e.length-1;r>=0;r-=1){const t=e[r];e[r]={delta:s.transform(t.delta,!0),range:t.range&&c(t.range,s)},s=t.delta.transform(s),0===e[r].delta.length()&&e.splice(r,1)}}function a(e,t){const s=t.reduce(((e,t)=>e+(t.delete||0)),0);let n=t.length()-s;return function(e,t){const s=t.ops[t.ops.length-1];return null!=s&&(null!=s.insert?"string"==typeof s.insert&&s.insert.endsWith("\n"):null!=s.attributes&&Object.keys(s.attributes).some((t=>null!=e.query(t,r.Scope.BLOCK))))}(e,t)&&(n-=1),n}function c(e,t){if(!e)return e;const s=t.transformPosition(e.index);return{index:s,length:t.transformPosition(e.index+e.length)-s}}},"./node_modules/quill/modules/input.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>c});var r=s("./node_modules/quill-delta/dist/Delta.js"),n=s("./node_modules/quill/core/module.js"),o=s("./node_modules/quill/core/quill.js"),i=s("./node_modules/quill/modules/keyboard.js");const l=["insertText","insertReplacementText"];class a extends n.default{constructor(e,t){super(e,t),e.root.addEventListener("beforeinput",(e=>{this.handleBeforeInput(e)})),/Android/i.test(navigator.userAgent)||e.on(o.default.events.COMPOSITION_BEFORE_START,(()=>{this.handleCompositionStart()}))}deleteRange(e){(0,i.deleteRange)({range:e,quill:this.quill})}replaceText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(0===e.length)return!1;if(t){const s=this.quill.getFormat(e.index,1);this.deleteRange(e),this.quill.updateContents((new r).retain(e.index).insert(t,s),o.default.sources.USER)}else this.deleteRange(e);return this.quill.setSelection(e.index+t.length,0,o.default.sources.SILENT),!0}handleBeforeInput(e){if(this.quill.composition.isComposing||e.defaultPrevented||!l.includes(e.inputType))return;const t=e.getTargetRanges?e.getTargetRanges()[0]:null;if(!t||!0===t.collapsed)return;const s=function(e){if("string"==typeof e.data)return e.data;if(e.dataTransfer?.types.includes("text/plain"))return e.dataTransfer.getData("text/plain");return null}(e);if(null==s)return;const r=this.quill.selection.normalizeNative(t),n=r?this.quill.selection.normalizedToRange(r):null;n&&this.replaceText(n,s)&&e.preventDefault()}handleCompositionStart(){const e=this.quill.getSelection();e&&this.replaceText(e)}}const c=a},"./node_modules/quill/modules/keyboard.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{SHORTKEY:()=>d,default:()=>h,deleteRange:()=>v,normalize:()=>y});var r=s("./node_modules/lodash-es/isEqual.js"),n=s("./node_modules/lodash-es/cloneDeep.js"),o=s("./node_modules/quill-delta/dist/Delta.js"),i=s("./node_modules/parchment/dist/parchment.js"),l=s("./node_modules/quill/core/quill.js"),a=s("./node_modules/quill/core/logger.js"),c=s("./node_modules/quill/core/module.js");const u=(0,a.default)("quill:keyboard"),d=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey";class h extends c.default{static match(e,t){return!["altKey","ctrlKey","metaKey","shiftKey"].some((s=>!!t[s]!==e[s]&&null!==t[s]))&&(t.key===e.key||t.key===e.which)}constructor(e,t){super(e,t),this.bindings={},Object.keys(this.options.bindings).forEach((e=>{this.options.bindings[e]&&this.addBinding(this.options.bindings[e])})),this.addBinding({key:"Enter",shiftKey:null},this.handleEnter),this.addBinding({key:"Enter",metaKey:null,ctrlKey:null,altKey:null},(()=>{})),/Firefox/i.test(navigator.userAgent)?(this.addBinding({key:"Backspace"},{collapsed:!0},this.handleBackspace),this.addBinding({key:"Delete"},{collapsed:!0},this.handleDelete)):(this.addBinding({key:"Backspace"},{collapsed:!0,prefix:/^.?$/},this.handleBackspace),this.addBinding({key:"Delete"},{collapsed:!0,suffix:/^.?$/},this.handleDelete)),this.addBinding({key:"Backspace"},{collapsed:!1},this.handleDeleteRange),this.addBinding({key:"Delete"},{collapsed:!1},this.handleDeleteRange),this.addBinding({key:"Backspace",altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},this.handleBackspace),this.listen()}addBinding(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=y(e);if(null==r)return void u.warn("Attempted to add invalid keyboard binding",r);"function"==typeof t&&(t={handler:t}),"function"==typeof s&&(s={handler:s});(Array.isArray(r.key)?r.key:[r.key]).forEach((e=>{const n={...r,key:e,...t,...s};this.bindings[n.key]=this.bindings[n.key]||[],this.bindings[n.key].push(n)}))}listen(){this.quill.root.addEventListener("keydown",(e=>{if(e.defaultPrevented||e.isComposing)return;if(229===e.keyCode&&("Enter"===e.key||"Backspace"===e.key))return;const t=(this.bindings[e.key]||[]).concat(this.bindings[e.which]||[]).filter((t=>h.match(e,t)));if(0===t.length)return;const s=l.default.find(e.target,!0);if(s&&s.scroll!==this.quill.scroll)return;const n=this.quill.getSelection();if(null==n||!this.quill.hasFocus())return;const[o,a]=this.quill.getLine(n.index),[c,u]=this.quill.getLeaf(n.index),[d,m]=0===n.length?[c,u]:this.quill.getLeaf(n.index+n.length),f=c instanceof i.TextBlot?c.value().slice(0,u):"",p=d instanceof i.TextBlot?d.value().slice(m):"",g={collapsed:0===n.length,empty:0===n.length&&o.length()<=1,format:this.quill.getFormat(n),line:o,offset:a,prefix:f,suffix:p,event:e};t.some((e=>{if(null!=e.collapsed&&e.collapsed!==g.collapsed)return!1;if(null!=e.empty&&e.empty!==g.empty)return!1;if(null!=e.offset&&e.offset!==g.offset)return!1;if(Array.isArray(e.format)){if(e.format.every((e=>null==g.format[e])))return!1}else if("object"==typeof e.format&&!Object.keys(e.format).every((t=>!0===e.format[t]?null!=g.format[t]:!1===e.format[t]?null==g.format[t]:(0,r.default)(e.format[t],g.format[t]))))return!1;return!(null!=e.prefix&&!e.prefix.test(g.prefix))&&(!(null!=e.suffix&&!e.suffix.test(g.suffix))&&!0!==e.handler.call(this,n,g,e))}))&&e.preventDefault()}))}handleBackspace(e,t){const s=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(t.prefix)?2:1;if(0===e.index||this.quill.getLength()<=1)return;let r={};const[n]=this.quill.getLine(e.index);let i=(new o).retain(e.index-s).delete(s);if(0===t.offset){const[t]=this.quill.getLine(e.index-1);if(t){if(!("block"===t.statics.blotName&&t.length()<=1)){const t=n.formats(),s=this.quill.getFormat(e.index-1,1);if(r=o.AttributeMap.diff(t,s)||{},Object.keys(r).length>0){const t=(new o).retain(e.index+n.length()-2).retain(1,r);i=i.compose(t)}}}}this.quill.updateContents(i,l.default.sources.USER),this.quill.focus()}handleDelete(e,t){const s=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(t.suffix)?2:1;if(e.index>=this.quill.getLength()-s)return;let r={};const[n]=this.quill.getLine(e.index);let i=(new o).retain(e.index).delete(s);if(t.offset>=n.length()-1){const[t]=this.quill.getLine(e.index+1);if(t){const s=n.formats(),l=this.quill.getFormat(e.index,1);r=o.AttributeMap.diff(s,l)||{},Object.keys(r).length>0&&(i=i.retain(t.length()-1).retain(1,r))}}this.quill.updateContents(i,l.default.sources.USER),this.quill.focus()}handleDeleteRange(e){v({range:e,quill:this.quill}),this.quill.focus()}handleEnter(e,t){const s=Object.keys(t.format).reduce(((e,s)=>(this.quill.scroll.query(s,i.Scope.BLOCK)&&!Array.isArray(t.format[s])&&(e[s]=t.format[s]),e)),{}),r=(new o).retain(e.index).delete(e.length).insert("\n",s);this.quill.updateContents(r,l.default.sources.USER),this.quill.setSelection(e.index+1,l.default.sources.SILENT),this.quill.focus()}}const m={bindings:{bold:g("bold"),italic:g("italic"),underline:g("underline"),indent:{key:"Tab",format:["blockquote","indent","list"],handler(e,t){return!(!t.collapsed||0===t.offset)||(this.quill.format("indent","+1",l.default.sources.USER),!1)}},outdent:{key:"Tab",shiftKey:!0,format:["blockquote","indent","list"],handler(e,t){return!(!t.collapsed||0===t.offset)||(this.quill.format("indent","-1",l.default.sources.USER),!1)}},"outdent backspace":{key:"Backspace",collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler(e,t){null!=t.format.indent?this.quill.format("indent","-1",l.default.sources.USER):null!=t.format.list&&this.quill.format("list",!1,l.default.sources.USER)}},"indent code-block":f(!0),"outdent code-block":f(!1),"remove tab":{key:"Tab",shiftKey:!0,collapsed:!0,prefix:/\t$/,handler(e){this.quill.deleteText(e.index-1,1,l.default.sources.USER)}},tab:{key:"Tab",handler(e,t){if(t.format.table)return!0;this.quill.history.cutoff();const s=(new o).retain(e.index).delete(e.length).insert("\t");return this.quill.updateContents(s,l.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(e.index+1,l.default.sources.SILENT),!1}},"blockquote empty enter":{key:"Enter",collapsed:!0,format:["blockquote"],empty:!0,handler(){this.quill.format("blockquote",!1,l.default.sources.USER)}},"list empty enter":{key:"Enter",collapsed:!0,format:["list"],empty:!0,handler(e,t){const s={list:!1};t.format.indent&&(s.indent=!1),this.quill.formatLine(e.index,e.length,s,l.default.sources.USER)}},"checklist enter":{key:"Enter",collapsed:!0,format:{list:"checked"},handler(e){const[t,s]=this.quill.getLine(e.index),r={...t.formats(),list:"checked"},n=(new o).retain(e.index).insert("\n",r).retain(t.length()-s-1).retain(1,{list:"unchecked"});this.quill.updateContents(n,l.default.sources.USER),this.quill.setSelection(e.index+1,l.default.sources.SILENT),this.quill.scrollSelectionIntoView()}},"header enter":{key:"Enter",collapsed:!0,format:["header"],suffix:/^$/,handler(e,t){const[s,r]=this.quill.getLine(e.index),n=(new o).retain(e.index).insert("\n",t.format).retain(s.length()-r-1).retain(1,{header:null});this.quill.updateContents(n,l.default.sources.USER),this.quill.setSelection(e.index+1,l.default.sources.SILENT),this.quill.scrollSelectionIntoView()}},"table backspace":{key:"Backspace",format:["table"],collapsed:!0,offset:0,handler(){}},"table delete":{key:"Delete",format:["table"],collapsed:!0,suffix:/^$/,handler(){}},"table enter":{key:"Enter",shiftKey:null,format:["table"],handler(e){const t=this.quill.getModule("table");if(t){const[s,r,n,i]=t.getTable(e),a=function(e,t,s,r){if(null==t.prev&&null==t.next)return null==s.prev&&null==s.next?0===r?-1:1:null==s.prev?-1:1;if(null==t.prev)return-1;if(null==t.next)return 1;return null}(0,r,n,i);if(null==a)return;let c=s.offset();if(a<0){const t=(new o).retain(c).insert("\n");this.quill.updateContents(t,l.default.sources.USER),this.quill.setSelection(e.index+1,e.length,l.default.sources.SILENT)}else if(a>0){c+=s.length();const e=(new o).retain(c).insert("\n");this.quill.updateContents(e,l.default.sources.USER),this.quill.setSelection(c,l.default.sources.USER)}}}},"table tab":{key:"Tab",shiftKey:null,format:["table"],handler(e,t){const{event:s,line:r}=t,n=r.offset(this.quill.scroll);s.shiftKey?this.quill.setSelection(n-1,l.default.sources.USER):this.quill.setSelection(n+r.length(),l.default.sources.USER)}},"list autofill":{key:" ",shiftKey:null,collapsed:!0,format:{"code-block":!1,blockquote:!1,table:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler(e,t){if(null==this.quill.scroll.query("list"))return!0;const{length:s}=t.prefix,[r,n]=this.quill.getLine(e.index);if(n>s)return!0;let i;switch(t.prefix.trim()){case"[]":case"[ ]":i="unchecked";break;case"[x]":i="checked";break;case"-":case"*":i="bullet";break;default:i="ordered"}this.quill.insertText(e.index," ",l.default.sources.USER),this.quill.history.cutoff();const a=(new o).retain(e.index-n).delete(s+1).retain(r.length()-2-n).retain(1,{list:i});return this.quill.updateContents(a,l.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(e.index-s,l.default.sources.SILENT),!1}},"code exit":{key:"Enter",collapsed:!0,format:["code-block"],prefix:/^$/,suffix:/^\s*$/,handler(e){const[t,s]=this.quill.getLine(e.index);let r=2,n=t;for(;null!=n&&n.length()<=1&&n.formats()["code-block"];)if(n=n.prev,r-=1,r<=0){const r=(new o).retain(e.index+t.length()-s-2).retain(1,{"code-block":null}).delete(1);return this.quill.updateContents(r,l.default.sources.USER),this.quill.setSelection(e.index-1,l.default.sources.SILENT),!1}return!0}},"embed left":p("ArrowLeft",!1),"embed left shift":p("ArrowLeft",!0),"embed right":p("ArrowRight",!1),"embed right shift":p("ArrowRight",!0),"table down":b(!1),"table up":b(!0)}};function f(e){return{key:"Tab",shiftKey:!e,format:{"code-block":!0},handler(t,s){let{event:r}=s;const n=this.quill.scroll.query("code-block"),{TAB:o}=n;if(0===t.length&&!r.shiftKey)return this.quill.insertText(t.index,o,l.default.sources.USER),void this.quill.setSelection(t.index+o.length,l.default.sources.SILENT);const i=0===t.length?this.quill.getLines(t.index,1):this.quill.getLines(t);let{index:a,length:c}=t;i.forEach(((t,s)=>{e?(t.insertAt(0,o),0===s?a+=o.length:c+=o.length):t.domNode.textContent.startsWith(o)&&(t.deleteAt(0,o.length),0===s?a-=o.length:c-=o.length)})),this.quill.update(l.default.sources.USER),this.quill.setSelection(a,c,l.default.sources.SILENT)}}}function p(e,t){const s="ArrowLeft"===e?"prefix":"suffix";return{key:e,shiftKey:t,altKey:null,[s]:/^$/,handler(s){let{index:r}=s;"ArrowRight"===e&&(r+=s.length+1);const[n]=this.quill.getLeaf(r);return!(n instanceof i.EmbedBlot)||("ArrowLeft"===e?t?this.quill.setSelection(s.index-1,s.length+1,l.default.sources.USER):this.quill.setSelection(s.index-1,l.default.sources.USER):t?this.quill.setSelection(s.index,s.length+1,l.default.sources.USER):this.quill.setSelection(s.index+s.length+1,l.default.sources.USER),!1)}}}function g(e){return{key:e[0],shortKey:!0,handler(t,s){this.quill.format(e,!s.format[e],l.default.sources.USER)}}}function b(e){return{key:e?"ArrowUp":"ArrowDown",collapsed:!0,format:["table"],handler(t,s){const r=e?"prev":"next",n=s.line,o=n.parent[r];if(null!=o){if("table-row"===o.statics.blotName){let e=o.children.head,t=n;for(;null!=t.prev;)t=t.prev,e=e.next;const r=e.offset(this.quill.scroll)+Math.min(s.offset,e.length()-1);this.quill.setSelection(r,0,l.default.sources.USER)}}else{const t=n.table()[r];null!=t&&(e?this.quill.setSelection(t.offset(this.quill.scroll)+t.length()-1,0,l.default.sources.USER):this.quill.setSelection(t.offset(this.quill.scroll),0,l.default.sources.USER))}return!1}}}function y(e){if("string"==typeof e||"number"==typeof e)e={key:e};else{if("object"!=typeof e)return null;e=(0,n.default)(e)}return e.shortKey&&(e[d]=e.shortKey,delete e.shortKey),e}function v(e){let{quill:t,range:s}=e;const r=t.getLines(s);let n={};if(r.length>1){const e=r[0].formats(),t=r[r.length-1].formats();n=o.AttributeMap.diff(t,e)||{}}t.deleteText(s,l.default.sources.USER),Object.keys(n).length>0&&t.formatLine(s.index,1,n,l.default.sources.USER),t.setSelection(s.index,l.default.sources.SILENT)}h.DEFAULTS=m},"./node_modules/quill/modules/normalizeExternalHTML/index.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/modules/normalizeExternalHTML/normalizers/googleDocs.js");const n=[s("./node_modules/quill/modules/normalizeExternalHTML/normalizers/msWord.js").default,r.default],o=e=>{e.documentElement&&n.forEach((t=>{t(e)}))}},"./node_modules/quill/modules/normalizeExternalHTML/normalizers/googleDocs.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});const r=/font-weight:\s*normal/,n=["P","OL","UL"],o=e=>e&&n.includes(e.tagName),i=e=>{Array.from(e.querySelectorAll("br")).filter((e=>o(e.previousElementSibling)&&o(e.nextElementSibling))).forEach((e=>{e.parentNode?.removeChild(e)}))},l=e=>{Array.from(e.querySelectorAll('b[style*="font-weight"]')).filter((e=>e.getAttribute("style")?.match(r))).forEach((t=>{const s=e.createDocumentFragment();s.append(...t.childNodes),t.parentNode?.replaceChild(s,t)}))};function a(e){e.querySelector('[id^="docs-internal-guid-"]')&&(l(e),i(e))}},"./node_modules/quill/modules/normalizeExternalHTML/normalizers/msWord.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});const r=/\bmso-list:[^;]*ignore/i,n=/\bmso-list:[^;]*\bl(\d+)/i,o=/\bmso-list:[^;]*\blevel(\d+)/i,i=e=>{const t=Array.from(e.querySelectorAll("[style*=mso-list]")),s=[],i=[];t.forEach((e=>{(e.getAttribute("style")||"").match(r)?s.push(e):i.push(e)})),s.forEach((e=>e.parentNode?.removeChild(e)));const l=e.documentElement.innerHTML,a=i.map((e=>((e,t)=>{const s=e.getAttribute("style"),r=s?.match(n);if(!r)return null;const i=Number(r[1]),l=s?.match(o),a=l?Number(l[1]):1,c=new RegExp(`@list l${i}:level${a}\\s*\\{[^\\}]*mso-level-number-format:\\s*([\\w-]+)`,"i"),u=t.match(c);return{id:i,indent:a,type:u&&"bullet"===u[1]?"bullet":"ordered",element:e}})(e,l))).filter((e=>e));for(;a.length;){const e=[];let t=a.shift();for(;t;)e.push(t),t=a.length&&a[0]?.element===t.element.nextElementSibling&&a[0].id===t.id?a.shift():null;const s=document.createElement("ul");e.forEach((e=>{const t=document.createElement("li");t.setAttribute("data-list",e.type),e.indent>1&&t.setAttribute("class","ql-indent-"+(e.indent-1)),t.innerHTML=e.element.innerHTML,s.appendChild(t)}));const r=e[0]?.element,{parentNode:n}=r??{};r&&n?.replaceChild(s,r),e.slice(1).forEach((e=>{let{element:t}=e;n?.removeChild(t)}))}};function l(e){"urn:schemas-microsoft-com:office:word"===e.documentElement.getAttribute("xmlns:w")&&i(e)}},"./node_modules/quill/modules/syntax.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{CodeBlock:()=>g,CodeToken:()=>p,default:()=>y});var r=s("./node_modules/quill-delta/dist/Delta.js"),n=s("./node_modules/parchment/dist/parchment.js"),o=s("./node_modules/quill/blots/inline.js"),i=s("./node_modules/quill/core/quill.js"),l=s("./node_modules/quill/core/module.js"),a=s("./node_modules/quill/blots/block.js"),c=s("./node_modules/quill/blots/break.js"),u=s("./node_modules/quill/blots/cursor.js"),d=s("./node_modules/quill/blots/text.js"),h=s("./node_modules/quill/formats/code.js"),m=s("./node_modules/quill/modules/clipboard.js");const f=new n.ClassAttributor("code-token","hljs",{scope:n.Scope.INLINE});class p extends o.default{static formats(e,t){for(;null!=e&&e!==t.domNode;){if(e.classList&&e.classList.contains(h.default.className))return super.formats(e,t);e=e.parentNode}}constructor(e,t,s){super(e,t,s),f.add(this.domNode,s)}format(e,t){e!==p.blotName?super.format(e,t):t?f.add(this.domNode,t):(f.remove(this.domNode),this.domNode.classList.remove(this.statics.className))}optimize(){super.optimize(...arguments),f.value(this.domNode)||this.unwrap()}}p.blotName="code-token",p.className="ql-token";class g extends h.default{static create(e){const t=super.create(e);return"string"==typeof e&&t.setAttribute("data-language",e),t}static formats(e){return e.getAttribute("data-language")||"plain"}static register(){}format(e,t){e===this.statics.blotName&&t?this.domNode.setAttribute("data-language",t):super.format(e,t)}replaceWith(e,t){return this.formatAt(0,this.length(),p.blotName,!1),super.replaceWith(e,t)}}class b extends h.CodeBlockContainer{attach(){super.attach(),this.forceNext=!1,this.scroll.emitMount(this)}format(e,t){e===g.blotName&&(this.forceNext=!0,this.children.forEach((s=>{s.format(e,t)})))}formatAt(e,t,s,r){s===g.blotName&&(this.forceNext=!0),super.formatAt(e,t,s,r)}highlight(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(null==this.children.head)return;const s=`${Array.from(this.domNode.childNodes).filter((e=>e!==this.uiNode)).map((e=>e.textContent)).join("\n")}\n`,n=g.formats(this.children.head.domNode);if(t||this.forceNext||this.cachedText!==s){if(s.trim().length>0||null==this.cachedText){const t=this.children.reduce(((e,t)=>e.concat((0,a.blockDelta)(t,!1))),new r),o=e(s,n);t.diff(o).reduce(((e,t)=>{let{retain:s,attributes:r}=t;return s?(r&&Object.keys(r).forEach((t=>{[g.blotName,p.blotName].includes(t)&&this.formatAt(e,s,t,r[t])})),e+s):e}),0)}this.cachedText=s,this.forceNext=!1}}html(e,t){const[s]=this.children.find(e);return`<pre data-language="${s?g.formats(s.domNode):"plain"}">\n${(0,d.escapeText)(this.code(e,t))}\n</pre>`}optimize(e){if(super.optimize(e),null!=this.parent&&null!=this.children.head&&null!=this.uiNode){const e=g.formats(this.children.head.domNode);e!==this.uiNode.value&&(this.uiNode.value=e)}}}b.allowedChildren=[g],g.requiredContainer=b,g.allowedChildren=[p,u.default,d.default,c.default];class y extends l.default{static register(){i.default.register(p,!0),i.default.register(g,!0),i.default.register(b,!0)}constructor(e,t){if(super(e,t),null==this.options.hljs)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");this.languages=this.options.languages.reduce(((e,t)=>{let{key:s}=t;return e[s]=!0,e}),{}),this.highlightBlot=this.highlightBlot.bind(this),this.initListener(),this.initTimer()}initListener(){this.quill.on(i.default.events.SCROLL_BLOT_MOUNT,(e=>{if(!(e instanceof b))return;const t=this.quill.root.ownerDocument.createElement("select");this.options.languages.forEach((e=>{let{key:s,label:r}=e;const n=t.ownerDocument.createElement("option");n.textContent=r,n.setAttribute("value",s),t.appendChild(n)})),t.addEventListener("change",(()=>{e.format(g.blotName,t.value),this.quill.root.focus(),this.highlight(e,!0)})),null==e.uiNode&&(e.attachUI(t),e.children.head&&(t.value=g.formats(e.children.head.domNode)))}))}initTimer(){let e=null;this.quill.on(i.default.events.SCROLL_OPTIMIZE,(()=>{e&&clearTimeout(e),e=setTimeout((()=>{this.highlight(),e=null}),this.options.interval)}))}highlight(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.quill.selection.composing)return;this.quill.update(i.default.sources.USER);const s=this.quill.getSelection();(null==e?this.quill.scroll.descendants(b):[e]).forEach((e=>{e.highlight(this.highlightBlot,t)})),this.quill.update(i.default.sources.SILENT),null!=s&&this.quill.setSelection(s,i.default.sources.SILENT)}highlightBlot(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"plain";if(t=this.languages[t]?t:"plain","plain"===t)return(0,d.escapeText)(e).split("\n").reduce(((e,s,r)=>(0!==r&&e.insert("\n",{[h.default.blotName]:t}),e.insert(s))),new r);const s=this.quill.root.ownerDocument.createElement("div");return s.classList.add(h.default.className),s.innerHTML=((e,t,s)=>{if("string"==typeof e.versionString){const r=e.versionString.split(".")[0];if(parseInt(r,10)>=11)return e.highlight(s,{language:t}).value}return e.highlight(t,s).value})(this.options.hljs,t,e),(0,m.traverse)(this.quill.scroll,s,[(e,t)=>{const s=f.value(e);return s?t.compose((new r).retain(t.length(),{[p.blotName]:s})):t}],[(e,s)=>e.data.split("\n").reduce(((e,s,r)=>(0!==r&&e.insert("\n",{[h.default.blotName]:t}),e.insert(s))),s)],new WeakMap)}}y.DEFAULTS={hljs:window.hljs,interval:1e3,languages:[{key:"plain",label:"Plain"},{key:"bash",label:"Bash"},{key:"cpp",label:"C++"},{key:"cs",label:"C#"},{key:"css",label:"CSS"},{key:"diff",label:"Diff"},{key:"xml",label:"HTML/XML"},{key:"java",label:"Java"},{key:"javascript",label:"JavaScript"},{key:"markdown",label:"Markdown"},{key:"php",label:"PHP"},{key:"python",label:"Python"},{key:"ruby",label:"Ruby"},{key:"sql",label:"SQL"}]}},"./node_modules/quill/modules/table.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var r=s("./node_modules/quill-delta/dist/Delta.js"),n=s("./node_modules/quill/core/quill.js"),o=s("./node_modules/quill/core/module.js"),i=s("./node_modules/quill/formats/table.js");class l extends o.default{static register(){n.default.register(i.TableCell),n.default.register(i.TableRow),n.default.register(i.TableBody),n.default.register(i.TableContainer)}constructor(){super(...arguments),this.listenBalanceCells()}balanceTables(){this.quill.scroll.descendants(i.TableContainer).forEach((e=>{e.balanceCells()}))}deleteColumn(){const[e,,t]=this.getTable();null!=t&&(e.deleteColumn(t.cellOffset()),this.quill.update(n.default.sources.USER))}deleteRow(){const[,e]=this.getTable();null!=e&&(e.remove(),this.quill.update(n.default.sources.USER))}deleteTable(){const[e]=this.getTable();if(null==e)return;const t=e.offset();e.remove(),this.quill.update(n.default.sources.USER),this.quill.setSelection(t,n.default.sources.SILENT)}getTable(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.quill.getSelection();if(null==e)return[null,null,null,-1];const[t,s]=this.quill.getLine(e.index);if(null==t||t.statics.blotName!==i.TableCell.blotName)return[null,null,null,-1];const r=t.parent;return[r.parent.parent,r,t,s]}insertColumn(e){const t=this.quill.getSelection();if(!t)return;const[s,r,o]=this.getTable(t);if(null==o)return;const i=o.cellOffset();s.insertColumn(i+e),this.quill.update(n.default.sources.USER);let l=r.rowOffset();0===e&&(l+=1),this.quill.setSelection(t.index+l,t.length,n.default.sources.SILENT)}insertColumnLeft(){this.insertColumn(0)}insertColumnRight(){this.insertColumn(1)}insertRow(e){const t=this.quill.getSelection();if(!t)return;const[s,r,o]=this.getTable(t);if(null==o)return;const i=r.rowOffset();s.insertRow(i+e),this.quill.update(n.default.sources.USER),e>0?this.quill.setSelection(t,n.default.sources.SILENT):this.quill.setSelection(t.index+r.children.length,t.length,n.default.sources.SILENT)}insertRowAbove(){this.insertRow(0)}insertRowBelow(){this.insertRow(1)}insertTable(e,t){const s=this.quill.getSelection();if(null==s)return;const o=new Array(e).fill(0).reduce((e=>{const s=new Array(t).fill("\n").join("");return e.insert(s,{table:(0,i.tableId)()})}),(new r).retain(s.index));this.quill.updateContents(o,n.default.sources.USER),this.quill.setSelection(s.index,n.default.sources.SILENT),this.balanceTables()}listenBalanceCells(){this.quill.on(n.default.events.SCROLL_OPTIMIZE,(e=>{e.some((e=>!!["TD","TR","TBODY","TABLE"].includes(e.target.tagName)&&(this.quill.once(n.default.events.TEXT_CHANGE,((e,t,s)=>{s===n.default.sources.USER&&this.balanceTables()})),!0)))}))}}const a=l},"./node_modules/quill/modules/toolbar.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{addControls:()=>d,default:()=>c});var r=s("./node_modules/quill-delta/dist/Delta.js"),n=s("./node_modules/parchment/dist/parchment.js"),o=s("./node_modules/quill/core/quill.js"),i=s("./node_modules/quill/core/logger.js"),l=s("./node_modules/quill/core/module.js");const a=(0,i.default)("quill:toolbar");class c extends l.default{constructor(e,t){if(super(e,t),Array.isArray(this.options.container)){const t=document.createElement("div");t.setAttribute("role","toolbar"),d(t,this.options.container),e.container?.parentNode?.insertBefore(t,e.container),this.container=t}else"string"==typeof this.options.container?this.container=document.querySelector(this.options.container):this.container=this.options.container;this.container instanceof HTMLElement?(this.container.classList.add("ql-toolbar"),this.controls=[],this.handlers={},this.options.handlers&&Object.keys(this.options.handlers).forEach((e=>{const t=this.options.handlers?.[e];t&&this.addHandler(e,t)})),Array.from(this.container.querySelectorAll("button, select")).forEach((e=>{this.attach(e)})),this.quill.on(o.default.events.EDITOR_CHANGE,(()=>{const[e]=this.quill.selection.getRange();this.update(e)}))):a.error("Container required for toolbar",this.options)}addHandler(e,t){this.handlers[e]=t}attach(e){let t=Array.from(e.classList).find((e=>0===e.indexOf("ql-")));if(!t)return;if(t=t.slice(3),"BUTTON"===e.tagName&&e.setAttribute("type","button"),null==this.handlers[t]&&null==this.quill.scroll.query(t))return void a.warn("ignoring attaching to nonexistent format",t,e);const s="SELECT"===e.tagName?"change":"click";e.addEventListener(s,(s=>{let i;if("SELECT"===e.tagName){if(e.selectedIndex<0)return;const t=e.options[e.selectedIndex];i=!t.hasAttribute("selected")&&(t.value||!1)}else i=!e.classList.contains("ql-active")&&(e.value||!e.hasAttribute("value")),s.preventDefault();this.quill.focus();const[l]=this.quill.selection.getRange();if(null!=this.handlers[t])this.handlers[t].call(this,i);else if(this.quill.scroll.query(t).prototype instanceof n.EmbedBlot){if(i=prompt(`Enter ${t}`),!i)return;this.quill.updateContents((new r).retain(l.index).delete(l.length).insert({[t]:i}),o.default.sources.USER)}else this.quill.format(t,i,o.default.sources.USER);this.update(l)})),this.controls.push([t,e])}update(e){const t=null==e?{}:this.quill.getFormat(e);this.controls.forEach((s=>{const[r,n]=s;if("SELECT"===n.tagName){let s=null;if(null==e)s=null;else if(null==t[r])s=n.querySelector("option[selected]");else if(!Array.isArray(t[r])){let e=t[r];"string"==typeof e&&(e=e.replace(/"/g,'\\"')),s=n.querySelector(`option[value="${e}"]`)}null==s?(n.value="",n.selectedIndex=-1):s.selected=!0}else if(null==e)n.classList.remove("ql-active"),n.setAttribute("aria-pressed","false");else if(n.hasAttribute("value")){const e=t[r],s=e===n.getAttribute("value")||null!=e&&e.toString()===n.getAttribute("value")||null==e&&!n.getAttribute("value");n.classList.toggle("ql-active",s),n.setAttribute("aria-pressed",s.toString())}else{const e=null!=t[r];n.classList.toggle("ql-active",e),n.setAttribute("aria-pressed",e.toString())}}))}}function u(e,t,s){const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add(`ql-${t}`),r.setAttribute("aria-pressed","false"),null!=s?(r.value=s,r.setAttribute("aria-label",`${t}: ${s}`)):r.setAttribute("aria-label",t),e.appendChild(r)}function d(e,t){Array.isArray(t[0])||(t=[t]),t.forEach((t=>{const s=document.createElement("span");s.classList.add("ql-formats"),t.forEach((e=>{if("string"==typeof e)u(s,e);else{const t=Object.keys(e)[0],r=e[t];Array.isArray(r)?function(e,t,s){const r=document.createElement("select");r.classList.add(`ql-${t}`),s.forEach((e=>{const t=document.createElement("option");!1!==e?t.setAttribute("value",String(e)):t.setAttribute("selected","selected"),r.appendChild(t)})),e.appendChild(r)}(s,t,r):u(s,t,r)}})),e.appendChild(s)}))}c.DEFAULTS={},c.DEFAULTS={container:null,handlers:{clean(){const e=this.quill.getSelection();if(null!=e)if(0===e.length){const e=this.quill.getFormat();Object.keys(e).forEach((e=>{null!=this.quill.scroll.query(e,n.Scope.INLINE)&&this.quill.format(e,!1,o.default.sources.USER)}))}else this.quill.removeFormat(e.index,e.length,o.default.sources.USER)},direction(e){const{align:t}=this.quill.getFormat();"rtl"===e&&null==t?this.quill.format("align","right",o.default.sources.USER):e||"right"!==t||this.quill.format("align",!1,o.default.sources.USER),this.quill.format("direction",e,o.default.sources.USER)},indent(e){const t=this.quill.getSelection(),s=this.quill.getFormat(t),r=parseInt(s.indent||0,10);if("+1"===e||"-1"===e){let t="+1"===e?1:-1;"rtl"===s.direction&&(t*=-1),this.quill.format("indent",r+t,o.default.sources.USER)}},link(e){!0===e&&(e=prompt("Enter link URL:")),this.quill.format("link",e,o.default.sources.USER)},list(e){const t=this.quill.getSelection(),s=this.quill.getFormat(t);"check"===e?"checked"===s.list||"unchecked"===s.list?this.quill.format("list",!1,o.default.sources.USER):this.quill.format("list","unchecked",o.default.sources.USER):this.quill.format("list",e,o.default.sources.USER)}}}},"./node_modules/quill/modules/uiNode.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{TTL_FOR_VALID_SELECTION_CHANGE:()=>l,default:()=>c});var r=s("./node_modules/parchment/dist/parchment.js"),n=s("./node_modules/quill/core/module.js"),o=s("./node_modules/quill/core/quill.js");const i=/Mac/i.test(navigator.platform),l=100;class a extends n.default{isListening=!1;selectionChangeDeadline=0;constructor(e,t){super(e,t),this.handleArrowKeys(),this.handleNavigationShortcuts()}handleArrowKeys(){this.quill.keyboard.addBinding({key:["ArrowLeft","ArrowRight"],offset:0,shiftKey:null,handler(e,t){let{line:s,event:n}=t;if(!(s instanceof r.ParentBlot&&s.uiNode))return!0;const i="rtl"===getComputedStyle(s.domNode).direction;return!!(i&&"ArrowRight"!==n.key||!i&&"ArrowLeft"!==n.key)||(this.quill.setSelection(e.index-1,e.length+(n.shiftKey?1:0),o.default.sources.USER),!1)}})}handleNavigationShortcuts(){this.quill.root.addEventListener("keydown",(e=>{!e.defaultPrevented&&(e=>"ArrowLeft"===e.key||"ArrowRight"===e.key||"ArrowUp"===e.key||"ArrowDown"===e.key||"Home"===e.key||!(!i||"a"!==e.key||!0!==e.ctrlKey))(e)&&this.ensureListeningToSelectionChange()}))}ensureListeningToSelectionChange(){if(this.selectionChangeDeadline=Date.now()+l,this.isListening)return;this.isListening=!0;document.addEventListener("selectionchange",(()=>{this.isListening=!1,Date.now()<=this.selectionChangeDeadline&&this.handleSelectionChange()}),{once:!0})}handleSelectionChange(){const e=document.getSelection();if(!e)return;const t=e.getRangeAt(0);if(!0!==t.collapsed||0!==t.startOffset)return;const s=this.quill.scroll.find(t.startContainer);if(!(s instanceof r.ParentBlot&&s.uiNode))return;const n=document.createRange();n.setStartAfter(s.uiNode),n.setEndAfter(s.uiNode),e.removeAllRanges(),e.addRange(n)}}const c=a},"./node_modules/quill/modules/uploader.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l});var r=s("./node_modules/quill-delta/dist/Delta.js"),n=s("./node_modules/quill/core/emitter.js"),o=s("./node_modules/quill/core/module.js");class i extends o.default{constructor(e,t){super(e,t),e.root.addEventListener("drop",(t=>{t.preventDefault();let s=null;if(document.caretRangeFromPoint)s=document.caretRangeFromPoint(t.clientX,t.clientY);else if(document.caretPositionFromPoint){const e=document.caretPositionFromPoint(t.clientX,t.clientY);s=document.createRange(),s.setStart(e.offsetNode,e.offset),s.setEnd(e.offsetNode,e.offset)}const r=s&&e.selection.normalizeNative(s);if(r){const s=e.selection.normalizedToRange(r);t.dataTransfer?.files&&this.upload(s,t.dataTransfer.files)}}))}upload(e,t){const s=[];Array.from(t).forEach((e=>{e&&this.options.mimetypes?.includes(e.type)&&s.push(e)})),s.length>0&&this.options.handler.call(this,e,s)}}i.DEFAULTS={mimetypes:["image/png","image/jpeg"],handler(e,t){if(!this.quill.scroll.query("image"))return;const s=t.map((e=>new Promise((t=>{const s=new FileReader;s.onload=()=>{t(s.result)},s.readAsDataURL(e)}))));Promise.all(s).then((t=>{const s=t.reduce(((e,t)=>e.insert({image:t})),(new r).retain(e.index).delete(e.length));this.quill.updateContents(s,n.default.sources.USER),this.quill.setSelection(e.index+t.length,n.default.sources.SILENT)}))}};const l=i},"./node_modules/quill/node_modules/eventemitter3/index.mjs":(e,t,s)=>{"use strict";s.r(t),s.d(t,{EventEmitter:()=>r,default:()=>n});var r=s("./node_modules/quill/node_modules/eventemitter3/index.js");const n=r},"./node_modules/quill/quill.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Module:()=>r.Module,Parchment:()=>r.Parchment,Range:()=>r.Range,default:()=>R});var r=s("./node_modules/quill/core.js"),n=s("./node_modules/quill/formats/align.js"),o=s("./node_modules/quill/formats/direction.js"),i=s("./node_modules/quill/formats/indent.js"),l=s("./node_modules/quill/formats/blockquote.js"),a=s("./node_modules/quill/formats/header.js"),c=s("./node_modules/quill/formats/list.js"),u=s("./node_modules/quill/formats/background.js"),d=s("./node_modules/quill/formats/color.js"),h=s("./node_modules/quill/formats/font.js"),m=s("./node_modules/quill/formats/size.js"),f=s("./node_modules/quill/formats/bold.js"),p=s("./node_modules/quill/formats/italic.js"),g=s("./node_modules/quill/formats/link.js"),b=s("./node_modules/quill/formats/script.js"),y=s("./node_modules/quill/formats/strike.js"),v=s("./node_modules/quill/formats/underline.js"),j=s("./node_modules/quill/formats/formula.js"),_=s("./node_modules/quill/formats/image.js"),w=s("./node_modules/quill/formats/video.js"),E=s("./node_modules/quill/formats/code.js"),A=s("./node_modules/quill/modules/syntax.js"),S=s("./node_modules/quill/modules/table.js"),k=s("./node_modules/quill/modules/toolbar.js"),x=s("./node_modules/quill/ui/icons.js"),O=s("./node_modules/quill/ui/picker.js"),N=s("./node_modules/quill/ui/color-picker.js"),q=s("./node_modules/quill/ui/icon-picker.js"),T=s("./node_modules/quill/ui/tooltip.js"),L=s("./node_modules/quill/themes/bubble.js"),C=s("./node_modules/quill/themes/snow.js");r.default.register({"attributors/attribute/direction":o.DirectionAttribute,"attributors/class/align":n.AlignClass,"attributors/class/background":u.BackgroundClass,"attributors/class/color":d.ColorClass,"attributors/class/direction":o.DirectionClass,"attributors/class/font":h.FontClass,"attributors/class/size":m.SizeClass,"attributors/style/align":n.AlignStyle,"attributors/style/background":u.BackgroundStyle,"attributors/style/color":d.ColorStyle,"attributors/style/direction":o.DirectionStyle,"attributors/style/font":h.FontStyle,"attributors/style/size":m.SizeStyle},!0),r.default.register({"formats/align":n.AlignClass,"formats/direction":o.DirectionClass,"formats/indent":i.default,"formats/background":u.BackgroundStyle,"formats/color":d.ColorStyle,"formats/font":h.FontClass,"formats/size":m.SizeClass,"formats/blockquote":l.default,"formats/code-block":E.default,"formats/header":a.default,"formats/list":c.default,"formats/bold":f.default,"formats/code":E.Code,"formats/italic":p.default,"formats/link":g.default,"formats/script":b.default,"formats/strike":y.default,"formats/underline":v.default,"formats/formula":j.default,"formats/image":_.default,"formats/video":w.default,"modules/syntax":A.default,"modules/table":S.default,"modules/toolbar":k.default,"themes/bubble":L.default,"themes/snow":C.default,"ui/icons":x.default,"ui/picker":O.default,"ui/icon-picker":q.default,"ui/color-picker":N.default,"ui/tooltip":T.default},!0);const R=r.default},"./node_modules/quill/themes/base.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{BaseTooltip:()=>g,default:()=>p});var r=s("./node_modules/lodash-es/merge.js"),n=s("./node_modules/quill/core/emitter.js"),o=s("./node_modules/quill/core/theme.js"),i=s("./node_modules/quill/ui/color-picker.js"),l=s("./node_modules/quill/ui/icon-picker.js"),a=s("./node_modules/quill/ui/picker.js"),c=s("./node_modules/quill/ui/tooltip.js");const u=[!1,"center","right","justify"],d=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],h=[!1,"serif","monospace"],m=["1","2","3",!1],f=["small",!1,"large","huge"];class p extends o.default{constructor(e,t){super(e,t);const s=t=>{document.body.contains(e.root)?(null==this.tooltip||this.tooltip.root.contains(t.target)||document.activeElement===this.tooltip.textbox||this.quill.hasFocus()||this.tooltip.hide(),null!=this.pickers&&this.pickers.forEach((e=>{e.container.contains(t.target)||e.close()}))):document.body.removeEventListener("click",s)};e.emitter.listenDOM("click",document.body,s)}addModule(e){const t=super.addModule(e);return"toolbar"===e&&this.extendToolbar(t),t}buildButtons(e,t){Array.from(e).forEach((e=>{(e.getAttribute("class")||"").split(/\s+/).forEach((s=>{if(s.startsWith("ql-")&&(s=s.slice(3),null!=t[s]))if("direction"===s)e.innerHTML=t[s][""]+t[s].rtl;else if("string"==typeof t[s])e.innerHTML=t[s];else{const r=e.value||"";null!=r&&t[s][r]&&(e.innerHTML=t[s][r])}}))}))}buildPickers(e,t){this.pickers=Array.from(e).map((e=>{if(e.classList.contains("ql-align")&&(null==e.querySelector("option")&&b(e,u),"object"==typeof t.align))return new l.default(e,t.align);if(e.classList.contains("ql-background")||e.classList.contains("ql-color")){const s=e.classList.contains("ql-background")?"background":"color";return null==e.querySelector("option")&&b(e,d,"background"===s?"#ffffff":"#000000"),new i.default(e,t[s])}return null==e.querySelector("option")&&(e.classList.contains("ql-font")?b(e,h):e.classList.contains("ql-header")?b(e,m):e.classList.contains("ql-size")&&b(e,f)),new a.default(e)}));this.quill.on(n.default.events.EDITOR_CHANGE,(()=>{this.pickers.forEach((e=>{e.update()}))}))}}p.DEFAULTS=(0,r.default)({},o.default.DEFAULTS,{modules:{toolbar:{handlers:{formula(){this.quill.theme.tooltip.edit("formula")},image(){let e=this.container.querySelector("input.ql-image[type=file]");null==e&&(e=document.createElement("input"),e.setAttribute("type","file"),e.setAttribute("accept",this.quill.uploader.options.mimetypes.join(", ")),e.classList.add("ql-image"),e.addEventListener("change",(()=>{const t=this.quill.getSelection(!0);this.quill.uploader.upload(t,e.files),e.value=""})),this.container.appendChild(e)),e.click()},video(){this.quill.theme.tooltip.edit("video")}}}}});class g extends c.default{constructor(e,t){super(e,t),this.textbox=this.root.querySelector('input[type="text"]'),this.listen()}listen(){this.textbox.addEventListener("keydown",(e=>{"Enter"===e.key?(this.save(),e.preventDefault()):"Escape"===e.key&&(this.cancel(),e.preventDefault())}))}cancel(){this.hide(),this.restoreFocus()}edit(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"link",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null==this.textbox)return;null!=t?this.textbox.value=t:e!==this.root.getAttribute("data-mode")&&(this.textbox.value="");const s=this.quill.getBounds(this.quill.selection.savedRange);null!=s&&this.position(s),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute(`data-${e}`)||""),this.root.setAttribute("data-mode",e)}restoreFocus(){this.quill.focus({preventScroll:!0})}save(){let{value:e}=this.textbox;switch(this.root.getAttribute("data-mode")){case"link":{const{scrollTop:t}=this.quill.root;this.linkRange?(this.quill.formatText(this.linkRange,"link",e,n.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",e,n.default.sources.USER)),this.quill.root.scrollTop=t;break}case"video":e=function(e){let t=e.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||e.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);if(t)return`${t[1]||"https"}://www.youtube.com/embed/${t[2]}?showinfo=0`;if(t=e.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))return`${t[1]||"https"}://player.vimeo.com/video/${t[2]}/`;return e}(e);case"formula":{if(!e)break;const t=this.quill.getSelection(!0);if(null!=t){const s=t.index+t.length;this.quill.insertEmbed(s,this.root.getAttribute("data-mode"),e,n.default.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(s+1," ",n.default.sources.USER),this.quill.setSelection(s+2,n.default.sources.USER)}break}}this.textbox.value="",this.hide()}}function b(e,t){let s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];t.forEach((t=>{const r=document.createElement("option");t===s?r.setAttribute("selected","selected"):r.setAttribute("value",String(t)),e.appendChild(r)}))}},"./node_modules/quill/themes/bubble.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{BubbleTooltip:()=>u,default:()=>d});var r=s("./node_modules/lodash-es/merge.js"),n=s("./node_modules/quill/core/emitter.js"),o=s("./node_modules/quill/themes/base.js"),i=s("./node_modules/quill/core/selection.js"),l=s("./node_modules/quill/ui/icons.js"),a=s("./node_modules/quill/core/quill.js");const c=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]];class u extends o.BaseTooltip{static TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join("");constructor(e,t){super(e,t),this.quill.on(n.default.events.EDITOR_CHANGE,((e,t,s,r)=>{if(e===n.default.events.SELECTION_CHANGE)if(null!=t&&t.length>0&&r===n.default.sources.USER){this.show(),this.root.style.left="0px",this.root.style.width="",this.root.style.width=`${this.root.offsetWidth}px`;const e=this.quill.getLines(t.index,t.length);if(1===e.length){const e=this.quill.getBounds(t);null!=e&&this.position(e)}else{const s=e[e.length-1],r=this.quill.getIndex(s),n=Math.min(s.length()-1,t.index+t.length-r),o=this.quill.getBounds(new i.Range(r,n));null!=o&&this.position(o)}}else document.activeElement!==this.textbox&&this.quill.hasFocus()&&this.hide()}))}listen(){super.listen(),this.root.querySelector(".ql-close").addEventListener("click",(()=>{this.root.classList.remove("ql-editing")})),this.quill.on(n.default.events.SCROLL_OPTIMIZE,(()=>{setTimeout((()=>{if(this.root.classList.contains("ql-hidden"))return;const e=this.quill.getSelection();if(null!=e){const t=this.quill.getBounds(e);null!=t&&this.position(t)}}),1)}))}cancel(){this.show()}position(e){const t=super.position(e),s=this.root.querySelector(".ql-tooltip-arrow");return s.style.marginLeft="",0!==t&&(s.style.marginLeft=-1*t-s.offsetWidth/2+"px"),t}}class d extends o.default{constructor(e,t){null!=t.modules.toolbar&&null==t.modules.toolbar.container&&(t.modules.toolbar.container=c),super(e,t),this.quill.container.classList.add("ql-bubble")}extendToolbar(e){this.tooltip=new u(this.quill,this.options.bounds),null!=e.container&&(this.tooltip.root.appendChild(e.container),this.buildButtons(e.container.querySelectorAll("button"),l.default),this.buildPickers(e.container.querySelectorAll("select"),l.default))}}d.DEFAULTS=(0,r.default)({},o.default.DEFAULTS,{modules:{toolbar:{handlers:{link(e){e?this.quill.theme.tooltip.edit():this.quill.format("link",!1,a.default.sources.USER)}}}}})},"./node_modules/quill/themes/snow.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});var r=s("./node_modules/lodash-es/merge.js"),n=s("./node_modules/quill/core/emitter.js"),o=s("./node_modules/quill/themes/base.js"),i=s("./node_modules/quill/formats/link.js"),l=s("./node_modules/quill/core/selection.js"),a=s("./node_modules/quill/ui/icons.js"),c=s("./node_modules/quill/core/quill.js");const u=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]];class d extends o.BaseTooltip{static TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join("");preview=this.root.querySelector("a.ql-preview");listen(){super.listen(),this.root.querySelector("a.ql-action").addEventListener("click",(e=>{this.root.classList.contains("ql-editing")?this.save():this.edit("link",this.preview.textContent),e.preventDefault()})),this.root.querySelector("a.ql-remove").addEventListener("click",(e=>{if(null!=this.linkRange){const e=this.linkRange;this.restoreFocus(),this.quill.formatText(e,"link",!1,n.default.sources.USER),delete this.linkRange}e.preventDefault(),this.hide()})),this.quill.on(n.default.events.SELECTION_CHANGE,((e,t,s)=>{if(null!=e){if(0===e.length&&s===n.default.sources.USER){const[t,s]=this.quill.scroll.descendant(i.default,e.index);if(null!=t){this.linkRange=new l.Range(e.index-s,t.length());const r=i.default.formats(t.domNode);this.preview.textContent=r,this.preview.setAttribute("href",r),this.show();const n=this.quill.getBounds(this.linkRange);return void(null!=n&&this.position(n))}}else delete this.linkRange;this.hide()}}))}show(){super.show(),this.root.removeAttribute("data-mode")}}class h extends o.default{constructor(e,t){null!=t.modules.toolbar&&null==t.modules.toolbar.container&&(t.modules.toolbar.container=u),super(e,t),this.quill.container.classList.add("ql-snow")}extendToolbar(e){null!=e.container&&(e.container.classList.add("ql-snow"),this.buildButtons(e.container.querySelectorAll("button"),a.default),this.buildPickers(e.container.querySelectorAll("select"),a.default),this.tooltip=new d(this.quill,this.options.bounds),e.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"k",shortKey:!0},((t,s)=>{e.handlers.link.call(e,!s.format.link)})))}}h.DEFAULTS=(0,r.default)({},o.default.DEFAULTS,{modules:{toolbar:{handlers:{link(e){if(e){const e=this.quill.getSelection();if(null==e||0===e.length)return;let t=this.quill.getText(e);/^\S+@\S+\.\S+$/.test(t)&&0!==t.indexOf("mailto:")&&(t=`mailto:${t}`);const{tooltip:s}=this.quill.theme;s.edit("link",t)}else this.quill.format("link",!1,c.default.sources.USER)}}}}});const m=h},"./node_modules/quill/ui/color-picker.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/ui/picker.js");class n extends r.default{constructor(e,t){super(e),this.label.innerHTML=t,this.container.classList.add("ql-color-picker"),Array.from(this.container.querySelectorAll(".ql-picker-item")).slice(0,7).forEach((e=>{e.classList.add("ql-primary")}))}buildItem(e){const t=super.buildItem(e);return t.style.backgroundColor=e.getAttribute("value")||"",t}selectItem(e,t){super.selectItem(e,t);const s=this.label.querySelector(".ql-color-label"),r=e&&e.getAttribute("data-value")||"";s&&("line"===s.tagName?s.style.stroke=r:s.style.fill=r)}}const o=n},"./node_modules/quill/ui/icon-picker.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var r=s("./node_modules/quill/ui/picker.js");class n extends r.default{constructor(e,t){super(e),this.container.classList.add("ql-icon-picker"),Array.from(this.container.querySelectorAll(".ql-picker-item")).forEach((e=>{e.innerHTML=t[e.getAttribute("data-value")||""]})),this.defaultItem=this.container.querySelector(".ql-selected"),this.selectItem(this.defaultItem)}selectItem(e,t){super.selectItem(e,t);const s=e||this.defaultItem;if(null!=s){if(this.label.innerHTML===s.innerHTML)return;this.label.innerHTML=s.innerHTML}}}const o=n},"./node_modules/quill/ui/icons.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});const r='<svg viewbox="0 0 18 18"><polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"/><polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"/><line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"/></svg>',n={align:{"":'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"/></svg>',center:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"/><line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"/></svg>',right:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"/><line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"/></svg>',justify:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="15" x2="3" y1="14" y2="14"/><line class="ql-stroke" x1="15" x2="3" y1="4" y2="4"/></svg>'},background:'<svg viewbox="0 0 18 18"><g class="ql-fill ql-color-label"><polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"/><rect height="1" width="1" x="4" y="4"/><polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"/><rect height="1" width="1" x="2" y="6"/><rect height="1" width="1" x="3" y="5"/><rect height="1" width="1" x="4" y="7"/><polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"/><rect height="1" width="1" x="2" y="12"/><rect height="1" width="1" x="2" y="9"/><rect height="1" width="1" x="2" y="15"/><polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"/><rect height="1" width="1" x="3" y="8"/><path d="M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z"/><path d="M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z"/><path d="M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z"/><rect height="1" width="1" x="12" y="2"/><rect height="1" width="1" x="11" y="3"/><path d="M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z"/><rect height="1" width="1" x="2" y="3"/><rect height="1" width="1" x="6" y="2"/><rect height="1" width="1" x="3" y="2"/><rect height="1" width="1" x="5" y="3"/><rect height="1" width="1" x="9" y="2"/><rect height="1" width="1" x="15" y="14"/><polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"/><rect height="1" width="1" x="13" y="7"/><rect height="1" width="1" x="15" y="5"/><rect height="1" width="1" x="14" y="6"/><rect height="1" width="1" x="15" y="8"/><rect height="1" width="1" x="14" y="9"/><path d="M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z"/><rect height="1" width="1" x="14" y="3"/><polygon points="12 6.868 12 6 11.62 6 12 6.868"/><rect height="1" width="1" x="15" y="2"/><rect height="1" width="1" x="12" y="5"/><rect height="1" width="1" x="13" y="4"/><polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"/><rect height="1" width="1" x="9" y="14"/><rect height="1" width="1" x="8" y="15"/><path d="M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z"/><rect height="1" width="1" x="5" y="15"/><path d="M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z"/><rect height="1" width="1" x="11" y="15"/><path d="M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z"/><rect height="1" width="1" x="14" y="15"/><rect height="1" width="1" x="15" y="11"/></g><polyline class="ql-stroke" points="5.5 13 9 5 12.5 13"/><line class="ql-stroke" x1="11.63" x2="6.38" y1="11" y2="11"/></svg>',blockquote:'<svg viewbox="0 0 18 18"><rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"/><rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5"/><path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"/><path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5"/></svg>',bold:'<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z"/><path class="ql-stroke" d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z"/></svg>',clean:'<svg class="" viewbox="0 0 18 18"><line class="ql-stroke" x1="5" x2="13" y1="3" y2="3"/><line class="ql-stroke" x1="6" x2="9.35" y1="12" y2="3"/><line class="ql-stroke" x1="11" x2="15" y1="11" y2="15"/><line class="ql-stroke" x1="15" x2="11" y1="11" y2="15"/><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="7" x="2" y="14"/></svg>',code:r,"code-block":r,color:'<svg viewbox="0 0 18 18"><line class="ql-color-label ql-stroke ql-transparent" x1="3" x2="15" y1="15" y2="15"/><polyline class="ql-stroke" points="5.5 11 9 3 12.5 11"/><line class="ql-stroke" x1="11.63" x2="6.38" y1="9" y2="9"/></svg>',direction:{"":'<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"/><line class="ql-stroke ql-fill" x1="15" x2="11" y1="4" y2="4"/><path class="ql-fill" d="M11,3a3,3,0,0,0,0,6h1V3H11Z"/><rect class="ql-fill" height="11" width="1" x="11" y="4"/><rect class="ql-fill" height="11" width="1" x="13" y="4"/></svg>',rtl:'<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"/><line class="ql-stroke ql-fill" x1="9" x2="5" y1="4" y2="4"/><path class="ql-fill" d="M5,3A3,3,0,0,0,5,9H6V3H5Z"/><rect class="ql-fill" height="11" width="1" x="5" y="4"/><rect class="ql-fill" height="11" width="1" x="7" y="4"/></svg>'},formula:'<svg viewbox="0 0 18 18"><path class="ql-fill" d="M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z"/><rect class="ql-fill" height="1.6" rx="0.8" ry="0.8" width="5" x="5.15" y="6.2"/><path class="ql-fill" d="M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z"/></svg>',header:{1:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z"/></svg>',2:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',3:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.65186,12.30664a2.6742,2.6742,0,0,1-2.915,2.68457,3.96592,3.96592,0,0,1-2.25537-.6709.56007.56007,0,0,1-.13232-.83594L11.64648,13c.209-.34082.48389-.36328.82471-.1543a2.32654,2.32654,0,0,0,1.12256.33008c.71484,0,1.12207-.35156,1.12207-.78125,0-.61523-.61621-.86816-1.46338-.86816H13.2085a.65159.65159,0,0,1-.68213-.41895l-.05518-.10937a.67114.67114,0,0,1,.14307-.78125l.71533-.86914a8.55289,8.55289,0,0,1,.68213-.7373V8.58887a3.93913,3.93913,0,0,1-.748.05469H11.9873a.54085.54085,0,0,1-.605-.60547V7.59863a.54085.54085,0,0,1,.605-.60547h3.75146a.53773.53773,0,0,1,.60547.59375v.17676a1.03723,1.03723,0,0,1-.27539.748L14.74854,10.0293A2.31132,2.31132,0,0,1,16.65186,12.30664ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',4:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm7.05371,7.96582v.38477c0,.39648-.165.60547-.46191.60547h-.47314v1.29785a.54085.54085,0,0,1-.605.60547h-.69336a.54085.54085,0,0,1-.605-.60547V12.95605H11.333a.5412.5412,0,0,1-.60547-.60547v-.15332a1.199,1.199,0,0,1,.22021-.748l2.56348-4.05957a.7819.7819,0,0,1,.72607-.39648h1.27637a.54085.54085,0,0,1,.605.60547v3.7627h.33008A.54055.54055,0,0,1,17.05371,11.96582ZM14.28125,8.7207h-.022a4.18969,4.18969,0,0,1-.38525.81348l-1.188,1.80469v.02246h1.5293V9.60059A7.04058,7.04058,0,0,1,14.28125,8.7207Z"/></svg>',5:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.74023,12.18555a2.75131,2.75131,0,0,1-2.91553,2.80566,3.908,3.908,0,0,1-2.25537-.68164.54809.54809,0,0,1-.13184-.8252L11.73438,13c.209-.34082.48389-.36328.8252-.1543a2.23757,2.23757,0,0,0,1.1001.33008,1.01827,1.01827,0,0,0,1.1001-.96777c0-.61621-.53906-.97949-1.25439-.97949a2.15554,2.15554,0,0,0-.64893.09961,1.15209,1.15209,0,0,1-.814.01074l-.12109-.04395a.64116.64116,0,0,1-.45117-.71484l.231-3.00391a.56666.56666,0,0,1,.62744-.583H15.541a.54085.54085,0,0,1,.605.60547v.43945a.54085.54085,0,0,1-.605.60547H13.41748l-.04395.72559a1.29306,1.29306,0,0,1-.04395.30859h.022a2.39776,2.39776,0,0,1,.57227-.07715A2.53266,2.53266,0,0,1,16.74023,12.18555ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/></svg>',6:'<svg viewBox="0 0 18 18"><path class="ql-fill" d="M14.51758,9.64453a1.85627,1.85627,0,0,0-1.24316.38477H13.252a1.73532,1.73532,0,0,1,1.72754-1.4082,2.66491,2.66491,0,0,1,.5498.06641c.35254.05469.57227.01074.70508-.40723l.16406-.5166a.53393.53393,0,0,0-.373-.75977,4.83723,4.83723,0,0,0-1.17773-.14258c-2.43164,0-3.7627,2.17773-3.7627,4.43359,0,2.47559,1.60645,3.69629,3.19043,3.69629A2.70585,2.70585,0,0,0,16.96,12.19727,2.43861,2.43861,0,0,0,14.51758,9.64453Zm-.23047,3.58691c-.67187,0-1.22168-.81445-1.22168-1.45215,0-.47363.30762-.583.72559-.583.96875,0,1.27734.59375,1.27734,1.12207A.82182.82182,0,0,1,14.28711,13.23145ZM10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Z"/></svg>'},italic:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"/><line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"/><line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"/></svg>',image:'<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="10" width="12" x="3" y="4"/><circle class="ql-fill" cx="6" cy="7" r="1"/><polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"/></svg>',indent:{"+1":'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"/></svg>',"-1":'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-stroke" points="5 7 5 11 3 9 5 7"/></svg>'},link:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"/><path class="ql-even ql-stroke" d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z"/><path class="ql-even ql-stroke" d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z"/></svg>',list:{bullet:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"/><line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"/><line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"/><line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"/></svg>',check:'<svg class="" viewbox="0 0 18 18"><line class="ql-stroke" x1="9" x2="15" y1="4" y2="4"/><polyline class="ql-stroke" points="3 4 4 5 6 3"/><line class="ql-stroke" x1="9" x2="15" y1="14" y2="14"/><polyline class="ql-stroke" points="3 14 4 15 6 13"/><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"/><polyline class="ql-stroke" points="3 9 4 10 6 8"/></svg>',ordered:'<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"/><line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"/><line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"/><line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5"/><path class="ql-fill" d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z"/><path class="ql-stroke ql-thin" d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156"/><path class="ql-stroke ql-thin" d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109"/></svg>'},script:{sub:'<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z"/><path class="ql-fill" d="M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z"/></svg>',super:'<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z"/><path class="ql-fill" d="M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z"/></svg>'},strike:'<svg viewbox="0 0 18 18"><line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5"/><path class="ql-fill" d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z"/><path class="ql-fill" d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z"/></svg>',table:'<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="12" width="12" x="3" y="3"/><rect class="ql-fill" height="2" width="3" x="5" y="5"/><rect class="ql-fill" height="2" width="4" x="9" y="5"/><g class="ql-fill ql-transparent"><rect height="2" width="3" x="5" y="8"/><rect height="2" width="4" x="9" y="8"/><rect height="2" width="3" x="5" y="11"/><rect height="2" width="4" x="9" y="11"/></g></svg>',underline:'<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"/><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3" y="15"/></svg>',video:'<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="12" width="12" x="3" y="3"/><rect class="ql-fill" height="12" width="1" x="5" y="3"/><rect class="ql-fill" height="12" width="1" x="12" y="3"/><rect class="ql-fill" height="2" width="8" x="5" y="8"/><rect class="ql-fill" height="1" width="3" x="3" y="5"/><rect class="ql-fill" height="1" width="3" x="3" y="7"/><rect class="ql-fill" height="1" width="3" x="3" y="10"/><rect class="ql-fill" height="1" width="3" x="3" y="12"/><rect class="ql-fill" height="1" width="3" x="12" y="5"/><rect class="ql-fill" height="1" width="3" x="12" y="7"/><rect class="ql-fill" height="1" width="3" x="12" y="10"/><rect class="ql-fill" height="1" width="3" x="12" y="12"/></svg>'}},"./node_modules/quill/ui/picker.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});let r=0;function n(e,t){e.setAttribute(t,`${!("true"===e.getAttribute(t))}`)}const o=class{constructor(e){this.select=e,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",(()=>{this.togglePicker()})),this.label.addEventListener("keydown",(e=>{switch(e.key){case"Enter":this.togglePicker();break;case"Escape":this.escape(),e.preventDefault()}})),this.select.addEventListener("change",this.update.bind(this))}togglePicker(){this.container.classList.toggle("ql-expanded"),n(this.label,"aria-expanded"),n(this.options,"aria-hidden")}buildItem(e){const t=document.createElement("span");t.tabIndex="0",t.setAttribute("role","button"),t.classList.add("ql-picker-item");const s=e.getAttribute("value");return s&&t.setAttribute("data-value",s),e.textContent&&t.setAttribute("data-label",e.textContent),t.addEventListener("click",(()=>{this.selectItem(t,!0)})),t.addEventListener("keydown",(e=>{switch(e.key){case"Enter":this.selectItem(t,!0),e.preventDefault();break;case"Escape":this.escape(),e.preventDefault()}})),t}buildLabel(){const e=document.createElement("span");return e.classList.add("ql-picker-label"),e.innerHTML='<svg viewbox="0 0 18 18"><polygon class="ql-stroke" points="7 11 9 13 11 11 7 11"/><polygon class="ql-stroke" points="7 7 9 5 11 7 7 7"/></svg>',e.tabIndex="0",e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),this.container.appendChild(e),e}buildOptions(){const e=document.createElement("span");e.classList.add("ql-picker-options"),e.setAttribute("aria-hidden","true"),e.tabIndex="-1",e.id=`ql-picker-options-${r}`,r+=1,this.label.setAttribute("aria-controls",e.id),this.options=e,Array.from(this.select.options).forEach((t=>{const s=this.buildItem(t);e.appendChild(s),!0===t.selected&&this.selectItem(s)})),this.container.appendChild(e)}buildPicker(){Array.from(this.select.attributes).forEach((e=>{this.container.setAttribute(e.name,e.value)})),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}escape(){this.close(),setTimeout((()=>this.label.focus()),1)}close(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}selectItem(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const s=this.container.querySelector(".ql-selected");e!==s&&(null!=s&&s.classList.remove("ql-selected"),null!=e&&(e.classList.add("ql-selected"),this.select.selectedIndex=Array.from(e.parentNode.children).indexOf(e),e.hasAttribute("data-value")?this.label.setAttribute("data-value",e.getAttribute("data-value")):this.label.removeAttribute("data-value"),e.hasAttribute("data-label")?this.label.setAttribute("data-label",e.getAttribute("data-label")):this.label.removeAttribute("data-label"),t&&(this.select.dispatchEvent(new Event("change")),this.close())))}update(){let e;if(this.select.selectedIndex>-1){const t=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];e=this.select.options[this.select.selectedIndex],this.selectItem(t)}else this.selectItem(null);const t=null!=e&&e!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",t)}}},"./node_modules/quill/ui/tooltip.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=class{constructor(e,t){this.quill=e,this.boundsContainer=t||document.body,this.root=e.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,(e=>{const{overflowY:t}=getComputedStyle(e,null);return"visible"!==t&&"clip"!==t})(this.quill.root)&&this.quill.root.addEventListener("scroll",(()=>{this.root.style.marginTop=-1*this.quill.root.scrollTop+"px"})),this.hide()}hide(){this.root.classList.add("ql-hidden")}position(e){const t=e.left+e.width/2-this.root.offsetWidth/2,s=e.bottom+this.quill.root.scrollTop;this.root.style.left=`${t}px`,this.root.style.top=`${s}px`,this.root.classList.remove("ql-flip");const r=this.boundsContainer.getBoundingClientRect(),n=this.root.getBoundingClientRect();let o=0;if(n.right>r.right&&(o=r.right-n.right,this.root.style.left=`${t+o}px`),n.left<r.left&&(o=r.left-n.left,this.root.style.left=`${t+o}px`),n.bottom>r.bottom){const t=n.bottom-n.top,r=e.bottom-e.top+t;this.root.style.top=s-r+"px",this.root.classList.add("ql-flip")}return o}show(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,s),o.loaded=!0,o.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};(()=>{"use strict";s.r(r);s("./assets/bootstrap.js"),s("./assets/styles/app.css")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,